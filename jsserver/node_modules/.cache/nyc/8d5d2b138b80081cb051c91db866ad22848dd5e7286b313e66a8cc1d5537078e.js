var cov_1j2k65srje=function(){var path="/Users/hb/latlib/jsserver/javascript-algorithms/src/data-structures/trie/Trie.js";var hash="cdcd3d2662df86df9c98fd46eb1a88c03849b9e5";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/hb/latlib/jsserver/javascript-algorithms/src/data-structures/trie/Trie.js",statementMap:{"0":{start:{line:4,column:23},end:{line:4,column:26}},"1":{start:{line:8,column:4},end:{line:8,column:45}},"2":{start:{line:16,column:23},end:{line:16,column:39}},"3":{start:{line:17,column:22},end:{line:17,column:31}},"4":{start:{line:19,column:4},end:{line:22,column:5}},"5":{start:{line:19,column:25},end:{line:19,column:26}},"6":{start:{line:20,column:25},end:{line:20,column:60}},"7":{start:{line:21,column:6},end:{line:21,column:76}},"8":{start:{line:24,column:4},end:{line:24,column:16}},"9":{start:{line:32,column:29},end:{line:58,column:5}},"10":{start:{line:33,column:6},end:{line:36,column:7}},"11":{start:{line:35,column:8},end:{line:35,column:15}},"12":{start:{line:38,column:24},end:{line:38,column:39}},"13":{start:{line:39,column:23},end:{line:39,column:54}},"14":{start:{line:41,column:6},end:{line:44,column:7}},"15":{start:{line:43,column:8},end:{line:43,column:15}},"16":{start:{line:47,column:6},end:{line:47,column:48}},"17":{start:{line:50,column:6},end:{line:52,column:7}},"18":{start:{line:51,column:8},end:{line:51,column:40}},"19":{start:{line:57,column:6},end:{line:57,column:41}},"20":{start:{line:61,column:4},end:{line:61,column:32}},"21":{start:{line:63,column:4},end:{line:63,column:16}},"22":{start:{line:71,column:26},end:{line:71,column:57}},"23":{start:{line:73,column:4},end:{line:75,column:5}},"24":{start:{line:74,column:6},end:{line:74,column:18}},"25":{start:{line:77,column:4},end:{line:77,column:43}},"26":{start:{line:87,column:26},end:{line:87,column:57}},"27":{start:{line:89,column:4},end:{line:89,column:59}},"28":{start:{line:97,column:23},end:{line:97,column:39}},"29":{start:{line:98,column:22},end:{line:98,column:31}},"30":{start:{line:100,column:4},end:{line:106,column:5}},"31":{start:{line:100,column:25},end:{line:100,column:26}},"32":{start:{line:101,column:6},end:{line:103,column:7}},"33":{start:{line:102,column:8},end:{line:102,column:20}},"34":{start:{line:105,column:6},end:{line:105,column:64}},"35":{start:{line:108,column:4},end:{line:108,column:23}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:7,column:2},end:{line:7,column:3}},loc:{start:{line:7,column:16},end:{line:9,column:3}},line:7},"1":{name:"(anonymous_1)",decl:{start:{line:15,column:2},end:{line:15,column:3}},loc:{start:{line:15,column:16},end:{line:25,column:3}},line:15},"2":{name:"(anonymous_2)",decl:{start:{line:31,column:2},end:{line:31,column:3}},loc:{start:{line:31,column:19},end:{line:64,column:3}},line:31},"3":{name:"(anonymous_3)",decl:{start:{line:32,column:29},end:{line:32,column:30}},loc:{start:{line:32,column:61},end:{line:58,column:5}},line:32},"4":{name:"(anonymous_4)",decl:{start:{line:70,column:2},end:{line:70,column:3}},loc:{start:{line:70,column:30},end:{line:78,column:3}},line:70},"5":{name:"(anonymous_5)",decl:{start:{line:86,column:2},end:{line:86,column:3}},loc:{start:{line:86,column:22},end:{line:90,column:3}},line:86},"6":{name:"(anonymous_6)",decl:{start:{line:96,column:2},end:{line:96,column:3}},loc:{start:{line:96,column:29},end:{line:109,column:3}},line:96}},branchMap:{"0":{loc:{start:{line:32,column:43},end:{line:32,column:56}},type:"default-arg",locations:[{start:{line:32,column:55},end:{line:32,column:56}}],line:32},"1":{loc:{start:{line:33,column:6},end:{line:36,column:7}},type:"if",locations:[{start:{line:33,column:6},end:{line:36,column:7}},{start:{line:33,column:6},end:{line:36,column:7}}],line:33},"2":{loc:{start:{line:41,column:6},end:{line:44,column:7}},type:"if",locations:[{start:{line:41,column:6},end:{line:44,column:7}},{start:{line:41,column:6},end:{line:44,column:7}}],line:41},"3":{loc:{start:{line:50,column:6},end:{line:52,column:7}},type:"if",locations:[{start:{line:50,column:6},end:{line:52,column:7}},{start:{line:50,column:6},end:{line:52,column:7}}],line:50},"4":{loc:{start:{line:73,column:4},end:{line:75,column:5}},type:"if",locations:[{start:{line:73,column:4},end:{line:75,column:5}},{start:{line:73,column:4},end:{line:75,column:5}}],line:73},"5":{loc:{start:{line:89,column:11},end:{line:89,column:58}},type:"binary-expr",locations:[{start:{line:89,column:11},end:{line:89,column:26}},{start:{line:89,column:30},end:{line:89,column:58}}],line:89},"6":{loc:{start:{line:101,column:6},end:{line:103,column:7}},type:"if",locations:[{start:{line:101,column:6},end:{line:103,column:7}},{start:{line:101,column:6},end:{line:103,column:7}}],line:101}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},b:{"0":[0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"cdcd3d2662df86df9c98fd46eb1a88c03849b9e5"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();import TrieNode from'./TrieNode';// Character that we will use for trie tree root.
const HEAD_CHARACTER=(cov_1j2k65srje.s[0]++,'*');export default class Trie{constructor(){cov_1j2k65srje.f[0]++;cov_1j2k65srje.s[1]++;this.head=new TrieNode(HEAD_CHARACTER);}/**
   * @param {string} word
   * @return {Trie}
   */addWord(word){cov_1j2k65srje.f[1]++;const characters=(cov_1j2k65srje.s[2]++,Array.from(word));let currentNode=(cov_1j2k65srje.s[3]++,this.head);cov_1j2k65srje.s[4]++;for(let charIndex=(cov_1j2k65srje.s[5]++,0);charIndex<characters.length;charIndex+=1){const isComplete=(cov_1j2k65srje.s[6]++,charIndex===characters.length-1);cov_1j2k65srje.s[7]++;currentNode=currentNode.addChild(characters[charIndex],isComplete);}cov_1j2k65srje.s[8]++;return this;}/**
   * @param {string} word
   * @return {Trie}
   */deleteWord(word){cov_1j2k65srje.f[2]++;cov_1j2k65srje.s[9]++;const depthFirstDelete=(currentNode,charIndex=(cov_1j2k65srje.b[0][0]++,0))=>{cov_1j2k65srje.f[3]++;cov_1j2k65srje.s[10]++;if(charIndex>=word.length){cov_1j2k65srje.b[1][0]++;cov_1j2k65srje.s[11]++;// Return if we're trying to delete the character that is out of word's scope.
return;}else{cov_1j2k65srje.b[1][1]++;}const character=(cov_1j2k65srje.s[12]++,word[charIndex]);const nextNode=(cov_1j2k65srje.s[13]++,currentNode.getChild(character));cov_1j2k65srje.s[14]++;if(nextNode==null){cov_1j2k65srje.b[2][0]++;cov_1j2k65srje.s[15]++;// Return if we're trying to delete a word that has not been added to the Trie.
return;}else{cov_1j2k65srje.b[2][1]++;}// Go deeper.
cov_1j2k65srje.s[16]++;depthFirstDelete(nextNode,charIndex+1);// Since we're going to delete a word let's un-mark its last character isCompleteWord flag.
cov_1j2k65srje.s[17]++;if(charIndex===word.length-1){cov_1j2k65srje.b[3][0]++;cov_1j2k65srje.s[18]++;nextNode.isCompleteWord=false;}else{cov_1j2k65srje.b[3][1]++;}// childNode is deleted only if:
// - childNode has NO children
// - childNode.isCompleteWord === false
cov_1j2k65srje.s[19]++;currentNode.removeChild(character);};// Start depth-first deletion from the head node.
cov_1j2k65srje.s[20]++;depthFirstDelete(this.head);cov_1j2k65srje.s[21]++;return this;}/**
   * @param {string} word
   * @return {string[]}
   */suggestNextCharacters(word){cov_1j2k65srje.f[4]++;const lastCharacter=(cov_1j2k65srje.s[22]++,this.getLastCharacterNode(word));cov_1j2k65srje.s[23]++;if(!lastCharacter){cov_1j2k65srje.b[4][0]++;cov_1j2k65srje.s[24]++;return null;}else{cov_1j2k65srje.b[4][1]++;}cov_1j2k65srje.s[25]++;return lastCharacter.suggestChildren();}/**
   * Check if complete word exists in Trie.
   *
   * @param {string} word
   * @return {boolean}
   */doesWordExist(word){cov_1j2k65srje.f[5]++;const lastCharacter=(cov_1j2k65srje.s[26]++,this.getLastCharacterNode(word));cov_1j2k65srje.s[27]++;return(cov_1j2k65srje.b[5][0]++,!!lastCharacter)&&(cov_1j2k65srje.b[5][1]++,lastCharacter.isCompleteWord);}/**
   * @param {string} word
   * @return {TrieNode}
   */getLastCharacterNode(word){cov_1j2k65srje.f[6]++;const characters=(cov_1j2k65srje.s[28]++,Array.from(word));let currentNode=(cov_1j2k65srje.s[29]++,this.head);cov_1j2k65srje.s[30]++;for(let charIndex=(cov_1j2k65srje.s[31]++,0);charIndex<characters.length;charIndex+=1){cov_1j2k65srje.s[32]++;if(!currentNode.hasChild(characters[charIndex])){cov_1j2k65srje.b[6][0]++;cov_1j2k65srje.s[33]++;return null;}else{cov_1j2k65srje.b[6][1]++;}cov_1j2k65srje.s[34]++;currentNode=currentNode.getChild(characters[charIndex]);}cov_1j2k65srje.s[35]++;return currentNode;}}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9oYi9sYXRsaWIvanNzZXJ2ZXIvamF2YXNjcmlwdC1hbGdvcml0aG1zL3NyYy9kYXRhLXN0cnVjdHVyZXMvdHJpZS9UcmllLmpzIl0sIm5hbWVzIjpbIlRyaWVOb2RlIiwiSEVBRF9DSEFSQUNURVIiLCJUcmllIiwiY29uc3RydWN0b3IiLCJoZWFkIiwiYWRkV29yZCIsIndvcmQiLCJjaGFyYWN0ZXJzIiwiQXJyYXkiLCJmcm9tIiwiY3VycmVudE5vZGUiLCJjaGFySW5kZXgiLCJsZW5ndGgiLCJpc0NvbXBsZXRlIiwiYWRkQ2hpbGQiLCJkZWxldGVXb3JkIiwiZGVwdGhGaXJzdERlbGV0ZSIsImNoYXJhY3RlciIsIm5leHROb2RlIiwiZ2V0Q2hpbGQiLCJpc0NvbXBsZXRlV29yZCIsInJlbW92ZUNoaWxkIiwic3VnZ2VzdE5leHRDaGFyYWN0ZXJzIiwibGFzdENoYXJhY3RlciIsImdldExhc3RDaGFyYWN0ZXJOb2RlIiwic3VnZ2VzdENoaWxkcmVuIiwiZG9lc1dvcmRFeGlzdCIsImhhc0NoaWxkIl0sIm1hcHBpbmdzIjoic3VLQUFBLE1BQU9BLENBQUFBLFFBQVAsS0FBcUIsWUFBckIsQ0FFQTtBQUNBLEtBQU1DLENBQUFBLGNBQWMsd0JBQUcsR0FBSCxDQUFwQixDQUVBLGNBQWUsTUFBTUMsQ0FBQUEsSUFBSyxDQUN4QkMsV0FBVyxFQUFHLDZDQUNaLEtBQUtDLElBQUwsQ0FBWSxHQUFJSixDQUFBQSxRQUFKLENBQWFDLGNBQWIsQ0FBWixDQUNELENBRUQ7OztLQUlBSSxPQUFPLENBQUNDLElBQUQsQ0FBTyx1QkFDWixLQUFNQyxDQUFBQSxVQUFVLHdCQUFHQyxLQUFLLENBQUNDLElBQU4sQ0FBV0gsSUFBWCxDQUFILENBQWhCLENBQ0EsR0FBSUksQ0FBQUEsV0FBVyx3QkFBRyxLQUFLTixJQUFSLENBQWYsQ0FGWSxzQkFJWixJQUFLLEdBQUlPLENBQUFBLFNBQVMsd0JBQUcsQ0FBSCxDQUFsQixDQUF3QkEsU0FBUyxDQUFHSixVQUFVLENB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LFdBQVAsQ0FDRCxDQXZHdUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVHJpZU5vZGUgZnJvbSAnLi9UcmllTm9kZSc7XG5cbi8vIENoYXJhY3RlciB0aGF0IHdlIHdpbGwgdXNlIGZvciB0cmllIHRyZWUgcm9vdC5cbmNvbnN0IEhFQURfQ0hBUkFDVEVSID0gJyonO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUcmllIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5oZWFkID0gbmV3IFRyaWVOb2RlKEhFQURfQ0hBUkFDVEVSKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gd29yZFxuICAgKiBAcmV0dXJuIHtUcmllfVxuICAgKi9cbiAgYWRkV29yZCh3b3JkKSB7XG4gICAgY29uc3QgY2hhcmFjdGVycyA9IEFycmF5LmZyb20od29yZCk7XG4gICAgbGV0IGN1cnJlbnROb2RlID0gdGhpcy5oZWFkO1xuXG4gICAgZm9yIChsZXQgY2hhckluZGV4ID0gMDsgY2hhckluZGV4IDwgY2hhcmFjdGVycy5sZW5ndGg7IGNoYXJJbmRleCArPSAxKSB7XG4gICAgICBjb25zdCBpc0NvbXBsZXRlID0gY2hhckluZGV4ID09PSBjaGFyYWN0ZXJzLmxlbmd0aCAtIDE7XG4gICAgICBjdXJyZW50Tm9kZSA9IGN1cnJlbnROb2RlLmFkZENoaWxkKGNoYXJhY3RlcnNbY2hhckluZGV4XSwgaXNDb21wbGV0ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHdvcmRcbiAgICogQHJldHVybiB7VHJpZX1cbiAgICovXG4gIGRlbGV0ZVdvcmQod29yZCkge1xuICAgIGNvbnN0IGRlcHRoRmlyc3REZWxldGUgPSAoY3VycmVudE5vZGUsIGNoYXJJbmRleCA9IDApID0+IHtcbiAgICAgIGlmIChjaGFySW5kZXggPj0gd29yZC5sZW5ndGgpIHtcbiAgICAgICAgLy8gUmV0dXJuIGlmIHdlJ3JlIHRyeWluZyB0byBkZWxldGUgdGhlIGNoYXJhY3RlciB0aGF0IGlzIG91dCBvZiB3b3JkJ3Mgc2NvcGUuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3QgY2hhcmFjdGVyID0gd29yZFtjaGFySW5kZXhdO1xuICAgICAgY29uc3QgbmV4dE5vZGUgPSBjdXJyZW50Tm9kZS5nZXRDaGlsZChjaGFyYWN0ZXIpO1xuXG4gICAgICBpZiAobmV4dE5vZGUgPT0gbnVsbCkge1xuICAgICAgICAvLyBSZXR1cm4gaWYgd2UncmUgdHJ5aW5nIHRvIGRlbGV0ZSBhIHdvcmQgdGhhdCBoYXMgbm90IGJlZW4gYWRkZWQgdG8gdGhlIFRyaWUuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gR28gZGVlcGVyLlxuICAgICAgZGVwdGhGaXJzdERlbGV0ZShuZXh0Tm9kZSwgY2hhckluZGV4ICsgMSk7XG5cbiAgICAgIC8vIFNpbmNlIHdlJ3JlIGdvaW5nIHRvIGRlbGV0ZSBhIHdvcmQgbGV0J3MgdW4tbWFyayBpdHMgbGFzdCBjaGFyYWN0ZXIgaXNDb21wbGV0ZVdvcmQgZmxhZy5cbiAgICAgIGlmIChjaGFySW5kZXggPT09ICh3b3JkLmxlbmd0aCAtIDEpKSB7XG4gICAgICAgIG5leHROb2RlLmlzQ29tcGxldGVXb3JkID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIC8vIGNoaWxkTm9kZSBpcyBkZWxldGVkIG9ubHkgaWY6XG4gICAgICAvLyAtIGNoaWxkTm9kZSBoYXMgTk8gY2hpbGRyZW5cbiAgICAgIC8vIC0gY2hpbGROb2RlLmlzQ29tcGxldGVXb3JkID09PSBmYWxzZVxuICAgICAgY3VycmVudE5vZGUucmVtb3ZlQ2hpbGQoY2hhcmFjdGVyKTtcbiAgICB9O1xuXG4gICAgLy8gU3RhcnQgZGVwdGgtZmlyc3QgZGVsZXRpb24gZnJvbSB0aGUgaGVhZCBub2RlLlxuICAgIGRlcHRoRmlyc3REZWxldGUodGhpcy5oZWFkKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB3b3JkXG4gICAqIEByZXR1cm4ge3N0cmluZ1tdfVxuICAgKi9cbiAgc3VnZ2VzdE5leHRDaGFyYWN0ZXJzKHdvcmQpIHtcbiAgICBjb25zdCBsYXN0Q2hhcmFjdGVyID0gdGhpcy5nZXRMYXN0Q2hhcmFjdGVyTm9kZSh3b3JkKTtcblxuICAgIGlmICghbGFzdENoYXJhY3Rlcikge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxhc3RDaGFyYWN0ZXIuc3VnZ2VzdENoaWxkcmVuKCk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgaWYgY29tcGxldGUgd29yZCBleGlzdHMgaW4gVHJpZS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHdvcmRcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIGRvZXNXb3JkRXhpc3Qod29yZCkge1xuICAgIGNvbnN0IGxhc3RDaGFyYWN0ZXIgPSB0aGlzLmdldExhc3RDaGFyYWN0ZXJOb2RlKHdvcmQpO1xuXG4gICAgcmV0dXJuICEhbGFzdENoYXJhY3RlciAmJiBsYXN0Q2hhcmFjdGVyLmlzQ29tcGxldGVXb3JkO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB3b3JkXG4gICAqIEByZXR1cm4ge1RyaWVOb2RlfVxuICAgKi9cbiAgZ2V0TGFzdENoYXJhY3Rlck5vZGUod29yZCkge1xuICAgIGNvbnN0IGNoYXJhY3RlcnMgPSBBcnJheS5mcm9tKHdvcmQpO1xuICAgIGxldCBjdXJyZW50Tm9kZSA9IHRoaXMuaGVhZDtcblxuICAgIGZvciAobGV0IGNoYXJJbmRleCA9IDA7IGNoYXJJbmRleCA8IGNoYXJhY3RlcnMubGVuZ3RoOyBjaGFySW5kZXggKz0gMSkge1xuICAgICAgaWYgKCFjdXJyZW50Tm9kZS5oYXNDaGlsZChjaGFyYWN0ZXJzW2NoYXJJbmRleF0pKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICBjdXJyZW50Tm9kZSA9IGN1cnJlbnROb2RlLmdldENoaWxkKGNoYXJhY3RlcnNbY2hhckluZGV4XSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGN1cnJlbnROb2RlO1xuICB9XG59XG4iXX0=