var cov_1ybuwanchj=function(){var path="/Users/hb/latlib/jsserver/javascript-algorithms/src/algorithms/graph/strongly-connected-components/stronglyConnectedComponents.js";var hash="710e8099901711f097a63c6787edd5ab5a01e29f";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/hb/latlib/jsserver/javascript-algorithms/src/algorithms/graph/strongly-connected-components/stronglyConnectedComponents.js",statementMap:{"0":{start:{line:10,column:29},end:{line:10,column:31}},"1":{start:{line:16,column:34},end:{line:16,column:45}},"2":{start:{line:19,column:32},end:{line:19,column:34}},"3":{start:{line:20,column:2},end:{line:22,column:5}},"4":{start:{line:21,column:4},end:{line:21,column:52}},"5":{start:{line:25,column:23},end:{line:42,column:3}},"6":{start:{line:28,column:6},end:{line:28,column:65}},"7":{start:{line:31,column:6},end:{line:31,column:59}},"8":{start:{line:36,column:6},end:{line:36,column:50}},"9":{start:{line:40,column:6},end:{line:40,column:54}},"10":{start:{line:45,column:2},end:{line:52,column:3}},"11":{start:{line:47,column:27},end:{line:47,column:64}},"12":{start:{line:48,column:24},end:{line:48,column:61}},"13":{start:{line:49,column:4},end:{line:49,column:49}},"14":{start:{line:51,column:4},end:{line:51,column:55}},"15":{start:{line:54,column:2},end:{line:54,column:33}},"16":{start:{line:64,column:42},end:{line:64,column:44}},"17":{start:{line:67,column:39},end:{line:67,column:41}},"18":{start:{line:70,column:29},end:{line:70,column:31}},"19":{start:{line:73,column:23},end:{line:94,column:3}},"20":{start:{line:76,column:6},end:{line:76,column:57}},"21":{start:{line:79,column:6},end:{line:79,column:65}},"22":{start:{line:86,column:6},end:{line:88,column:7}},"23":{start:{line:87,column:8},end:{line:87,column:82}},"24":{start:{line:92,column:6},end:{line:92,column:54}},"25":{start:{line:96,column:2},end:{line:108,column:3}},"26":{start:{line:98,column:24},end:{line:98,column:50}},"27":{start:{line:101,column:4},end:{line:101,column:40}},"28":{start:{line:104,column:4},end:{line:107,column:5}},"29":{start:{line:106,column:6},end:{line:106,column:57}},"30":{start:{line:110,column:2},end:{line:110,column:41}},"31":{start:{line:126,column:31},end:{line:126,column:70}},"32":{start:{line:129,column:2},end:{line:129,column:18}},"33":{start:{line:132,column:2},end:{line:132,column:49}}},fnMap:{"0":{name:"getVerticesSortedByDfsFinishTime",decl:{start:{line:8,column:9},end:{line:8,column:41}},loc:{start:{line:8,column:49},end:{line:55,column:1}},line:8},"1":{name:"(anonymous_1)",decl:{start:{line:20,column:33},end:{line:20,column:34}},loc:{start:{line:20,column:45},end:{line:22,column:3}},line:20},"2":{name:"(anonymous_2)",decl:{start:{line:26,column:17},end:{line:26,column:18}},loc:{start:{line:26,column:40},end:{line:32,column:5}},line:26},"3":{name:"(anonymous_3)",decl:{start:{line:33,column:17},end:{line:33,column:18}},loc:{start:{line:33,column:40},end:{line:37,column:5}},line:33},"4":{name:"(anonymous_4)",decl:{start:{line:38,column:20},end:{line:38,column:21}},loc:{start:{line:38,column:40},end:{line:41,column:5}},line:38},"5":{name:"getSCCSets",decl:{start:{line:62,column:9},end:{line:62,column:19}},loc:{start:{line:62,column:49},end:{line:111,column:1}},line:62},"6":{name:"(anonymous_6)",decl:{start:{line:74,column:17},end:{line:74,column:18}},loc:{start:{line:74,column:40},end:{line:80,column:5}},line:74},"7":{name:"(anonymous_7)",decl:{start:{line:81,column:17},end:{line:81,column:18}},loc:{start:{line:81,column:41},end:{line:89,column:5}},line:81},"8":{name:"(anonymous_8)",decl:{start:{line:90,column:20},end:{line:90,column:21}},loc:{start:{line:90,column:40},end:{line:93,column:5}},line:90},"9":{name:"stronglyConnectedComponents",decl:{start:{line:119,column:24},end:{line:119,column:51}},loc:{start:{line:119,column:59},end:{line:133,column:1}},line:119}},branchMap:{"0":{loc:{start:{line:86,column:6},end:{line:88,column:7}},type:"if",locations:[{start:{line:86,column:6},end:{line:88,column:7}},{start:{line:86,column:6},end:{line:88,column:7}}],line:86},"1":{loc:{start:{line:104,column:4},end:{line:107,column:5}},type:"if",locations:[{start:{line:104,column:4},end:{line:107,column:5}},{start:{line:104,column:4},end:{line:107,column:5}}],line:104}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},b:{"0":[0,0],"1":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"710e8099901711f097a63c6787edd5ab5a01e29f"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();import Stack from'../../../data-structures/stack/Stack';import depthFirstSearch from'../depth-first-search/depthFirstSearch';/**
 * @param {Graph} graph
 * @return {Stack}
 */function getVerticesSortedByDfsFinishTime(graph){cov_1ybuwanchj.f[0]++;// Set of all visited vertices during DFS pass.
const visitedVerticesSet=(cov_1ybuwanchj.s[0]++,{});// Stack of vertices by finish time.
// All vertices in this stack are ordered by finished time in decreasing order.
// Vertex that has been finished first will be at the bottom of the stack and
// vertex that has been finished last will be at the top of the stack.
const verticesByDfsFinishTime=(cov_1ybuwanchj.s[1]++,new Stack());// Set of all vertices we're going to visit.
const notVisitedVerticesSet=(cov_1ybuwanchj.s[2]++,{});cov_1ybuwanchj.s[3]++;graph.getAllVertices().forEach(vertex=>{cov_1ybuwanchj.f[1]++;cov_1ybuwanchj.s[4]++;notVisitedVerticesSet[vertex.getKey()]=vertex;});// Specify DFS traversal callbacks.
const dfsCallbacks=(cov_1ybuwanchj.s[5]++,{enterVertex:({currentVertex})=>{cov_1ybuwanchj.f[2]++;cov_1ybuwanchj.s[6]++;// Add current vertex to visited set.
visitedVerticesSet[currentVertex.getKey()]=currentVertex;// Delete current vertex from not visited set.
cov_1ybuwanchj.s[7]++;delete notVisitedVerticesSet[currentVertex.getKey()];},leaveVertex:({currentVertex})=>{cov_1ybuwanchj.f[3]++;cov_1ybuwanchj.s[8]++;// Push vertex to the stack when leaving it.
// This will make stack to be ordered by finish time in decreasing order.
verticesByDfsFinishTime.push(currentVertex);},allowTraversal:({nextVertex})=>{cov_1ybuwanchj.f[4]++;cov_1ybuwanchj.s[9]++;// Don't allow to traverse the nodes that have been already visited.
return!visitedVerticesSet[nextVertex.getKey()];}});// Do FIRST DFS PASS traversal for all graph vertices to fill the verticesByFinishTime stack.
cov_1ybuwanchj.s[10]++;while(Object.values(notVisitedVerticesSet).length){// Peek any vertex to start DFS traversal from.
const startVertexKey=(cov_1ybuwanchj.s[11]++,Object.keys(notVisitedVerticesSet)[0]);const startVertex=(cov_1ybuwanchj.s[12]++,notVisitedVerticesSet[startVertexKey]);cov_1ybuwanchj.s[13]++;delete notVisitedVerticesSet[startVertexKey];cov_1ybuwanchj.s[14]++;depthFirstSearch(graph,startVertex,dfsCallbacks);}cov_1ybuwanchj.s[15]++;return verticesByDfsFinishTime;}/**
 * @param {Graph} graph
 * @param {Stack} verticesByFinishTime
 * @return {*[]}
 */function getSCCSets(graph,verticesByFinishTime){cov_1ybuwanchj.f[5]++;// Array of arrays of strongly connected vertices.
const stronglyConnectedComponentsSets=(cov_1ybuwanchj.s[16]++,[]);// Array that will hold all vertices that are being visited during one DFS run.
let stronglyConnectedComponentsSet=(cov_1ybuwanchj.s[17]++,[]);// Visited vertices set.
const visitedVerticesSet=(cov_1ybuwanchj.s[18]++,{});// Callbacks for DFS traversal.
const dfsCallbacks=(cov_1ybuwanchj.s[19]++,{enterVertex:({currentVertex})=>{cov_1ybuwanchj.f[6]++;cov_1ybuwanchj.s[20]++;// Add current vertex to SCC set of current DFS round.
stronglyConnectedComponentsSet.push(currentVertex);// Add current vertex to visited set.
cov_1ybuwanchj.s[21]++;visitedVerticesSet[currentVertex.getKey()]=currentVertex;},leaveVertex:({previousVertex})=>{cov_1ybuwanchj.f[7]++;cov_1ybuwanchj.s[22]++;// Once DFS traversal is finished push the set of found strongly connected
// components during current DFS round to overall strongly connected components set.
// The sign that traversal is about to be finished is that we came back to start vertex
// which doesn't have parent.
if(previousVertex===null){cov_1ybuwanchj.b[0][0]++;cov_1ybuwanchj.s[23]++;stronglyConnectedComponentsSets.push([...stronglyConnectedComponentsSet]);}else{cov_1ybuwanchj.b[0][1]++;}},allowTraversal:({nextVertex})=>{cov_1ybuwanchj.f[8]++;cov_1ybuwanchj.s[24]++;// Don't allow traversal of already visited vertices.
return!visitedVerticesSet[nextVertex.getKey()];}});cov_1ybuwanchj.s[25]++;while(!verticesByFinishTime.isEmpty()){/** @var {GraphVertex} startVertex */const startVertex=(cov_1ybuwanchj.s[26]++,verticesByFinishTime.pop());// Reset the set of strongly connected vertices.
cov_1ybuwanchj.s[27]++;stronglyConnectedComponentsSet=[];// Don't do DFS on already visited vertices.
cov_1ybuwanchj.s[28]++;if(!visitedVerticesSet[startVertex.getKey()]){cov_1ybuwanchj.b[1][0]++;cov_1ybuwanchj.s[29]++;// Do DFS traversal.
depthFirstSearch(graph,startVertex,dfsCallbacks);}else{cov_1ybuwanchj.b[1][1]++;}}cov_1ybuwanchj.s[30]++;return stronglyConnectedComponentsSets;}/**
 * Kosaraju's algorithm.
 *
 * @param {Graph} graph
 * @return {*[]}
 */export default function stronglyConnectedComponents(graph){cov_1ybuwanchj.f[9]++;// In this algorithm we will need to do TWO DFS PASSES overt the graph.
// Get stack of vertices ordered by DFS finish time.
// All vertices in this stack are ordered by finished time in decreasing order:
// Vertex that has been finished first will be at the bottom of the stack and
// vertex that has been finished last will be at the top of the stack.
const verticesByFinishTime=(cov_1ybuwanchj.s[31]++,getVerticesSortedByDfsFinishTime(graph));// Reverse the graph.
cov_1ybuwanchj.s[32]++;graph.reverse();// Do DFS once again on reversed graph.
cov_1ybuwanchj.s[33]++;return getSCCSets(graph,verticesByFinishTime);}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,