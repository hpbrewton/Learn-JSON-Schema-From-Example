var cov_2qhp816o1e=function(){var path="/Users/hb/latlib/jsserver/javascript-algorithms/src/algorithms/graph/detect-cycle/detectUndirectedCycleUsingDisjointSet.js";var hash="dc602d4e3f21f0b79558f006a6b5cd3608e07183";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/hb/latlib/jsserver/javascript-algorithms/src/algorithms/graph/detect-cycle/detectUndirectedCycleUsingDisjointSet.js",statementMap:{"0":{start:{line:11,column:23},end:{line:11,column:58}},"1":{start:{line:11,column:38},end:{line:11,column:58}},"2":{start:{line:12,column:22},end:{line:12,column:51}},"3":{start:{line:13,column:2},end:{line:13,column:82}},"4":{start:{line:13,column:48},end:{line:13,column:80}},"5":{start:{line:19,column:19},end:{line:19,column:24}},"6":{start:{line:21,column:2},end:{line:28,column:5}},"7":{start:{line:22,column:4},end:{line:27,column:5}},"8":{start:{line:24,column:6},end:{line:24,column:24}},"9":{start:{line:26,column:6},end:{line:26,column:68}},"10":{start:{line:30,column:2},end:{line:30,column:20}}},fnMap:{"0":{name:"detectUndirectedCycleUsingDisjointSet",decl:{start:{line:8,column:24},end:{line:8,column:61}},loc:{start:{line:8,column:69},end:{line:31,column:1}},line:8},"1":{name:"(anonymous_1)",decl:{start:{line:11,column:23},end:{line:11,column:24}},loc:{start:{line:11,column:38},end:{line:11,column:58}},line:11},"2":{name:"(anonymous_2)",decl:{start:{line:13,column:33},end:{line:13,column:34}},loc:{start:{line:13,column:48},end:{line:13,column:80}},line:13},"3":{name:"(anonymous_3)",decl:{start:{line:21,column:30},end:{line:21,column:31}},loc:{start:{line:21,column:45},end:{line:28,column:3}},line:21}},branchMap:{"0":{loc:{start:{line:22,column:4},end:{line:27,column:5}},type:"if",locations:[{start:{line:22,column:4},end:{line:27,column:5}},{start:{line:22,column:4},end:{line:27,column:5}}],line:22}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},f:{"0":0,"1":0,"2":0,"3":0},b:{"0":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"dc602d4e3f21f0b79558f006a6b5cd3608e07183"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();import DisjointSet from'../../../data-structures/disjoint-set/DisjointSet';/**
 * Detect cycle in undirected graph using disjoint sets.
 *
 * @param {Graph} graph
 */export default function detectUndirectedCycleUsingDisjointSet(graph){cov_2qhp816o1e.f[0]++;cov_2qhp816o1e.s[0]++;// Create initial singleton disjoint sets for each graph vertex.
/** @param {GraphVertex} graphVertex */const keyExtractor=graphVertex=>{cov_2qhp816o1e.f[1]++;cov_2qhp816o1e.s[1]++;return graphVertex.getKey();};const disjointSet=(cov_2qhp816o1e.s[2]++,new DisjointSet(keyExtractor));cov_2qhp816o1e.s[3]++;graph.getAllVertices().forEach(graphVertex=>{cov_2qhp816o1e.f[2]++;cov_2qhp816o1e.s[4]++;return disjointSet.makeSet(graphVertex);});// Go trough all graph edges one by one and check if edge vertices are from the
// different sets. In this case joint those sets together. Do this until you find
// an edge where to edge vertices are already in one set. This means that current
// edge will create a cycle.
let cycleFound=(cov_2qhp816o1e.s[5]++,false);/** @param {GraphEdge} graphEdge */cov_2qhp816o1e.s[6]++;graph.getAllEdges().forEach(graphEdge=>{cov_2qhp816o1e.f[3]++;cov_2qhp816o1e.s[7]++;if(disjointSet.inSameSet(graphEdge.startVertex,graphEdge.endVertex)){cov_2qhp816o1e.b[0][0]++;cov_2qhp816o1e.s[8]++;// Cycle found.
cycleFound=true;}else{cov_2qhp816o1e.b[0][1]++;cov_2qhp816o1e.s[9]++;disjointSet.union(graphEdge.startVertex,graphEdge.endVertex);}});cov_2qhp816o1e.s[10]++;return cycleFound;}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9oYi9sYXRsaWIvanNzZXJ2ZXIvamF2YXNjcmlwdC1hbGdvcml0aG1zL3NyYy9hbGdvcml0aG1zL2dyYXBoL2RldGVjdC1jeWNsZS9kZXRlY3RVbmRpcmVjdGVkQ3ljbGVVc2luZ0Rpc2pvaW50U2V0LmpzIl0sIm5hbWVzIjpbIkRpc2pvaW50U2V0IiwiZGV0ZWN0VW5kaXJlY3RlZEN5Y2xlVXNpbmdEaXNqb2ludFNldCIsImdyYXBoIiwia2V5RXh0cmFjdG9yIiwiZ3JhcGhWZXJ0ZXgiLCJnZXRLZXkiLCJkaXNqb2ludFNldCIsImdldEFsbFZlcnRpY2VzIiwiZm9yRWFjaCIsIm1ha2VTZXQiLCJjeWNsZUZvdW5kIiwiZ2V0QWxsRWRnZXMiLCJncmFwaEVkZ2UiLCJpblNhbWVTZXQiLCJzdGFydFZlcnRleCIsImVuZFZlcnRleCIsInVuaW9uIl0sIm1hcHBpbmdzIjoicXNFQUFBLE1BQU9BLENBQUFBLFdBQVAsS0FBd0IsbURBQXhCLENBRUE7Ozs7R0FLQSxjQUFlLFNBQVNDLENBQUFBLHFDQUFULENBQStDQyxLQUEvQyxDQUFzRCw2Q0FDbkU7QUFDQSx1Q0FDQSxLQUFNQyxDQUFBQSxZQUFZLENBQUdDLFdBQVcsRUFBSSxtREFBQUEsQ0FBQUEsV0FBVyxDQUFDQyxNQUFaLEdBQW9CLENBQXhELENBQ0EsS0FBTUMsQ0FBQUEsV0FBVyx3QkFBRyxHQUFJTixDQUFBQSxXQUFKLENBQWdCRyxZQUFoQixDQUFILENBQWpCLENBSm1FLHNCQUtuRUQsS0FBSyxDQUFDSyxjQUFOLEdBQXVCQyxPQUF2QixDQUErQkosV0FBVyxFQUFJLG1EQUFBRSxDQUFBQSxXQUFXLENBQUNHLE9BQVosQ0FBb0JMLFdBQXBCLEVBQWdDLENBQTlFLEVBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFJTSxDQUFBQSxVQUFVLHdCQUFHLEtBQUgsQ0FBZCxDQUNBLG1DQVptRSxzQkFhbkVSLEtBQUssQ0FBQ1MsV0FBTixHQUFvQkgsT0FBcEIsQ0FBNkJJLFNBQUQsRUFBZSw2Q0FDekMsR0FBSU4sV0FBVyxDQUFDTyxTQUFaLENBQXNCRCxTQUFTLENBQUNFLFdBQWhDLENBQTZDRixTQUFTLENBQUNHLFNBQXZELENBQUosQ0FBdUUsZ0RBQ3JFO0FBQ0FMLFVBQVUsQ0FBRyxJQUFiLENBQ0QsQ0FIRCxJQUdPLGdEQUNMSixXQUFXLENBQUNVLEtBQVosQ0FBa0JKLFNBQVMsQ0FBQ0UsV0FBNUIsQ0FBeUNGLFNBQVMsQ0FBQ0csU0FBbkQsRUFDRCxDQUNGLENBUEQsRUFibUUsdUJBc0JuRSxNQUFPTCxDQUFBQSxVQUFQLENBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRGlzam9pbnRTZXQgZnJvbSAnLi4vLi4vLi4vZGF0YS1zdHJ1Y3R1cmVzL2Rpc2pvaW50LXNldC9EaXNqb2ludFNldCc7XG5cbi8qKlxuICogRGV0ZWN0IGN5Y2xlIGluIHVuZGlyZWN0ZWQgZ3JhcGggdXNpbmcgZGlzam9pbnQgc2V0cy5cbiAqXG4gKiBAcGFyYW0ge0dyYXBofSBncmFwaFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZXRlY3RVbmRpcmVjdGVkQ3ljbGVVc2luZ0Rpc2pvaW50U2V0KGdyYXBoKSB7XG4gIC8vIENyZWF0ZSBpbml0aWFsIHNpbmdsZXRvbiBkaXNqb2ludCBzZXRzIGZvciBlYWNoIGdyYXBoIHZlcnRleC5cbiAgLyoqIEBwYXJhbSB7R3JhcGhWZXJ0ZXh9IGdyYXBoVmVydGV4ICovXG4gIGNvbnN0IGtleUV4dHJhY3RvciA9IGdyYXBoVmVydGV4ID0+IGdyYXBoVmVydGV4LmdldEtleSgpO1xuICBjb25zdCBkaXNqb2ludFNldCA9IG5ldyBEaXNqb2ludFNldChrZXlFeHRyYWN0b3IpO1xuICBncmFwaC5nZXRBbGxWZXJ0aWNlcygpLmZvckVhY2goZ3JhcGhWZXJ0ZXggPT4gZGlzam9pbnRTZXQubWFrZVNldChncmFwaFZlcnRleCkpO1xuXG4gIC8vIEdvIHRyb3VnaCBhbGwgZ3JhcGggZWRnZXMgb25lIGJ5IG9uZSBhbmQgY2hlY2sgaWYgZWRnZSB2ZXJ0aWNlcyBhcmUgZnJvbSB0aGVcbiAgLy8gZGlmZmVyZW50IHNldHMuIEluIHRoaXMgY2FzZSBqb2ludCB0aG9zZSBzZXRzIHRvZ2V0aGVyLiBEbyB0aGlzIHVudGlsIHlvdSBmaW5kXG4gIC8vIGFuIGVkZ2Ugd2hlcmUgdG8gZWRnZSB2ZXJ0aWNlcyBhcmUgYWxyZWFkeSBpbiBvbmUgc2V0LiBUaGlzIG1lYW5zIHRoYXQgY3VycmVudFxuICAvLyBlZGdlIHdpbGwgY3JlYXRlIGEgY3ljbGUuXG4gIGxldCBjeWNsZUZvdW5kID0gZmFsc2U7XG4gIC8qKiBAcGFyYW0ge0dyYXBoRWRnZX0gZ3JhcGhFZGdlICovXG4gIGdyYXBoLmdldEFsbEVkZ2VzKCkuZm9yRWFjaCgoZ3JhcGhFZGdlKSA9PiB7XG4gICAgaWYgKGRpc2pvaW50U2V0LmluU2FtZVNldChncmFwaEVkZ2Uuc3RhcnRWZXJ0ZXgsIGdyYXBoRWRnZS5lbmRWZXJ0ZXgpKSB7XG4gICAgICAvLyBDeWNsZSBmb3VuZC5cbiAgICAgIGN5Y2xlRm91bmQgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBkaXNqb2ludFNldC51bmlvbihncmFwaEVkZ2Uuc3RhcnRWZXJ0ZXgsIGdyYXBoRWRnZS5lbmRWZXJ0ZXgpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGN5Y2xlRm91bmQ7XG59XG4iXX0=