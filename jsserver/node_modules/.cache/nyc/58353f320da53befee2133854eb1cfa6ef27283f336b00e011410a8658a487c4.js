var cov_fr0sv9h7v=function(){var path="/Users/hb/latlib/jsserver/javascript-algorithms/src/algorithms/cryptography/polynomial-hash/SimplePolynomialHash.js";var hash="0bb06e19c02e15b9f3b883d1e59fe883a40386c4";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/hb/latlib/jsserver/javascript-algorithms/src/algorithms/cryptography/polynomial-hash/SimplePolynomialHash.js",statementMap:{"0":{start:{line:1,column:21},end:{line:1,column:23}},"1":{start:{line:8,column:4},end:{line:8,column:21}},"2":{start:{line:25,column:15},end:{line:25,column:16}},"3":{start:{line:26,column:4},end:{line:28,column:5}},"4":{start:{line:26,column:25},end:{line:26,column:26}},"5":{start:{line:27,column:6},end:{line:27,column:68}},"6":{start:{line:30,column:4},end:{line:30,column:16}},"7":{start:{line:52,column:15},end:{line:52,column:23}},"8":{start:{line:54,column:22},end:{line:54,column:44}},"9":{start:{line:55,column:21},end:{line:55,column:59}},"10":{start:{line:57,column:4},end:{line:57,column:22}},"11":{start:{line:58,column:4},end:{line:58,column:22}},"12":{start:{line:59,column:4},end:{line:59,column:59}},"13":{start:{line:61,column:4},end:{line:61,column:16}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:7,column:2},end:{line:7,column:3}},loc:{start:{line:7,column:35},end:{line:9,column:3}},line:7},"1":{name:"(anonymous_1)",decl:{start:{line:24,column:2},end:{line:24,column:3}},loc:{start:{line:24,column:13},end:{line:31,column:3}},line:24},"2":{name:"(anonymous_2)",decl:{start:{line:51,column:2},end:{line:51,column:3}},loc:{start:{line:51,column:36},end:{line:62,column:3}},line:51}},branchMap:{"0":{loc:{start:{line:7,column:14},end:{line:7,column:33}},type:"default-arg",locations:[{start:{line:7,column:21},end:{line:7,column:33}}],line:7}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0},f:{"0":0,"1":0,"2":0},b:{"0":[0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"0bb06e19c02e15b9f3b883d1e59fe883a40386c4"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();const DEFAULT_BASE=(cov_fr0sv9h7v.s[0]++,17);export default class SimplePolynomialHash{/**
   * @param {number} [base] - Base number that is used to create the polynomial.
   */constructor(base=(cov_fr0sv9h7v.b[0][0]++,DEFAULT_BASE)){cov_fr0sv9h7v.f[0]++;cov_fr0sv9h7v.s[1]++;this.base=base;}/**
   * Function that creates hash representation of the word.
   *
   * Time complexity: O(word.length).
   *
   * @assumption: This version of the function  doesn't use modulo operator.
   * Thus it may produce number overflows by generating numbers that are
   * bigger than Number.MAX_SAFE_INTEGER. This function is mentioned here
   * for simplicity and LEARNING reasons.
   *
   * @param {string} word - String that needs to be hashed.
   * @return {number}
   */hash(word){cov_fr0sv9h7v.f[1]++;let hash=(cov_fr0sv9h7v.s[2]++,0);cov_fr0sv9h7v.s[3]++;for(let charIndex=(cov_fr0sv9h7v.s[4]++,0);charIndex<word.length;charIndex+=1){cov_fr0sv9h7v.s[5]++;hash+=word.charCodeAt(charIndex)*this.base**charIndex;}cov_fr0sv9h7v.s[6]++;return hash;}/**
   * Function that creates hash representation of the word
   * based on previous word (shifted by one character left) hash value.
   *
   * Recalculates the hash representation of a word so that it isn't
   * necessary to traverse the whole word again.
   *
   * Time complexity: O(1).
   *
   * @assumption: This function doesn't use modulo operator and thus is not safe since
   * it may deal with numbers that are bigger than Number.MAX_SAFE_INTEGER. This
   * function is mentioned here for simplicity and LEARNING reasons.
   *
   * @param {number} prevHash
   * @param {string} prevWord
   * @param {string} newWord
   * @return {number}
   */roll(prevHash,prevWord,newWord){cov_fr0sv9h7v.f[2]++;let hash=(cov_fr0sv9h7v.s[7]++,prevHash);const prevValue=(cov_fr0sv9h7v.s[8]++,prevWord.charCodeAt(0));const newValue=(cov_fr0sv9h7v.s[9]++,newWord.charCodeAt(newWord.length-1));cov_fr0sv9h7v.s[10]++;hash-=prevValue;cov_fr0sv9h7v.s[11]++;hash/=this.base;cov_fr0sv9h7v.s[12]++;hash+=newValue*this.base**(newWord.length-1);cov_fr0sv9h7v.s[13]++;return hash;}}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9oYi9sYXRsaWIvanNzZXJ2ZXIvamF2YXNjcmlwdC1hbGdvcml0aG1zL3NyYy9hbGdvcml0aG1zL2NyeXB0b2dyYXBoeS9wb2x5bm9taWFsLWhhc2gvU2ltcGxlUG9seW5vbWlhbEhhc2guanMiXSwibmFtZXMiOlsiREVGQVVMVF9CQVNFIiwiU2ltcGxlUG9seW5vbWlhbEhhc2giLCJjb25zdHJ1Y3RvciIsImJhc2UiLCJoYXNoIiwid29yZCIsImNoYXJJbmRleCIsImxlbmd0aCIsImNoYXJDb2RlQXQiLCJyb2xsIiwicHJldkhhc2giLCJwcmV2V29yZCIsIm5ld1dvcmQiLCJwcmV2VmFsdWUiLCJuZXdWYWx1ZSJdLCJtYXBwaW5ncyI6IjJvRUFBQSxLQUFNQSxDQUFBQSxZQUFZLHVCQUFHLEVBQUgsQ0FBbEIsQ0FFQSxjQUFlLE1BQU1DLENBQUFBLG9CQUFxQixDQUN4Qzs7S0FHQUMsV0FBVyxDQUFDQyxJQUFJLDBCQUFHSCxZQUFILENBQUwsQ0FBc0IsMkNBQy9CLEtBQUtHLElBQUwsQ0FBWUEsSUFBWixDQUNELENBRUQ7Ozs7Ozs7Ozs7OztLQWFBQyxJQUFJLENBQUNDLElBQUQsQ0FBTyxzQkFDVCxHQUFJRCxDQUFBQSxJQUFJLHVCQUFHLENBQUgsQ0FBUixDQURTLHFCQUVULElBQUssR0FBSUUsQ0FBQUEsU0FBUyx1QkFBRyxDQUFILENBQWxCLENBQXdCQSxTQUFTLENBQUdELElBQUksQ0FBQ0UsTUFBekMsQ0FBaURELFNBQVMsRUFBSSxDQUE5RCxDQUFpRSxzQkFDL0RGLElBQUksRUFBSUMsSUFBSSxDQUFDRyxVQUFMLENBQWdCRixTQUFoQixFQUE4QixLQUFLSCxJQUFMLEVBQWFHLFNBQW5ELENBQ0QsQ0FKUSxxQkFNVCxNQUFPRixDQUFBQSxJQUFQLENBQ0QsQ0FFRDs7Ozs7Ozs7Ozs7Ozs7Ozs7S0FrQkFLLElBQUksQ0FBQ0MsUUFBRCxDQUFXQyxRQUFYLENBQXFCQyxPQUFyQixDQUE4QixzQkFDaEMsR0FBSVIsQ0FBQUEsSUFBSSx1QkFBR00sUUFBSCxDQUFSLENBRUEsS0FBTUcsQ0FBQUEsU0FBUyx1QkFBR0YsUUFBUSxDQUFDSCxVQUFULENBQW9CLENBQXBCLENBQUgsQ0FBZixDQUNBLEtBQU1NLENBQUFBLFFBQVEsdUJBQUdGLE9BQU8sQ0FBQ0osVUFBUixDQUFtQkksT0FBTyxDQUFDTCxNQUFSLENBQWlCLENBQXBDLENBQUgsQ0FBZCxDQUpnQyxzQkFNaENILElBQUksRUFBSVMsU0FBUixDQU5nQyxzQkFPaENULElBQUksRUFBSSxLQUFLRCxJQUFiLENBUGdDLHNCQVFoQ0MsSUFBSSxFQUFJVSxRQUFRLENBQUksS0FBS1gsSUFBTCxHQUFjUyxPQUFPLENBQUNMLE1BQVIsQ0FBaUIsQ0FBL0IsQ0FBcEIsQ0FSZ0Msc0JBVWhDLE1BQU9ILENBQUFBLElBQVAsQ0FDRCxDQTNEdUMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBERUZBVUxUX0JBU0UgPSAxNztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2ltcGxlUG9seW5vbWlhbEhhc2gge1xuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtiYXNlXSAtIEJhc2UgbnVtYmVyIHRoYXQgaXMgdXNlZCB0byBjcmVhdGUgdGhlIHBvbHlub21pYWwuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihiYXNlID0gREVGQVVMVF9CQVNFKSB7XG4gICAgdGhpcy5iYXNlID0gYmFzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGdW5jdGlvbiB0aGF0IGNyZWF0ZXMgaGFzaCByZXByZXNlbnRhdGlvbiBvZiB0aGUgd29yZC5cbiAgICpcbiAgICogVGltZSBjb21wbGV4aXR5OiBPKHdvcmQubGVuZ3RoKS5cbiAgICpcbiAgICogQGFzc3VtcHRpb246IFRoaXMgdmVyc2lvbiBvZiB0aGUgZnVuY3Rpb24gIGRvZXNuJ3QgdXNlIG1vZHVsbyBvcGVyYXRvci5cbiAgICogVGh1cyBpdCBtYXkgcHJvZHVjZSBudW1iZXIgb3ZlcmZsb3dzIGJ5IGdlbmVyYXRpbmcgbnVtYmVycyB0aGF0IGFyZVxuICAgKiBiaWdnZXIgdGhhbiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUi4gVGhpcyBmdW5jdGlvbiBpcyBtZW50aW9uZWQgaGVyZVxuICAgKiBmb3Igc2ltcGxpY2l0eSBhbmQgTEVBUk5JTkcgcmVhc29ucy5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHdvcmQgLSBTdHJpbmcgdGhhdCBuZWVkcyB0byBiZSBoYXNoZWQuXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIGhhc2god29yZCkge1xuICAgIGxldCBoYXNoID0gMDtcbiAgICBmb3IgKGxldCBjaGFySW5kZXggPSAwOyBjaGFySW5kZXggPCB3b3JkLmxlbmd0aDsgY2hhckluZGV4ICs9IDEpIHtcbiAgICAgIGhhc2ggKz0gd29yZC5jaGFyQ29kZUF0KGNoYXJJbmRleCkgKiAodGhpcy5iYXNlICoqIGNoYXJJbmRleCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGhhc2g7XG4gIH1cblxuICAvKipcbiAgICogRnVuY3Rpb24gdGhhdCBjcmVhdGVzIGhhc2ggcmVwcmVzZW50YXRpb24gb2YgdGhlIHdvcmRcbiAgICogYmFzZWQgb24gcHJldmlvdXMgd29yZCAoc2hpZnRlZCBieSBvbmUgY2hhcmFjdGVyIGxlZnQpIGhhc2ggdmFsdWUuXG4gICAqXG4gICAqIFJlY2FsY3VsYXRlcyB0aGUgaGFzaCByZXByZXNlbnRhdGlvbiBvZiBhIHdvcmQgc28gdGhhdCBpdCBpc24ndFxuICAgKiBuZWNlc3NhcnkgdG8gdHJhdmVyc2UgdGhlIHdob2xlIHdvcmQgYWdhaW4uXG4gICAqXG4gICAqIFRpbWUgY29tcGxleGl0eTogTygxKS5cbiAgICpcbiAgICogQGFzc3VtcHRpb246IFRoaXMgZnVuY3Rpb24gZG9lc24ndCB1c2UgbW9kdWxvIG9wZXJhdG9yIGFuZCB0aHVzIGlzIG5vdCBzYWZlIHNpbmNlXG4gICAqIGl0IG1heSBkZWFsIHdpdGggbnVtYmVycyB0aGF0IGFyZSBiaWdnZXIgdGhhbiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUi4gVGhpc1xuICAgKiBmdW5jdGlvbiBpcyBtZW50aW9uZWQgaGVyZSBmb3Igc2ltcGxpY2l0eSBhbmQgTEVBUk5JTkcgcmVhc29ucy5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHByZXZIYXNoXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwcmV2V29yZFxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmV3V29yZFxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICByb2xsKHByZXZIYXNoLCBwcmV2V29yZCwgbmV3V29yZCkge1xuICAgIGxldCBoYXNoID0gcHJldkhhc2g7XG5cbiAgICBjb25zdCBwcmV2VmFsdWUgPSBwcmV2V29yZC5jaGFyQ29kZUF0KDApO1xuICAgIGNvbnN0IG5ld1ZhbHVlID0gbmV3V29yZC5jaGFyQ29kZUF0KG5ld1dvcmQubGVuZ3RoIC0gMSk7XG5cbiAgICBoYXNoIC09IHByZXZWYWx1ZTtcbiAgICBoYXNoIC89IHRoaXMuYmFzZTtcbiAgICBoYXNoICs9IG5ld1ZhbHVlICogKHRoaXMuYmFzZSAqKiAobmV3V29yZC5sZW5ndGggLSAxKSk7XG5cbiAgICByZXR1cm4gaGFzaDtcbiAgfVxufVxuIl19