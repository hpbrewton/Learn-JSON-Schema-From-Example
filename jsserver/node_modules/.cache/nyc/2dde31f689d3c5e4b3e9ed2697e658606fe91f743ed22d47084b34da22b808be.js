var cov_1d4poh1k2g=function(){var path="/Users/hb/latlib/jsserver/javascript-algorithms/src/utils/comparator/Comparator.js";var hash="53cb9754e2a67c3e4b92600d0b59e0a0f18c30bd";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/hb/latlib/jsserver/javascript-algorithms/src/utils/comparator/Comparator.js",statementMap:{"0":{start:{line:7,column:4},end:{line:7,column:72}},"1":{start:{line:17,column:4},end:{line:19,column:5}},"2":{start:{line:18,column:6},end:{line:18,column:15}},"3":{start:{line:21,column:4},end:{line:21,column:26}},"4":{start:{line:31,column:4},end:{line:31,column:36}},"5":{start:{line:41,column:4},end:{line:41,column:34}},"6":{start:{line:51,column:4},end:{line:51,column:34}},"7":{start:{line:61,column:4},end:{line:61,column:51}},"8":{start:{line:71,column:4},end:{line:71,column:54}},"9":{start:{line:78,column:28},end:{line:78,column:40}},"10":{start:{line:79,column:4},end:{line:79,column:51}},"11":{start:{line:79,column:29},end:{line:79,column:50}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:6,column:2},end:{line:6,column:3}},loc:{start:{line:6,column:31},end:{line:8,column:3}},line:6},"1":{name:"(anonymous_1)",decl:{start:{line:16,column:2},end:{line:16,column:3}},loc:{start:{line:16,column:38},end:{line:22,column:3}},line:16},"2":{name:"(anonymous_2)",decl:{start:{line:30,column:2},end:{line:30,column:3}},loc:{start:{line:30,column:14},end:{line:32,column:3}},line:30},"3":{name:"(anonymous_3)",decl:{start:{line:40,column:2},end:{line:40,column:3}},loc:{start:{line:40,column:17},end:{line:42,column:3}},line:40},"4":{name:"(anonymous_4)",decl:{start:{line:50,column:2},end:{line:50,column:3}},loc:{start:{line:50,column:20},end:{line:52,column:3}},line:50},"5":{name:"(anonymous_5)",decl:{start:{line:60,column:2},end:{line:60,column:3}},loc:{start:{line:60,column:24},end:{line:62,column:3}},line:60},"6":{name:"(anonymous_6)",decl:{start:{line:70,column:2},end:{line:70,column:3}},loc:{start:{line:70,column:27},end:{line:72,column:3}},line:70},"7":{name:"(anonymous_7)",decl:{start:{line:77,column:2},end:{line:77,column:3}},loc:{start:{line:77,column:12},end:{line:80,column:3}},line:77},"8":{name:"(anonymous_8)",decl:{start:{line:79,column:19},end:{line:79,column:20}},loc:{start:{line:79,column:29},end:{line:79,column:50}},line:79}},branchMap:{"0":{loc:{start:{line:7,column:19},end:{line:7,column:71}},type:"binary-expr",locations:[{start:{line:7,column:19},end:{line:7,column:34}},{start:{line:7,column:38},end:{line:7,column:71}}],line:7},"1":{loc:{start:{line:17,column:4},end:{line:19,column:5}},type:"if",locations:[{start:{line:17,column:4},end:{line:19,column:5}},{start:{line:17,column:4},end:{line:19,column:5}}],line:17},"2":{loc:{start:{line:21,column:11},end:{line:21,column:25}},type:"cond-expr",locations:[{start:{line:21,column:19},end:{line:21,column:21}},{start:{line:21,column:24},end:{line:21,column:25}}],line:21},"3":{loc:{start:{line:61,column:11},end:{line:61,column:50}},type:"binary-expr",locations:[{start:{line:61,column:11},end:{line:61,column:30}},{start:{line:61,column:34},end:{line:61,column:50}}],line:61},"4":{loc:{start:{line:71,column:11},end:{line:71,column:53}},type:"binary-expr",locations:[{start:{line:71,column:11},end:{line:71,column:33}},{start:{line:71,column:37},end:{line:71,column:53}}],line:71}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"53cb9754e2a67c3e4b92600d0b59e0a0f18c30bd"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();export default class Comparator{/**
   * @param {function(a: *, b: *)} [compareFunction] - It may be custom compare function that, let's
   * say may compare custom objects together.
   */constructor(compareFunction){cov_1d4poh1k2g.f[0]++;cov_1d4poh1k2g.s[0]++;this.compare=(cov_1d4poh1k2g.b[0][0]++,compareFunction)||(cov_1d4poh1k2g.b[0][1]++,Comparator.defaultCompareFunction);}/**
   * Default comparison function. It just assumes that "a" and "b" are strings or numbers.
   * @param {(string|number)} a
   * @param {(string|number)} b
   * @returns {number}
   */static defaultCompareFunction(a,b){cov_1d4poh1k2g.f[1]++;cov_1d4poh1k2g.s[1]++;if(a===b){cov_1d4poh1k2g.b[1][0]++;cov_1d4poh1k2g.s[2]++;return 0;}else{cov_1d4poh1k2g.b[1][1]++;}cov_1d4poh1k2g.s[3]++;return a<b?(cov_1d4poh1k2g.b[2][0]++,-1):(cov_1d4poh1k2g.b[2][1]++,1);}/**
   * Checks if two variables are equal.
   * @param {*} a
   * @param {*} b
   * @return {boolean}
   */equal(a,b){cov_1d4poh1k2g.f[2]++;cov_1d4poh1k2g.s[4]++;return this.compare(a,b)===0;}/**
   * Checks if variable "a" is less than "b".
   * @param {*} a
   * @param {*} b
   * @return {boolean}
   */lessThan(a,b){cov_1d4poh1k2g.f[3]++;cov_1d4poh1k2g.s[5]++;return this.compare(a,b)<0;}/**
   * Checks if variable "a" is greater than "b".
   * @param {*} a
   * @param {*} b
   * @return {boolean}
   */greaterThan(a,b){cov_1d4poh1k2g.f[4]++;cov_1d4poh1k2g.s[6]++;return this.compare(a,b)>0;}/**
   * Checks if variable "a" is less than or equal to "b".
   * @param {*} a
   * @param {*} b
   * @return {boolean}
   */lessThanOrEqual(a,b){cov_1d4poh1k2g.f[5]++;cov_1d4poh1k2g.s[7]++;return(cov_1d4poh1k2g.b[3][0]++,this.lessThan(a,b))||(cov_1d4poh1k2g.b[3][1]++,this.equal(a,b));}/**
   * Checks if variable "a" is greater than or equal to "b".
   * @param {*} a
   * @param {*} b
   * @return {boolean}
   */greaterThanOrEqual(a,b){cov_1d4poh1k2g.f[6]++;cov_1d4poh1k2g.s[8]++;return(cov_1d4poh1k2g.b[4][0]++,this.greaterThan(a,b))||(cov_1d4poh1k2g.b[4][1]++,this.equal(a,b));}/**
   * Reverses the comparison order.
   */reverse(){cov_1d4poh1k2g.f[7]++;const compareOriginal=(cov_1d4poh1k2g.s[9]++,this.compare);cov_1d4poh1k2g.s[10]++;this.compare=(a,b)=>{cov_1d4poh1k2g.f[8]++;cov_1d4poh1k2g.s[11]++;return compareOriginal(b,a);};}}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9oYi9sYXRsaWIvanNzZXJ2ZXIvamF2YXNjcmlwdC1hbGdvcml0aG1zL3NyYy91dGlscy9jb21wYXJhdG9yL0NvbXBhcmF0b3IuanMiXSwibmFtZXMiOlsiQ29tcGFyYXRvciIsImNvbnN0cnVjdG9yIiwiY29tcGFyZUZ1bmN0aW9uIiwiY29tcGFyZSIsImRlZmF1bHRDb21wYXJlRnVuY3Rpb24iLCJhIiwiYiIsImVxdWFsIiwibGVzc1RoYW4iLCJncmVhdGVyVGhhbiIsImxlc3NUaGFuT3JFcXVhbCIsImdyZWF0ZXJUaGFuT3JFcXVhbCIsInJldmVyc2UiLCJjb21wYXJlT3JpZ2luYWwiXSwibWFwcGluZ3MiOiJzdEhBQUEsY0FBZSxNQUFNQSxDQUFBQSxVQUFXLENBQzlCOzs7S0FJQUMsV0FBVyxDQUFDQyxlQUFELENBQWtCLDZDQUMzQixLQUFLQyxPQUFMLENBQWUsMEJBQUFELGVBQWUsNkJBQUlGLFVBQVUsQ0FBQ0ksc0JBQWYsQ0FBOUIsQ0FDRCxDQUVEOzs7OztLQU1BLE1BQU9BLENBQUFBLHNCQUFQLENBQThCQyxDQUE5QixDQUFpQ0MsQ0FBakMsQ0FBb0MsNkNBQ2xDLEdBQUlELENBQUMsR0FBS0MsQ0FBVixDQUFhLGdEQUNYLE1BQU8sRUFBUCxDQUNELENBRkQsK0JBRGtDLHNCQUtsQyxNQUFPRCxDQUFBQSxDQUFDLENBQUdDLENBQUosMkJBQVEsQ0FBQyxDQUFULDRCQUFhLENBQWIsQ0FBUCxDQUNELENBRUQ7Ozs7O0tBTUFDLEtBQUssQ0FBQ0YsQ0FBRCxDQUFJQyxDQUFKLENBQU8sNkNBQ1YsTUFBTyxNQUFLSCxPQUFMLENBQWFFLENBQWIsQ0FBZ0JDLENBQWhCLElBQXVCLENBQTlCLENBQ0QsQ0FFRDs7Ozs7S0FNQUUsUUFBUSxDQUFDSCxDQUFELENBQUlDLENBQUosQ0FBTyw2Q0FDYixNQUFPLE1BQUtILE9BQUwsQ0FBYUUsQ0FBYixDQUFnQkMsQ0FBaEIsRUFBcUIsQ0FBNUIsQ0FDRCxDQUVEOzs7OztLQU1BRyxXQUFXLENBQUNKLENBQUQsQ0FBSUMsQ0FBSixDQUFPLDZDQUNoQixNQUFPLE1BQUtILE9BQUwsQ0FBYUUsQ0FBYixDQUFnQkMsQ0FBaEIsRUFBcUIsQ0FBNUIsQ0FDRCxDQUVEOzs7OztLQU1BSSxlQUFlLENBQUNMLENBQUQsQ0FBSUMsQ0FBSixDQUFPLDZDQUNwQixNQUFPLCtCQUFLRSxRQUFMLENBQWNILENBQWQsQ0FBaUJDLENBQWpCLDhCQUF1QixLQUFLQyxLQUFMLENBQVdGLENBQVgsQ0FBY0MsQ0FBZCxDQUF2QixDQUFQLENBQ0QsQ0FFRDs7Ozs7S0FNQUssa0JBQWtCLENBQUNOLENBQUQsQ0FBSUMsQ0FBSixDQUFPLDZDQUN2QixNQUFPLCtCQUFLRyxXQUFMLENBQWlCSixDQUFqQixDQUFvQkMsQ0FBcEIsOEJBQTBCLEtBQUtDLEtBQUwsQ0FBV0YsQ0FBWCxDQUFjQyxDQUFkLENBQTFCLENBQVAsQ0FDRCxDQUVEOztLQUdBTSxPQUFPLEVBQUcsdUJBQ1IsS0FBTUMsQ0FBQUEsZUFBZSx3QkFBRyxLQUFLVixPQUFSLENBQXJCLENBRFEsdUJBRVIsS0FBS0EsT0FBTCxDQUFlLENBQUNFLENBQUQsQ0FBSUMsQ0FBSixHQUFVLG9EQUFBTyxDQUFBQSxlQUFlLENBQUNQLENBQUQsQ0FBSUQsQ0FBSixDQUFmLENBQXFCLENBQTlDLENBQ0QsQ0EvRTZCIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29tcGFyYXRvciB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKGE6ICosIGI6ICopfSBbY29tcGFyZUZ1bmN0aW9uXSAtIEl0IG1heSBiZSBjdXN0b20gY29tcGFyZSBmdW5jdGlvbiB0aGF0LCBsZXQnc1xuICAgKiBzYXkgbWF5IGNvbXBhcmUgY3VzdG9tIG9iamVjdHMgdG9nZXRoZXIuXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihjb21wYXJlRnVuY3Rpb24pIHtcbiAgICB0aGlzLmNvbXBhcmUgPSBjb21wYXJlRnVuY3Rpb24gfHwgQ29tcGFyYXRvci5kZWZhdWx0Q29tcGFyZUZ1bmN0aW9uO1xuICB9XG5cbiAgLyoqXG4gICAqIERlZmF1bHQgY29tcGFyaXNvbiBmdW5jdGlvbi4gSXQganVzdCBhc3N1bWVzIHRoYXQgXCJhXCIgYW5kIFwiYlwiIGFyZSBzdHJpbmdzIG9yIG51bWJlcnMuXG4gICAqIEBwYXJhbSB7KHN0cmluZ3xudW1iZXIpfSBhXG4gICAqIEBwYXJhbSB7KHN0cmluZ3xudW1iZXIpfSBiXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAqL1xuICBzdGF0aWMgZGVmYXVsdENvbXBhcmVGdW5jdGlvbihhLCBiKSB7XG4gICAgaWYgKGEgPT09IGIpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIHJldHVybiBhIDwgYiA/IC0xIDogMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgdHdvIHZhcmlhYmxlcyBhcmUgZXF1YWwuXG4gICAqIEBwYXJhbSB7Kn0gYVxuICAgKiBAcGFyYW0geyp9IGJcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIGVxdWFsKGEsIGIpIHtcbiAgICByZXR1cm4gdGhpcy5jb21wYXJlKGEsIGIpID09PSAwO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiB2YXJpYWJsZSBcImFcIiBpcyBsZXNzIHRoYW4gXCJiXCIuXG4gICAqIEBwYXJhbSB7Kn0gYVxuICAgKiBAcGFyYW0geyp9IGJcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIGxlc3NUaGFuKGEsIGIpIHtcbiAgICByZXR1cm4gdGhpcy5jb21wYXJlKGEsIGIpIDwgMDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgdmFyaWFibGUgXCJhXCIgaXMgZ3JlYXRlciB0aGFuIFwiYlwiLlxuICAgKiBAcGFyYW0geyp9IGFcbiAgICogQHBhcmFtIHsqfSBiXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBncmVhdGVyVGhhbihhLCBiKSB7XG4gICAgcmV0dXJuIHRoaXMuY29tcGFyZShhLCBiKSA+IDA7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHZhcmlhYmxlIFwiYVwiIGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0byBcImJcIi5cbiAgICogQHBhcmFtIHsqfSBhXG4gICAqIEBwYXJhbSB7Kn0gYlxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgbGVzc1RoYW5PckVxdWFsKGEsIGIpIHtcbiAgICByZXR1cm4gdGhpcy5sZXNzVGhhbihhLCBiKSB8fCB0aGlzLmVxdWFsKGEsIGIpO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiB2YXJpYWJsZSBcImFcIiBpcyBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gXCJiXCIuXG4gICAqIEBwYXJhbSB7Kn0gYVxuICAgKiBAcGFyYW0geyp9IGJcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIGdyZWF0ZXJUaGFuT3JFcXVhbChhLCBiKSB7XG4gICAgcmV0dXJuIHRoaXMuZ3JlYXRlclRoYW4oYSwgYikgfHwgdGhpcy5lcXVhbChhLCBiKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXZlcnNlcyB0aGUgY29tcGFyaXNvbiBvcmRlci5cbiAgICovXG4gIHJldmVyc2UoKSB7XG4gICAgY29uc3QgY29tcGFyZU9yaWdpbmFsID0gdGhpcy5jb21wYXJlO1xuICAgIHRoaXMuY29tcGFyZSA9IChhLCBiKSA9PiBjb21wYXJlT3JpZ2luYWwoYiwgYSk7XG4gIH1cbn1cbiJdfQ==