var cov_ggzv0gzb5=function(){var path="/Users/hb/latlib/jsserver/javascript-algorithms/src/algorithms/graph/prim/prim.js";var hash="404c1eb0bbaab3a8118b358c986b2dce57eabc36";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/hb/latlib/jsserver/javascript-algorithms/src/algorithms/graph/prim/prim.js",statementMap:{"0":{start:{line:11,column:2},end:{line:13,column:3}},"1":{start:{line:12,column:4},end:{line:12,column:75}},"2":{start:{line:16,column:30},end:{line:16,column:41}},"3":{start:{line:21,column:21},end:{line:21,column:40}},"4":{start:{line:24,column:26},end:{line:24,column:28}},"5":{start:{line:27,column:22},end:{line:27,column:47}},"6":{start:{line:30,column:2},end:{line:30,column:54}},"7":{start:{line:33,column:2},end:{line:35,column:5}},"8":{start:{line:34,column:4},end:{line:34,column:48}},"9":{start:{line:38,column:2},end:{line:70,column:3}},"10":{start:{line:41,column:27},end:{line:41,column:44}},"11":{start:{line:44,column:24},end:{line:44,column:28}},"12":{start:{line:45,column:4},end:{line:49,column:5}},"13":{start:{line:46,column:6},end:{line:46,column:49}},"14":{start:{line:47,column:11},end:{line:49,column:5}},"15":{start:{line:48,column:6},end:{line:48,column:47}},"16":{start:{line:52,column:4},end:{line:69,column:5}},"17":{start:{line:54,column:6},end:{line:54,column:50}},"18":{start:{line:57,column:6},end:{line:57,column:62}},"19":{start:{line:60,column:6},end:{line:68,column:9}},"20":{start:{line:62,column:8},end:{line:67,column:9}},"21":{start:{line:66,column:10},end:{line:66,column:54}},"22":{start:{line:72,column:2},end:{line:72,column:29}}},fnMap:{"0":{name:"prim",decl:{start:{line:8,column:24},end:{line:8,column:28}},loc:{start:{line:8,column:36},end:{line:73,column:1}},line:8},"1":{name:"(anonymous_1)",decl:{start:{line:33,column:33},end:{line:33,column:34}},loc:{start:{line:33,column:48},end:{line:35,column:3}},line:33},"2":{name:"(anonymous_2)",decl:{start:{line:60,column:39},end:{line:60,column:40}},loc:{start:{line:60,column:54},end:{line:68,column:7}},line:60}},branchMap:{"0":{loc:{start:{line:11,column:2},end:{line:13,column:3}},type:"if",locations:[{start:{line:11,column:2},end:{line:13,column:3}},{start:{line:11,column:2},end:{line:13,column:3}}],line:11},"1":{loc:{start:{line:45,column:4},end:{line:49,column:5}},type:"if",locations:[{start:{line:45,column:4},end:{line:49,column:5}},{start:{line:45,column:4},end:{line:49,column:5}}],line:45},"2":{loc:{start:{line:47,column:11},end:{line:49,column:5}},type:"if",locations:[{start:{line:47,column:11},end:{line:49,column:5}},{start:{line:47,column:11},end:{line:49,column:5}}],line:47},"3":{loc:{start:{line:52,column:4},end:{line:69,column:5}},type:"if",locations:[{start:{line:52,column:4},end:{line:69,column:5}},{start:{line:52,column:4},end:{line:69,column:5}}],line:52},"4":{loc:{start:{line:62,column:8},end:{line:67,column:9}},type:"if",locations:[{start:{line:62,column:8},end:{line:67,column:9}},{start:{line:62,column:8},end:{line:67,column:9}}],line:62},"5":{loc:{start:{line:63,column:10},end:{line:64,column:59}},type:"binary-expr",locations:[{start:{line:63,column:10},end:{line:63,column:58}},{start:{line:64,column:13},end:{line:64,column:59}}],line:63}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0},f:{"0":0,"1":0,"2":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"404c1eb0bbaab3a8118b358c986b2dce57eabc36"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();import Graph from'../../../data-structures/graph/Graph';import PriorityQueue from'../../../data-structures/priority-queue/PriorityQueue';/**
 * @param {Graph} graph
 * @return {Graph}
 */export default function prim(graph){cov_ggzv0gzb5.f[0]++;cov_ggzv0gzb5.s[0]++;// It should fire error if graph is directed since the algorithm works only
// for undirected graphs.
if(graph.isDirected){cov_ggzv0gzb5.b[0][0]++;cov_ggzv0gzb5.s[1]++;throw new Error('Prim\'s algorithms works only for undirected graphs');}else{cov_ggzv0gzb5.b[0][1]++;}// Init new graph that will contain minimum spanning tree of original graph.
const minimumSpanningTree=(cov_ggzv0gzb5.s[2]++,new Graph());// This priority queue will contain all the edges that are starting from
// visited nodes and they will be ranked by edge weight - so that on each step
// we would always pick the edge with minimal edge weight.
const edgesQueue=(cov_ggzv0gzb5.s[3]++,new PriorityQueue());// Set of vertices that has been already visited.
const visitedVertices=(cov_ggzv0gzb5.s[4]++,{});// Vertex from which we will start graph traversal.
const startVertex=(cov_ggzv0gzb5.s[5]++,graph.getAllVertices()[0]);// Add start vertex to the set of visited ones.
cov_ggzv0gzb5.s[6]++;visitedVertices[startVertex.getKey()]=startVertex;// Add all edges of start vertex to the queue.
cov_ggzv0gzb5.s[7]++;startVertex.getEdges().forEach(graphEdge=>{cov_ggzv0gzb5.f[1]++;cov_ggzv0gzb5.s[8]++;edgesQueue.add(graphEdge,graphEdge.weight);});// Now let's explore all queued edges.
cov_ggzv0gzb5.s[9]++;while(!edgesQueue.isEmpty()){// Fetch next queued edge with minimal weight.
/** @var {GraphEdge} currentEdge */const currentMinEdge=(cov_ggzv0gzb5.s[10]++,edgesQueue.poll());// Find out the next unvisited minimal vertex to traverse.
let nextMinVertex=(cov_ggzv0gzb5.s[11]++,null);cov_ggzv0gzb5.s[12]++;if(!visitedVertices[currentMinEdge.startVertex.getKey()]){cov_ggzv0gzb5.b[1][0]++;cov_ggzv0gzb5.s[13]++;nextMinVertex=currentMinEdge.startVertex;}else{cov_ggzv0gzb5.b[1][1]++;cov_ggzv0gzb5.s[14]++;if(!visitedVertices[currentMinEdge.endVertex.getKey()]){cov_ggzv0gzb5.b[2][0]++;cov_ggzv0gzb5.s[15]++;nextMinVertex=currentMinEdge.endVertex;}else{cov_ggzv0gzb5.b[2][1]++;}}// If all vertices of current edge has been already visited then skip this round.
cov_ggzv0gzb5.s[16]++;if(nextMinVertex){cov_ggzv0gzb5.b[3][0]++;cov_ggzv0gzb5.s[17]++;// Add current min edge to MST.
minimumSpanningTree.addEdge(currentMinEdge);// Add vertex to the set of visited ones.
cov_ggzv0gzb5.s[18]++;visitedVertices[nextMinVertex.getKey()]=nextMinVertex;// Add all current vertex's edges to the queue.
cov_ggzv0gzb5.s[19]++;nextMinVertex.getEdges().forEach(graphEdge=>{cov_ggzv0gzb5.f[2]++;cov_ggzv0gzb5.s[20]++;// Add only vertices that link to unvisited nodes.
if((cov_ggzv0gzb5.b[5][0]++,!visitedVertices[graphEdge.startVertex.getKey()])||(cov_ggzv0gzb5.b[5][1]++,!visitedVertices[graphEdge.endVertex.getKey()])){cov_ggzv0gzb5.b[4][0]++;cov_ggzv0gzb5.s[21]++;edgesQueue.add(graphEdge,graphEdge.weight);}else{cov_ggzv0gzb5.b[4][1]++;}});}else{cov_ggzv0gzb5.b[3][1]++;}}cov_ggzv0gzb5.s[22]++;return minimumSpanningTree;}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9oYi9sYXRsaWIvanNzZXJ2ZXIvamF2YXNjcmlwdC1hbGdvcml0aG1zL3NyYy9hbGdvcml0aG1zL2dyYXBoL3ByaW0vcHJpbS5qcyJdLCJuYW1lcyI6WyJHcmFwaCIsIlByaW9yaXR5UXVldWUiLCJwcmltIiwiZ3JhcGgiLCJpc0RpcmVjdGVkIiwiRXJyb3IiLCJtaW5pbXVtU3Bhbm5pbmdUcmVlIiwiZWRnZXNRdWV1ZSIsInZpc2l0ZWRWZXJ0aWNlcyIsInN0YXJ0VmVydGV4IiwiZ2V0QWxsVmVydGljZXMiLCJnZXRLZXkiLCJnZXRFZGdlcyIsImZvckVhY2giLCJncmFwaEVkZ2UiLCJhZGQiLCJ3ZWlnaHQiLCJpc0VtcHR5IiwiY3VycmVudE1pbkVkZ2UiLCJwb2xsIiwibmV4dE1pblZlcnRleCIsImVuZFZlcnRleCIsImFkZEVkZ2UiXSwibWFwcGluZ3MiOiJpcUhBQUEsTUFBT0EsQ0FBQUEsS0FBUCxLQUFrQixzQ0FBbEIsQ0FDQSxNQUFPQyxDQUFBQSxhQUFQLEtBQTBCLHVEQUExQixDQUVBOzs7R0FJQSxjQUFlLFNBQVNDLENBQUFBLElBQVQsQ0FBY0MsS0FBZCxDQUFxQiwyQ0FDbEM7QUFDQTtBQUNBLEdBQUlBLEtBQUssQ0FBQ0MsVUFBVixDQUFzQiw4Q0FDcEIsS0FBTSxJQUFJQyxDQUFBQSxLQUFKLENBQVUscURBQVYsQ0FBTixDQUNELENBRkQsOEJBSUE7QUFDQSxLQUFNQyxDQUFBQSxtQkFBbUIsdUJBQUcsR0FBSU4sQ0FBQUEsS0FBSixFQUFILENBQXpCLENBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBTU8sQ0FBQUEsVUFBVSx1QkFBRyxHQUFJTixDQUFBQSxhQUFKLEVBQUgsQ0FBaEIsQ0FFQTtBQUNBLEtBQU1PLENBQUFBLGVBQWUsdUJBQUcsRUFBSCxDQUFyQixDQUVBO0FBQ0EsS0FBTUMsQ0FBQUEsV0FBVyx1QkFBR04sS0FBSyxDQUFDTyxjQUFOLEdBQXVCLENBQXZCLENBQUgsQ0FBakIsQ0FFQTtBQXJCa0MscUJBc0JsQ0YsZUFBZSxDQUFDQyxXQUFXLENBQUNFLE1BQVosRUFBRCxDQUFmLENBQXdDRixXQUF4QyxDQUVBO0FBeEJrQyxxQkF5QmxDQSxXQUFXLENBQUNHLFFBQVosR0FBdUJDLE9BQXZCLENBQWdDQyxTQUFELEVBQWUsMkNBQzVDUCxVQUFVLENBQUNRLEdBQVgsQ0FBZUQsU0FBZixDQUEwQkEsU0FBUyxDQUFDRSxNQUFwQyxFQUNELENBRkQsRUFJQTtBQTdCa0MscUJBOEJsQyxNQUFPLENBQUNULFVBQVUsQ0FBQ1UsT0FBWCxFQUFSLENBQThCLENBQzVCO0FBQ0EsbUNBQ0EsS0FBTUMsQ0FBQUEsY0FBYyx3QkFBR1gsVUFBVSxDQUFDWSxJQUFYLEVBQUgsQ0FBcEIsQ0FFQTtBQUNBLEdBQUlDLENBQUFBLGFBQWEsd0JBQUcsSUFBSCxDQUFqQixDQU40QixzQkFPNUIsR0FBSSxDQUFDWixlQUFlLENBQUNVLGNBQWMsQ0FBQ1QsV0FBZixDQUEyQkUsTUFBM0IsRUFBRCxDQUFwQixDQUEyRCwrQ0FDekRTLGFBQWEsQ0FBR0YsY0FBYyxDQUFDVCxXQUEvQixDQUNELENBRkQsSUFFTyxrREFBSSxDQUFDRCxlQUFlLENBQUNVLGNBQWMsQ0FBQ0csU0FBZixDQUF5QlYsTUFBekIsRUFBRCxDQUFwQixDQUF5RCwrQ0FDOURTLGFBQWEsQ0FBR0YsY0FBYyxDQUFDRyxTQUEvQixDQUNELENBRk0sOEJBRU4sQ0FFRDtBQWI0QixzQkFjNUIsR0FBSUQsYUFBSixDQUFtQiwrQ0FDakI7QUFDQWQsbUJBQW1CLENBQUNnQixPQUFwQixDQUE0QkosY0FBNUIsRUFFQTtBQUppQixzQkFLakJWLGVBQWUsQ0FBQ1ksYUFBYSxDQUFDVCxNQUFkLEVBQUQsQ0FBZixDQUEwQ1MsYUFBMUMsQ0FFQTtBQVBpQixzQkFRakJBLGFBQWEsQ0FBQ1IsUUFBZCxHQUF5QkMsT0FBekIsQ0FBa0NDLFNBQUQsRUFBZSw0Q0FDOUM7QUFDQSxHQUNFLDBCQUFDTixlQUFlLENBQUNNLFNBQVMsQ0FBQ0wsV0FBVixDQUFzQkUsTUFBdEIsRUFBRCxDQUFoQiw0QkFDRyxDQUFDSCxlQUFlLENBQUNNLFNBQVMsQ0FBQ08sU0FBVixDQUFvQlYsTUFBcEIsRUFBRCxDQURuQixDQURGLENBR0UsK0NBQ0FKLFVBQVUsQ0FBQ1EsR0FBWCxDQUFlRCxTQUFmLENBQTBCQSxTQUFTLENBQUNFLE1BQXBDLEVBQ0QsQ0FMRCw4QkFNRCxDQVJELEVBU0QsQ0FqQkQsOEJBa0JELENBOURpQyxzQkFnRWxDLE1BQU9WLENBQUFBLG1CQUFQLENBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgR3JhcGggZnJvbSAnLi4vLi4vLi4vZGF0YS1zdHJ1Y3R1cmVzL2dyYXBoL0dyYXBoJztcbmltcG9ydCBQcmlvcml0eVF1ZXVlIGZyb20gJy4uLy4uLy4uL2RhdGEtc3RydWN0dXJlcy9wcmlvcml0eS1xdWV1ZS9Qcmlvcml0eVF1ZXVlJztcblxuLyoqXG4gKiBAcGFyYW0ge0dyYXBofSBncmFwaFxuICogQHJldHVybiB7R3JhcGh9XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHByaW0oZ3JhcGgpIHtcbiAgLy8gSXQgc2hvdWxkIGZpcmUgZXJyb3IgaWYgZ3JhcGggaXMgZGlyZWN0ZWQgc2luY2UgdGhlIGFsZ29yaXRobSB3b3JrcyBvbmx5XG4gIC8vIGZvciB1bmRpcmVjdGVkIGdyYXBocy5cbiAgaWYgKGdyYXBoLmlzRGlyZWN0ZWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1ByaW1cXCdzIGFsZ29yaXRobXMgd29ya3Mgb25seSBmb3IgdW5kaXJlY3RlZCBncmFwaHMnKTtcbiAgfVxuXG4gIC8vIEluaXQgbmV3IGdyYXBoIHRoYXQgd2lsbCBjb250YWluIG1pbmltdW0gc3Bhbm5pbmcgdHJlZSBvZiBvcmlnaW5hbCBncmFwaC5cbiAgY29uc3QgbWluaW11bVNwYW5uaW5nVHJlZSA9IG5ldyBHcmFwaCgpO1xuXG4gIC8vIFRoaXMgcHJpb3JpdHkgcXVldWUgd2lsbCBjb250YWluIGFsbCB0aGUgZWRnZXMgdGhhdCBhcmUgc3RhcnRpbmcgZnJvbVxuICAvLyB2aXNpdGVkIG5vZGVzIGFuZCB0aGV5IHdpbGwgYmUgcmFua2VkIGJ5IGVkZ2Ugd2VpZ2h0IC0gc28gdGhhdCBvbiBlYWNoIHN0ZXBcbiAgLy8gd2Ugd291bGQgYWx3YXlzIHBpY2sgdGhlIGVkZ2Ugd2l0aCBtaW5pbWFsIGVkZ2Ugd2VpZ2h0LlxuICBjb25zdCBlZGdlc1F1ZXVlID0gbmV3IFByaW9yaXR5UXVldWUoKTtcblxuICAvLyBTZXQgb2YgdmVydGljZXMgdGhhdCBoYXMgYmVlbiBhbHJlYWR5IHZpc2l0ZWQuXG4gIGNvbnN0IHZpc2l0ZWRWZXJ0aWNlcyA9IHt9O1xuXG4gIC8vIFZlcnRleCBmcm9tIHdoaWNoIHdlIHdpbGwgc3RhcnQgZ3JhcGggdHJhdmVyc2FsLlxuICBjb25zdCBzdGFydFZlcnRleCA9IGdyYXBoLmdldEFsbFZlcnRpY2VzKClbMF07XG5cbiAgLy8gQWRkIHN0YXJ0IHZlcnRleCB0byB0aGUgc2V0IG9mIHZpc2l0ZWQgb25lcy5cbiAgdmlzaXRlZFZlcnRpY2VzW3N0YXJ0VmVydGV4LmdldEtleSgpXSA9IHN0YXJ0VmVydGV4O1xuXG4gIC8vIEFkZCBhbGwgZWRnZXMgb2Ygc3RhcnQgdmVydGV4IHRvIHRoZSBxdWV1ZS5cbiAgc3RhcnRWZXJ0ZXguZ2V0RWRnZXMoKS5mb3JFYWNoKChncmFwaEVkZ2UpID0+IHtcbiAgICBlZGdlc1F1ZXVlLmFkZChncmFwaEVkZ2UsIGdyYXBoRWRnZS53ZWlnaHQpO1xuICB9KTtcblxuICAvLyBOb3cgbGV0J3MgZXhwbG9yZSBhbGwgcXVldWVkIGVkZ2VzLlxuICB3aGlsZSAoIWVkZ2VzUXVldWUuaXNFbXB0eSgpKSB7XG4gICAgLy8gRmV0Y2ggbmV4dCBxdWV1ZWQgZWRnZSB3aXRoIG1pbmltYWwgd2VpZ2h0LlxuICAgIC8qKiBAdmFyIHtHcmFwaEVkZ2V9IGN1cnJlbnRFZGdlICovXG4gICAgY29uc3QgY3VycmVudE1pbkVkZ2UgPSBlZGdlc1F1ZXVlLnBvbGwoKTtcblxuICAgIC8vIEZpbmQgb3V0IHRoZSBuZXh0IHVudmlzaXRlZCBtaW5pbWFsIHZlcnRleCB0byB0cmF2ZXJzZS5cbiAgICBsZXQgbmV4dE1pblZlcnRleCA9IG51bGw7XG4gICAgaWYgKCF2aXNpdGVkVmVydGljZXNbY3VycmVudE1pbkVkZ2Uuc3RhcnRWZXJ0ZXguZ2V0S2V5KCldKSB7XG4gICAgICBuZXh0TWluVmVydGV4ID0gY3VycmVudE1pbkVkZ2Uuc3RhcnRWZXJ0ZXg7XG4gICAgfSBlbHNlIGlmICghdmlzaXRlZFZlcnRpY2VzW2N1cnJlbnRNaW5FZGdlLmVuZFZlcnRleC5nZXRLZXkoKV0pIHtcbiAgICAgIG5leHRNaW5WZXJ0ZXggPSBjdXJyZW50TWluRWRnZS5lbmRWZXJ0ZXg7XG4gICAgfVxuXG4gICAgLy8gSWYgYWxsIHZlcnRpY2VzIG9mIGN1cnJlbnQgZWRnZSBoYXMgYmVlbiBhbHJlYWR5IHZpc2l0ZWQgdGhlbiBza2lwIHRoaXMgcm91bmQuXG4gICAgaWYgKG5leHRNaW5WZXJ0ZXgpIHtcbiAgICAgIC8vIEFkZCBjdXJyZW50IG1pbiBlZGdlIHRvIE1TVC5cbiAgICAgIG1pbmltdW1TcGFubmluZ1RyZWUuYWRkRWRnZShjdXJyZW50TWluRWRnZSk7XG5cbiAgICAgIC8vIEFkZCB2ZXJ0ZXggdG8gdGhlIHNldCBvZiB2aXNpdGVkIG9uZXMuXG4gICAgICB2aXNpdGVkVmVydGljZXNbbmV4dE1pblZlcnRleC5nZXRLZXkoKV0gPSBuZXh0TWluVmVydGV4O1xuXG4gICAgICAvLyBBZGQgYWxsIGN1cnJlbnQgdmVydGV4J3MgZWRnZXMgdG8gdGhlIHF1ZXVlLlxuICAgICAgbmV4dE1pblZlcnRleC5nZXRFZGdlcygpLmZvckVhY2goKGdyYXBoRWRnZSkgPT4ge1xuICAgICAgICAvLyBBZGQgb25seSB2ZXJ0aWNlcyB0aGF0IGxpbmsgdG8gdW52aXNpdGVkIG5vZGVzLlxuICAgICAgICBpZiAoXG4gICAgICAgICAgIXZpc2l0ZWRWZXJ0aWNlc1tncmFwaEVkZ2Uuc3RhcnRWZXJ0ZXguZ2V0S2V5KCldXG4gICAgICAgICAgfHwgIXZpc2l0ZWRWZXJ0aWNlc1tncmFwaEVkZ2UuZW5kVmVydGV4LmdldEtleSgpXVxuICAgICAgICApIHtcbiAgICAgICAgICBlZGdlc1F1ZXVlLmFkZChncmFwaEVkZ2UsIGdyYXBoRWRnZS53ZWlnaHQpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbWluaW11bVNwYW5uaW5nVHJlZTtcbn1cbiJdfQ==