var cov_1hdg0ojmh2=function(){var path="/Users/hb/latlib/jsserver/javascript-algorithms/src/algorithms/graph/articulation-points/articulationPoints.js";var hash="2aecbd7162f48d5ebaf95d951100c4622df24202";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/hb/latlib/jsserver/javascript-algorithms/src/algorithms/graph/articulation-points/articulationPoints.js",statementMap:{"0":{start:{line:8,column:4},end:{line:8,column:39}},"1":{start:{line:9,column:4},end:{line:9,column:45}},"2":{start:{line:12,column:4},end:{line:12,column:38}},"3":{start:{line:24,column:21},end:{line:24,column:23}},"4":{start:{line:27,column:32},end:{line:27,column:34}},"5":{start:{line:30,column:22},end:{line:30,column:23}},"6":{start:{line:33,column:22},end:{line:33,column:47}},"7":{start:{line:35,column:23},end:{line:107,column:3}},"8":{start:{line:42,column:6},end:{line:42,column:25}},"9":{start:{line:45,column:6},end:{line:48,column:9}},"10":{start:{line:50,column:6},end:{line:53,column:7}},"11":{start:{line:52,column:8},end:{line:52,column:74}},"12":{start:{line:60,column:6},end:{line:63,column:7}},"13":{start:{line:62,column:8},end:{line:62,column:15}},"14":{start:{line:68,column:6},end:{line:80,column:10}},"15":{start:{line:69,column:33},end:{line:69,column:83}},"16":{start:{line:76,column:36},end:{line:76,column:82}},"17":{start:{line:77,column:12},end:{line:77,column:97}},"18":{start:{line:86,column:6},end:{line:102,column:7}},"19":{start:{line:88,column:8},end:{line:90,column:9}},"20":{start:{line:89,column:10},end:{line:89,column:74}},"21":{start:{line:93,column:40},end:{line:93,column:91}},"22":{start:{line:98,column:36},end:{line:98,column:85}},"23":{start:{line:99,column:8},end:{line:101,column:9}},"24":{start:{line:100,column:10},end:{line:100,column:74}},"25":{start:{line:105,column:6},end:{line:105,column:46}},"26":{start:{line:110,column:2},end:{line:110,column:53}},"27":{start:{line:112,column:2},end:{line:112,column:31}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:7,column:2},end:{line:7,column:3}},loc:{start:{line:7,column:51},end:{line:13,column:3}},line:7},"1":{name:"articulationPoints",decl:{start:{line:22,column:24},end:{line:22,column:42}},loc:{start:{line:22,column:50},end:{line:113,column:1}},line:22},"2":{name:"(anonymous_2)",decl:{start:{line:40,column:17},end:{line:40,column:18}},loc:{start:{line:40,column:56},end:{line:54,column:5}},line:40},"3":{name:"(anonymous_3)",decl:{start:{line:59,column:17},end:{line:59,column:18}},loc:{start:{line:59,column:56},end:{line:103,column:5}},line:59},"4":{name:"(anonymous_4)",decl:{start:{line:69,column:16},end:{line:69,column:17}},loc:{start:{line:69,column:33},end:{line:69,column:83}},line:69},"5":{name:"(anonymous_5)",decl:{start:{line:75,column:10},end:{line:75,column:11}},loc:{start:{line:75,column:45},end:{line:78,column:11}},line:75},"6":{name:"(anonymous_6)",decl:{start:{line:104,column:20},end:{line:104,column:21}},loc:{start:{line:104,column:40},end:{line:106,column:5}},line:104}},branchMap:{"0":{loc:{start:{line:50,column:6},end:{line:53,column:7}},type:"if",locations:[{start:{line:50,column:6},end:{line:53,column:7}},{start:{line:50,column:6},end:{line:53,column:7}}],line:50},"1":{loc:{start:{line:60,column:6},end:{line:63,column:7}},type:"if",locations:[{start:{line:60,column:6},end:{line:63,column:7}},{start:{line:60,column:6},end:{line:63,column:7}}],line:60},"2":{loc:{start:{line:77,column:19},end:{line:77,column:96}},type:"cond-expr",locations:[{start:{line:77,column:59},end:{line:77,column:74}},{start:{line:77,column:77},end:{line:77,column:96}}],line:77},"3":{loc:{start:{line:86,column:6},end:{line:102,column:7}},type:"if",locations:[{start:{line:86,column:6},end:{line:102,column:7}},{start:{line:86,column:6},end:{line:102,column:7}}],line:86},"4":{loc:{start:{line:88,column:8},end:{line:90,column:9}},type:"if",locations:[{start:{line:88,column:8},end:{line:90,column:9}},{start:{line:88,column:8},end:{line:90,column:9}}],line:88},"5":{loc:{start:{line:99,column:8},end:{line:101,column:9}},type:"if",locations:[{start:{line:99,column:8},end:{line:101,column:9}},{start:{line:99,column:8},end:{line:101,column:9}}],line:99}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"2aecbd7162f48d5ebaf95d951100c4622df24202"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();import depthFirstSearch from'../depth-first-search/depthFirstSearch';/**
 * Helper class for visited vertex metadata.
 */class VisitMetadata{constructor({discoveryTime,lowDiscoveryTime}){cov_1hdg0ojmh2.f[0]++;cov_1hdg0ojmh2.s[0]++;this.discoveryTime=discoveryTime;cov_1hdg0ojmh2.s[1]++;this.lowDiscoveryTime=lowDiscoveryTime;// We need this in order to check graph root node, whether it has two
// disconnected children or not.
cov_1hdg0ojmh2.s[2]++;this.independentChildrenCount=0;}}/**
 * Tarjan's algorithm for finding articulation points in graph.
 *
 * @param {Graph} graph
 * @return {Object}
 */export default function articulationPoints(graph){cov_1hdg0ojmh2.f[1]++;// Set of vertices we've already visited during DFS.
const visitedSet=(cov_1hdg0ojmh2.s[3]++,{});// Set of articulation points.
const articulationPointsSet=(cov_1hdg0ojmh2.s[4]++,{});// Time needed to discover to the current vertex.
let discoveryTime=(cov_1hdg0ojmh2.s[5]++,0);// Peek the start vertex for DFS traversal.
const startVertex=(cov_1hdg0ojmh2.s[6]++,graph.getAllVertices()[0]);const dfsCallbacks=(cov_1hdg0ojmh2.s[7]++,{/**
     * @param {GraphVertex} currentVertex
     * @param {GraphVertex} previousVertex
     */enterVertex:({currentVertex,previousVertex})=>{cov_1hdg0ojmh2.f[2]++;cov_1hdg0ojmh2.s[8]++;// Tick discovery time.
discoveryTime+=1;// Put current vertex to visited set.
cov_1hdg0ojmh2.s[9]++;visitedSet[currentVertex.getKey()]=new VisitMetadata({discoveryTime,lowDiscoveryTime:discoveryTime});cov_1hdg0ojmh2.s[10]++;if(previousVertex){cov_1hdg0ojmh2.b[0][0]++;cov_1hdg0ojmh2.s[11]++;// Update children counter for previous vertex.
visitedSet[previousVertex.getKey()].independentChildrenCount+=1;}else{cov_1hdg0ojmh2.b[0][1]++;}},/**
     * @param {GraphVertex} currentVertex
     * @param {GraphVertex} previousVertex
     */leaveVertex:({currentVertex,previousVertex})=>{cov_1hdg0ojmh2.f[3]++;cov_1hdg0ojmh2.s[12]++;if(previousVertex===null){cov_1hdg0ojmh2.b[1][0]++;cov_1hdg0ojmh2.s[13]++;// Don't do anything for the root vertex if it is already current (not previous one)
return;}else{cov_1hdg0ojmh2.b[1][1]++;}// Update the low time with the smallest time of adjacent vertices.
// Get minimum low discovery time from all neighbors.
/** @param {GraphVertex} neighbor */cov_1hdg0ojmh2.s[14]++;visitedSet[currentVertex.getKey()].lowDiscoveryTime=currentVertex.getNeighbors().filter(earlyNeighbor=>{cov_1hdg0ojmh2.f[4]++;cov_1hdg0ojmh2.s[15]++;return earlyNeighbor.getKey()!==previousVertex.getKey();})/**
         * @param {number} lowestDiscoveryTime
         * @param {GraphVertex} neighbor
         */.reduce((lowestDiscoveryTime,neighbor)=>{cov_1hdg0ojmh2.f[5]++;const neighborLowTime=(cov_1hdg0ojmh2.s[16]++,visitedSet[neighbor.getKey()].lowDiscoveryTime);cov_1hdg0ojmh2.s[17]++;return neighborLowTime<lowestDiscoveryTime?(cov_1hdg0ojmh2.b[2][0]++,neighborLowTime):(cov_1hdg0ojmh2.b[2][1]++,lowestDiscoveryTime);},visitedSet[currentVertex.getKey()].lowDiscoveryTime);// Detect whether previous vertex is articulation point or not.
// To do so we need to check two [OR] conditions:
// 1. Is it a root vertex with at least two independent children.
// 2. If its visited time is <= low time of adjacent vertex.
cov_1hdg0ojmh2.s[18]++;if(previousVertex===startVertex){cov_1hdg0ojmh2.b[3][0]++;cov_1hdg0ojmh2.s[19]++;// Check that root vertex has at least two independent children.
if(visitedSet[previousVertex.getKey()].independentChildrenCount>=2){cov_1hdg0ojmh2.b[4][0]++;cov_1hdg0ojmh2.s[20]++;articulationPointsSet[previousVertex.getKey()]=previousVertex;}else{cov_1hdg0ojmh2.b[4][1]++;}}else{cov_1hdg0ojmh2.b[3][1]++;// Get current vertex low discovery time.
const currentLowDiscoveryTime=(cov_1hdg0ojmh2.s[21]++,visitedSet[currentVertex.getKey()].lowDiscoveryTime);// Compare current vertex low discovery time with parent discovery time. Check if there
// are any short path (back edge) exists. If we can't get to current vertex other then
// via parent then the parent vertex is articulation point for current one.
const parentDiscoveryTime=(cov_1hdg0ojmh2.s[22]++,visitedSet[previousVertex.getKey()].discoveryTime);cov_1hdg0ojmh2.s[23]++;if(parentDiscoveryTime<=currentLowDiscoveryTime){cov_1hdg0ojmh2.b[5][0]++;cov_1hdg0ojmh2.s[24]++;articulationPointsSet[previousVertex.getKey()]=previousVertex;}else{cov_1hdg0ojmh2.b[5][1]++;}}},allowTraversal:({nextVertex})=>{cov_1hdg0ojmh2.f[6]++;cov_1hdg0ojmh2.s[25]++;return!visitedSet[nextVertex.getKey()];}});// Do Depth First Search traversal over submitted graph.
cov_1hdg0ojmh2.s[26]++;depthFirstSearch(graph,startVertex,dfsCallbacks);cov_1hdg0ojmh2.s[27]++;return articulationPointsSet;}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9oYi9sYXRsaWIvanNzZXJ2ZXIvamF2YXNjcmlwdC1hbGdvcml0aG1zL3NyYy9hbGdvcml0aG1zL2dyYXBoL2FydGljdWxhdGlvbi1wb2ludHMvYXJ0aWN1bGF0aW9uUG9pbnRzLmpzIl0sIm5hbWVzIjpbImRlcHRoRmlyc3RTZWFyY2giLCJWaXNpdE1ldGFkYXRhIiwiY29uc3RydWN0b3IiLCJkaXNjb3ZlcnlUaW1lIiwibG93RGlzY292ZXJ5VGltZSIsImluZGVwZW5kZW50Q2hpbGRyZW5Db3VudCIsImFydGljdWxhdGlvblBvaW50cyIsImdyYXBoIiwidmlzaXRlZFNldCIsImFydGljdWxhdGlvblBvaW50c1NldCIsInN0YXJ0VmVydGV4IiwiZ2V0QWxsVmVydGljZXMiLCJkZnNDYWxsYmFja3MiLCJlbnRlclZlcnRleCIsImN1cnJlbnRWZXJ0ZXgiLCJwcmV2aW91c1ZlcnRleCIsImdldEtleSIsImxlYXZlVmVydGV4IiwiZ2V0TmVpZ2hib3JzIiwiZmlsdGVyIiwiZWFybHlOZWlnaGJvciIsInJlZHVjZSIsImxvd2VzdERpc2NvdmVyeVRpbWUiLCJuZWlnaGJvciIsIm5laWdoYm9yTG93VGltZSIsImN1cnJlbnRMb3dEaXNjb3ZlcnlUaW1lIiwicGFyZW50RGlzY292ZXJ5VGltZSIsImFsbG93VHJhdmVyc2FsIiwibmV4dFZlcnRleCJdLCJtYXBwaW5ncyI6IjZwSkFBQSxNQUFPQSxDQUFBQSxnQkFBUCxLQUE2Qix3Q0FBN0IsQ0FFQTs7R0FHQSxLQUFNQyxDQUFBQSxhQUFjLENBQ2xCQyxXQUFXLENBQUMsQ0FBRUMsYUFBRixDQUFpQkMsZ0JBQWpCLENBQUQsQ0FBc0MsNkNBQy9DLEtBQUtELGFBQUwsQ0FBcUJBLGFBQXJCLENBRCtDLHNCQUUvQyxLQUFLQyxnQkFBTCxDQUF3QkEsZ0JBQXhCLENBQ0E7QUFDQTtBQUorQyxzQkFLL0MsS0FBS0Msd0JBQUwsQ0FBZ0MsQ0FBaEMsQ0FDRCxDQVBpQixDQVVwQjs7Ozs7R0FNQSxjQUFlLFNB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QUFqRCxDQUNELENBRkQsK0JBR0QsQ0FDRixDQXBFa0IsQ0FxRW5CWSxjQUFjLENBQUUsQ0FBQyxDQUFFQyxVQUFGLENBQUQsR0FBb0IsOENBQ2xDLE1BQU8sQ0FBQ3BCLFVBQVUsQ0FBQ29CLFVBQVUsQ0FBQ1osTUFBWCxFQUFELENBQWxCLENBQ0QsQ0F2RWtCLENBQUgsQ0FBbEIsQ0EwRUE7QUF2RmdELHVCQXdGaERoQixnQkFBZ0IsQ0FBQ08sS0FBRCxDQUFRRyxXQUFSLENBQXFCRSxZQUFyQixDQUFoQixDQXhGZ0QsdUJBMEZoRCxNQUFPSCxDQUFBQSxxQkFBUCxDQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGRlcHRoRmlyc3RTZWFyY2ggZnJvbSAnLi4vZGVwdGgtZmlyc3Qtc2VhcmNoL2RlcHRoRmlyc3RTZWFyY2gnO1xuXG4vKipcbiAqIEhlbHBlciBjbGFzcyBmb3IgdmlzaXRlZCB2ZXJ0ZXggbWV0YWRhdGEuXG4gKi9cbmNsYXNzIFZpc2l0TWV0YWRhdGEge1xuICBjb25zdHJ1Y3Rvcih7IGRpc2NvdmVyeVRpbWUsIGxvd0Rpc2NvdmVyeVRpbWUgfSkge1xuICAgIHRoaXMuZGlzY292ZXJ5VGltZSA9IGRpc2NvdmVyeVRpbWU7XG4gICAgdGhpcy5sb3dEaXNjb3ZlcnlUaW1lID0gbG93RGlzY292ZXJ5VGltZTtcbiAgICAvLyBXZSBuZWVkIHRoaXMgaW4gb3JkZXIgdG8gY2hlY2sgZ3JhcGggcm9vdCBub2RlLCB3aGV0aGVyIGl0IGhhcyB0d29cbiAgICAvLyBkaXNjb25uZWN0ZWQgY2hpbGRyZW4gb3Igbm90LlxuICAgIHRoaXMuaW5kZXBlbmRlbnRDaGlsZHJlbkNvdW50ID0gMDtcbiAgfVxufVxuXG4vKipcbiAqIFRhcmphbidzIGFsZ29yaXRobSBmb3IgZmluZGluZyBhcnRpY3VsYXRpb24gcG9pbnRzIGluIGdyYXBoLlxuICpcbiAqIEBwYXJhbSB7R3JhcGh9IGdyYXBoXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFydGljdWxhdGlvblBvaW50cyhncmFwaCkge1xuICAvLyBTZXQgb2YgdmVydGljZXMgd2UndmUgYWxyZWFkeSB2aXNpdGVkIGR1cmluZyBERlMuXG4gIGNvbnN0IHZpc2l0ZWRTZXQgPSB7fTtcblxuICAvLyBTZXQgb2YgYXJ0aWN1bGF0aW9uIHBvaW50cy5cbiAgY29uc3QgYXJ0aWN1bGF0aW9uUG9pbnRzU2V0ID0ge307XG5cbiAgLy8gVGltZSBuZWVkZWQgdG8gZGlzY292ZXIgdG8gdGhlIGN1cnJlbnQgdmVydGV4LlxuICBsZXQgZGlzY292ZXJ5VGltZSA9IDA7XG5cbiAgLy8gUGVlayB0aGUgc3RhcnQgdmVydGV4IGZvciBERlMgdHJhdmVyc2FsLlxuICBjb25zdCBzdGFydFZlcnRleCA9IGdyYXBoLmdldEFsbFZlcnRpY2VzKClbMF07XG5cbiAgY29uc3QgZGZzQ2FsbGJhY2tzID0ge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7R3JhcGhWZXJ0ZXh9IGN1cnJlbnRWZXJ0ZXhcbiAgICAgKiBAcGFyYW0ge0dyYXBoVmVydGV4fSBwcmV2aW91c1ZlcnRleFxuICAgICAqL1xuICAgIGVudGVyVmVydGV4OiAoeyBjdXJyZW50VmVydGV4LCBwcmV2aW91c1ZlcnRleCB9KSA9PiB7XG4gICAgICAvLyBUaWNrIGRpc2NvdmVyeSB0aW1lLlxuICAgICAgZGlzY292ZXJ5VGltZSArPSAxO1xuXG4gICAgICAvLyBQdXQgY3VycmVudCB2ZXJ0ZXggdG8gdmlzaXRlZCBzZXQuXG4gICAgICB2aXNpdGVkU2V0W2N1cnJlbnRWZXJ0ZXguZ2V0S2V5KCldID0gbmV3IFZpc2l0TWV0YWRhdGEoe1xuICAgICAgICBkaXNjb3ZlcnlUaW1lLFxuICAgICAgICBsb3dEaXNjb3ZlcnlUaW1lOiBkaXNjb3ZlcnlUaW1lLFxuICAgICAgfSk7XG5cbiAgICAgIGlmIChwcmV2aW91c1ZlcnRleCkge1xuICAgICAgICAvLyBVcGRhdGUgY2hpbGRyZW4gY291bnRlciBmb3IgcHJldmlvdXMgdmVydGV4LlxuICAgICAgICB2aXNpdGVkU2V0W3ByZXZpb3VzVmVydGV4LmdldEtleSgpXS5pbmRlcGVuZGVudENoaWxkcmVuQ291bnQgKz0gMTtcbiAgICAgIH1cbiAgICB9LFxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7R3JhcGhWZXJ0ZXh9IGN1cnJlbnRWZXJ0ZXhcbiAgICAgKiBAcGFyYW0ge0dyYXBoVmVydGV4fSBwcmV2aW91c1ZlcnRleFxuICAgICAqL1xuICAgIGxlYXZlVmVydGV4OiAoeyBjdXJyZW50VmVydGV4LCBwcmV2aW91c1ZlcnRleCB9KSA9PiB7XG4gICAgICBpZiAocHJldmlvdXNWZXJ0ZXggPT09IG51bGwpIHtcbiAgICAgICAgLy8gRG9uJ3QgZG8gYW55dGhpbmcgZm9yIHRoZSByb290IHZlcnRleCBpZiBpdCBpcyBhbHJlYWR5IGN1cnJlbnQgKG5vdCBwcmV2aW91cyBvbmUpXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gVXBkYXRlIHRoZSBsb3cgdGltZSB3aXRoIHRoZSBzbWFsbGVzdCB0aW1lIG9mIGFkamFjZW50IHZlcnRpY2VzLlxuICAgICAgLy8gR2V0IG1pbmltdW0gbG93IGRpc2NvdmVyeSB0aW1lIGZyb20gYWxsIG5laWdoYm9ycy5cbiAgICAgIC8qKiBAcGFyYW0ge0dyYXBoVmVydGV4fSBuZWlnaGJvciAqL1xuICAgICAgdmlzaXRlZFNldFtjdXJyZW50VmVydGV4LmdldEtleSgpXS5sb3dEaXNjb3ZlcnlUaW1lID0gY3VycmVudFZlcnRleC5nZXROZWlnaGJvcnMoKVxuICAgICAgICAuZmlsdGVyKGVhcmx5TmVpZ2hib3IgPT4gZWFybHlOZWlnaGJvci5nZXRLZXkoKSAhPT0gcHJldmlvdXNWZXJ0ZXguZ2V0S2V5KCkpXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gbG93ZXN0RGlzY292ZXJ5VGltZVxuICAgICAgICAgKiBAcGFyYW0ge0dyYXBoVmVydGV4fSBuZWlnaGJvclxuICAgICAgICAgKi9cbiAgICAgICAgLnJlZHVjZShcbiAgICAgICAgICAobG93ZXN0RGlzY292ZXJ5VGltZSwgbmVpZ2hib3IpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG5laWdoYm9yTG93VGltZSA9IHZpc2l0ZWRTZXRbbmVpZ2hib3IuZ2V0S2V5KCldLmxvd0Rpc2NvdmVyeVRpbWU7XG4gICAgICAgICAgICByZXR1cm4gbmVpZ2hib3JMb3dUaW1lIDwgbG93ZXN0RGlzY292ZXJ5VGltZSA/IG5laWdoYm9yTG93VGltZSA6IGxvd2VzdERpc2NvdmVyeVRpbWU7XG4gICAgICAgICAgfSxcbiAgICAgICAgICB2aXNpdGVkU2V0W2N1cnJlbnRWZXJ0ZXguZ2V0S2V5KCldLmxvd0Rpc2NvdmVyeVRpbWUsXG4gICAgICAgICk7XG5cbiAgICAgIC8vIERldGVjdCB3aGV0aGVyIHByZXZpb3VzIHZlcnRleCBpcyBhcnRpY3VsYXRpb24gcG9pbnQgb3Igbm90LlxuICAgICAgLy8gVG8gZG8gc28gd2UgbmVlZCB0byBjaGVjayB0d28gW09SXSBjb25kaXRpb25zOlxuICAgICAgLy8gMS4gSXMgaXQgYSByb290IHZlcnRleCB3aXRoIGF0IGxlYXN0IHR3byBpbmRlcGVuZGVudCBjaGlsZHJlbi5cbiAgICAgIC8vIDIuIElmIGl0cyB2aXNpdGVkIHRpbWUgaXMgPD0gbG93IHRpbWUgb2YgYWRqYWNlbnQgdmVydGV4LlxuICAgICAgaWYgKHByZXZpb3VzVmVydGV4ID09PSBzdGFydFZlcnRleCkge1xuICAgICAgICAvLyBDaGVjayB0aGF0IHJvb3QgdmVydGV4IGhhcyBhdCBsZWFzdCB0d28gaW5kZXBlbmRlbnQgY2hpbGRyZW4uXG4gICAgICAgIGlmICh2aXNpdGVkU2V0W3ByZXZpb3VzVmVydGV4LmdldEtleSgpXS5pbmRlcGVuZGVudENoaWxkcmVuQ291bnQgPj0gMikge1xuICAgICAgICAgIGFydGljdWxhdGlvblBvaW50c1NldFtwcmV2aW91c1ZlcnRleC5nZXRLZXkoKV0gPSBwcmV2aW91c1ZlcnRleDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gR2V0IGN1cnJlbnQgdmVydGV4IGxvdyBkaXNjb3ZlcnkgdGltZS5cbiAgICAgICAgY29uc3QgY3VycmVudExvd0Rpc2NvdmVyeVRpbWUgPSB2aXNpdGVkU2V0W2N1cnJlbnRWZXJ0ZXguZ2V0S2V5KCldLmxvd0Rpc2NvdmVyeVRpbWU7XG5cbiAgICAgICAgLy8gQ29tcGFyZSBjdXJyZW50IHZlcnRleCBsb3cgZGlzY292ZXJ5IHRpbWUgd2l0aCBwYXJlbnQgZGlzY292ZXJ5IHRpbWUuIENoZWNrIGlmIHRoZXJlXG4gICAgICAgIC8vIGFyZSBhbnkgc2hvcnQgcGF0aCAoYmFjayBlZGdlKSBleGlzdHMuIElmIHdlIGNhbid0IGdldCB0byBjdXJyZW50IHZlcnRleCBvdGhlciB0aGVuXG4gICAgICAgIC8vIHZpYSBwYXJlbnQgdGhlbiB0aGUgcGFyZW50IHZlcnRleCBpcyBhcnRpY3VsYXRpb24gcG9pbnQgZm9yIGN1cnJlbnQgb25lLlxuICAgICAgICBjb25zdCBwYXJlbnREaXNjb3ZlcnlUaW1lID0gdmlzaXRlZFNldFtwcmV2aW91c1ZlcnRleC5nZXRLZXkoKV0uZGlzY292ZXJ5VGltZTtcbiAgICAgICAgaWYgKHBhcmVudERpc2NvdmVyeVRpbWUgPD0gY3VycmVudExvd0Rpc2NvdmVyeVRpbWUpIHtcbiAgICAgICAgICBhcnRpY3VsYXRpb25Qb2ludHNTZXRbcHJldmlvdXNWZXJ0ZXguZ2V0S2V5KCldID0gcHJldmlvdXNWZXJ0ZXg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIGFsbG93VHJhdmVyc2FsOiAoeyBuZXh0VmVydGV4IH0pID0+IHtcbiAgICAgIHJldHVybiAhdmlzaXRlZFNldFtuZXh0VmVydGV4LmdldEtleSgpXTtcbiAgICB9LFxuICB9O1xuXG4gIC8vIERvIERlcHRoIEZpcnN0IFNlYXJjaCB0cmF2ZXJzYWwgb3ZlciBzdWJtaXR0ZWQgZ3JhcGguXG4gIGRlcHRoRmlyc3RTZWFyY2goZ3JhcGgsIHN0YXJ0VmVydGV4LCBkZnNDYWxsYmFja3MpO1xuXG4gIHJldHVybiBhcnRpY3VsYXRpb25Qb2ludHNTZXQ7XG59XG4iXX0=