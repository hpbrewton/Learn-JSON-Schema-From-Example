var cov_7wahjtauu=function(){var path="/Users/hb/latlib/jsserver/javascript-algorithms/src/algorithms/graph/bridges/graphBridges.js";var hash="47b06b07c9ec820d009b14d5238d65fb92d52e87";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/hb/latlib/jsserver/javascript-algorithms/src/algorithms/graph/bridges/graphBridges.js",statementMap:{"0":{start:{line:8,column:4},end:{line:8,column:39}},"1":{start:{line:9,column:4},end:{line:9,column:45}},"2":{start:{line:19,column:21},end:{line:19,column:23}},"3":{start:{line:22,column:18},end:{line:22,column:20}},"4":{start:{line:25,column:22},end:{line:25,column:23}},"5":{start:{line:28,column:22},end:{line:28,column:47}},"6":{start:{line:30,column:23},end:{line:89,column:3}},"7":{start:{line:36,column:6},end:{line:36,column:25}},"8":{start:{line:39,column:6},end:{line:42,column:9}},"9":{start:{line:49,column:6},end:{line:52,column:7}},"10":{start:{line:51,column:8},end:{line:51,column:15}},"11":{start:{line:55,column:6},end:{line:67,column:10}},"12":{start:{line:56,column:33},end:{line:56,column:83}},"13":{start:{line:63,column:36},end:{line:63,column:82}},"14":{start:{line:64,column:12},end:{line:64,column:97}},"15":{start:{line:71,column:38},end:{line:71,column:89}},"16":{start:{line:72,column:39},end:{line:72,column:91}},"17":{start:{line:73,column:6},end:{line:75,column:7}},"18":{start:{line:74,column:8},end:{line:74,column:87}},"19":{start:{line:80,column:34},end:{line:80,column:83}},"20":{start:{line:81,column:6},end:{line:84,column:7}},"21":{start:{line:82,column:23},end:{line:82,column:68}},"22":{start:{line:83,column:8},end:{line:83,column:42}},"23":{start:{line:87,column:6},end:{line:87,column:46}},"24":{start:{line:92,column:2},end:{line:92,column:53}},"25":{start:{line:94,column:2},end:{line:94,column:17}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:7,column:2},end:{line:7,column:3}},loc:{start:{line:7,column:51},end:{line:10,column:3}},line:7},"1":{name:"graphBridges",decl:{start:{line:17,column:24},end:{line:17,column:36}},loc:{start:{line:17,column:44},end:{line:95,column:1}},line:17},"2":{name:"(anonymous_2)",decl:{start:{line:34,column:17},end:{line:34,column:18}},loc:{start:{line:34,column:40},end:{line:43,column:5}},line:34},"3":{name:"(anonymous_3)",decl:{start:{line:48,column:17},end:{line:48,column:18}},loc:{start:{line:48,column:56},end:{line:85,column:5}},line:48},"4":{name:"(anonymous_4)",decl:{start:{line:56,column:16},end:{line:56,column:17}},loc:{start:{line:56,column:33},end:{line:56,column:83}},line:56},"5":{name:"(anonymous_5)",decl:{start:{line:62,column:10},end:{line:62,column:11}},loc:{start:{line:62,column:45},end:{line:65,column:11}},line:62},"6":{name:"(anonymous_6)",decl:{start:{line:86,column:20},end:{line:86,column:21}},loc:{start:{line:86,column:40},end:{line:88,column:5}},line:86}},branchMap:{"0":{loc:{start:{line:49,column:6},end:{line:52,column:7}},type:"if",locations:[{start:{line:49,column:6},end:{line:52,column:7}},{start:{line:49,column:6},end:{line:52,column:7}}],line:49},"1":{loc:{start:{line:64,column:19},end:{line:64,column:96}},type:"cond-expr",locations:[{start:{line:64,column:59},end:{line:64,column:74}},{start:{line:64,column:77},end:{line:64,column:96}}],line:64},"2":{loc:{start:{line:73,column:6},end:{line:75,column:7}},type:"if",locations:[{start:{line:73,column:6},end:{line:75,column:7}},{start:{line:73,column:6},end:{line:75,column:7}}],line:73},"3":{loc:{start:{line:81,column:6},end:{line:84,column:7}},type:"if",locations:[{start:{line:81,column:6},end:{line:84,column:7}},{start:{line:81,column:6},end:{line:84,column:7}}],line:81}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"47b06b07c9ec820d009b14d5238d65fb92d52e87"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();import depthFirstSearch from'../depth-first-search/depthFirstSearch';/**
 * Helper class for visited vertex metadata.
 */class VisitMetadata{constructor({discoveryTime,lowDiscoveryTime}){cov_7wahjtauu.f[0]++;cov_7wahjtauu.s[0]++;this.discoveryTime=discoveryTime;cov_7wahjtauu.s[1]++;this.lowDiscoveryTime=lowDiscoveryTime;}}/**
 * @param {Graph} graph
 * @return {Object}
 */export default function graphBridges(graph){cov_7wahjtauu.f[1]++;// Set of vertices we've already visited during DFS.
const visitedSet=(cov_7wahjtauu.s[2]++,{});// Set of bridges.
const bridges=(cov_7wahjtauu.s[3]++,{});// Time needed to discover to the current vertex.
let discoveryTime=(cov_7wahjtauu.s[4]++,0);// Peek the start vertex for DFS traversal.
const startVertex=(cov_7wahjtauu.s[5]++,graph.getAllVertices()[0]);const dfsCallbacks=(cov_7wahjtauu.s[6]++,{/**
     * @param {GraphVertex} currentVertex
     */enterVertex:({currentVertex})=>{cov_7wahjtauu.f[2]++;cov_7wahjtauu.s[7]++;// Tick discovery time.
discoveryTime+=1;// Put current vertex to visited set.
cov_7wahjtauu.s[8]++;visitedSet[currentVertex.getKey()]=new VisitMetadata({discoveryTime,lowDiscoveryTime:discoveryTime});},/**
     * @param {GraphVertex} currentVertex
     * @param {GraphVertex} previousVertex
     */leaveVertex:({currentVertex,previousVertex})=>{cov_7wahjtauu.f[3]++;cov_7wahjtauu.s[9]++;if(previousVertex===null){cov_7wahjtauu.b[0][0]++;cov_7wahjtauu.s[10]++;// Don't do anything for the root vertex if it is already current (not previous one).
return;}else{cov_7wahjtauu.b[0][1]++;}// Check if current node is connected to any early node other then previous one.
cov_7wahjtauu.s[11]++;visitedSet[currentVertex.getKey()].lowDiscoveryTime=currentVertex.getNeighbors().filter(earlyNeighbor=>{cov_7wahjtauu.f[4]++;cov_7wahjtauu.s[12]++;return earlyNeighbor.getKey()!==previousVertex.getKey();}).reduce(/**
           * @param {number} lowestDiscoveryTime
           * @param {GraphVertex} neighbor
           */(lowestDiscoveryTime,neighbor)=>{cov_7wahjtauu.f[5]++;const neighborLowTime=(cov_7wahjtauu.s[13]++,visitedSet[neighbor.getKey()].lowDiscoveryTime);cov_7wahjtauu.s[14]++;return neighborLowTime<lowestDiscoveryTime?(cov_7wahjtauu.b[1][0]++,neighborLowTime):(cov_7wahjtauu.b[1][1]++,lowestDiscoveryTime);},visitedSet[currentVertex.getKey()].lowDiscoveryTime);// Compare low discovery times. In case if current low discovery time is less than the one
// in previous vertex then update previous vertex low time.
const currentLowDiscoveryTime=(cov_7wahjtauu.s[15]++,visitedSet[currentVertex.getKey()].lowDiscoveryTime);const previousLowDiscoveryTime=(cov_7wahjtauu.s[16]++,visitedSet[previousVertex.getKey()].lowDiscoveryTime);cov_7wahjtauu.s[17]++;if(currentLowDiscoveryTime<previousLowDiscoveryTime){cov_7wahjtauu.b[2][0]++;cov_7wahjtauu.s[18]++;visitedSet[previousVertex.getKey()].lowDiscoveryTime=currentLowDiscoveryTime;}else{cov_7wahjtauu.b[2][1]++;}// Compare current vertex low discovery time with parent discovery time. Check if there
// are any short path (back edge) exists. If we can't get to current vertex other then
// via parent then the parent vertex is articulation point for current one.
const parentDiscoveryTime=(cov_7wahjtauu.s[19]++,visitedSet[previousVertex.getKey()].discoveryTime);cov_7wahjtauu.s[20]++;if(parentDiscoveryTime<currentLowDiscoveryTime){cov_7wahjtauu.b[3][0]++;const bridge=(cov_7wahjtauu.s[21]++,graph.findEdge(previousVertex,currentVertex));cov_7wahjtauu.s[22]++;bridges[bridge.getKey()]=bridge;}else{cov_7wahjtauu.b[3][1]++;}},allowTraversal:({nextVertex})=>{cov_7wahjtauu.f[6]++;cov_7wahjtauu.s[23]++;return!visitedSet[nextVertex.getKey()];}});// Do Depth First Search traversal over submitted graph.
cov_7wahjtauu.s[24]++;depthFirstSearch(graph,startVertex,dfsCallbacks);cov_7wahjtauu.s[25]++;return bridges;}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,