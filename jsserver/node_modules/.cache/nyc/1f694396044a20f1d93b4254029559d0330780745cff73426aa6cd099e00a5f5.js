var cov_4namkwh8f=function(){var path="/Users/hb/latlib/jsserver/javascript-algorithms/src/algorithms/graph/dijkstra/dijkstra.js";var hash="43eecc705c65bbafd4aa242c86820de768499cc7";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/hb/latlib/jsserver/javascript-algorithms/src/algorithms/graph/dijkstra/dijkstra.js",statementMap:{"0":{start:{line:17,column:20},end:{line:17,column:22}},"1":{start:{line:18,column:26},end:{line:18,column:28}},"2":{start:{line:19,column:27},end:{line:19,column:29}},"3":{start:{line:20,column:16},end:{line:20,column:35}},"4":{start:{line:24,column:2},end:{line:27,column:5}},"5":{start:{line:25,column:4},end:{line:25,column:42}},"6":{start:{line:26,column:4},end:{line:26,column:45}},"7":{start:{line:30,column:2},end:{line:30,column:38}},"8":{start:{line:33,column:2},end:{line:33,column:58}},"9":{start:{line:36,column:2},end:{line:72,column:3}},"10":{start:{line:38,column:26},end:{line:38,column:38}},"11":{start:{line:41,column:4},end:{line:68,column:7}},"12":{start:{line:43,column:6},end:{line:67,column:7}},"13":{start:{line:45,column:21},end:{line:45,column:60}},"14":{start:{line:47,column:43},end:{line:47,column:71}},"15":{start:{line:48,column:46},end:{line:48,column:93}},"16":{start:{line:51,column:8},end:{line:61,column:9}},"17":{start:{line:52,column:10},end:{line:52,column:71}},"18":{start:{line:55,column:10},end:{line:57,column:11}},"19":{start:{line:56,column:12},end:{line:56,column:73}},"20":{start:{line:60,column:10},end:{line:60,column:62}},"21":{start:{line:64,column:8},end:{line:66,column:9}},"22":{start:{line:65,column:10},end:{line:65,column:60}},"23":{start:{line:71,column:4},end:{line:71,column:60}},"24":{start:{line:76,column:2},end:{line:79,column:4}}},fnMap:{"0":{name:"dijkstra",decl:{start:{line:15,column:24},end:{line:15,column:32}},loc:{start:{line:15,column:53},end:{line:80,column:1}},line:15},"1":{name:"(anonymous_1)",decl:{start:{line:24,column:33},end:{line:24,column:34}},loc:{start:{line:24,column:45},end:{line:27,column:3}},line:24},"2":{name:"(anonymous_2)",decl:{start:{line:41,column:41},end:{line:41,column:42}},loc:{start:{line:41,column:55},end:{line:68,column:5}},line:41}},branchMap:{"0":{loc:{start:{line:43,column:6},end:{line:67,column:7}},type:"if",locations:[{start:{line:43,column:6},end:{line:67,column:7}},{start:{line:43,column:6},end:{line:67,column:7}}],line:43},"1":{loc:{start:{line:51,column:8},end:{line:61,column:9}},type:"if",locations:[{start:{line:51,column:8},end:{line:61,column:9}},{start:{line:51,column:8},end:{line:61,column:9}}],line:51},"2":{loc:{start:{line:55,column:10},end:{line:57,column:11}},type:"if",locations:[{start:{line:55,column:10},end:{line:57,column:11}},{start:{line:55,column:10},end:{line:57,column:11}}],line:55},"3":{loc:{start:{line:64,column:8},end:{line:66,column:9}},type:"if",locations:[{start:{line:64,column:8},end:{line:66,column:9}},{start:{line:64,column:8},end:{line:66,column:9}}],line:64}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0},f:{"0":0,"1":0,"2":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"43eecc705c65bbafd4aa242c86820de768499cc7"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();import PriorityQueue from'../../../data-structures/priority-queue/PriorityQueue';/**
 * @typedef {Object} ShortestPaths
 * @property {Object} distances - shortest distances to all vertices
 * @property {Object} previousVertices - shortest paths to all vertices.
 */ /**
 * Implementation of Dijkstra algorithm of finding the shortest paths to graph nodes.
 * @param {Graph} graph - graph we're going to traverse.
 * @param {GraphVertex} startVertex - traversal start vertex.
 * @return {ShortestPaths}
 */export default function dijkstra(graph,startVertex){cov_4namkwh8f.f[0]++;// Init helper variables that we will need for Dijkstra algorithm.
const distances=(cov_4namkwh8f.s[0]++,{});const visitedVertices=(cov_4namkwh8f.s[1]++,{});const previousVertices=(cov_4namkwh8f.s[2]++,{});const queue=(cov_4namkwh8f.s[3]++,new PriorityQueue());// Init all distances with infinity assuming that currently we can't reach
// any of the vertices except the start one.
cov_4namkwh8f.s[4]++;graph.getAllVertices().forEach(vertex=>{cov_4namkwh8f.f[1]++;cov_4namkwh8f.s[5]++;distances[vertex.getKey()]=Infinity;cov_4namkwh8f.s[6]++;previousVertices[vertex.getKey()]=null;});// We are already at the startVertex so the distance to it is zero.
cov_4namkwh8f.s[7]++;distances[startVertex.getKey()]=0;// Init vertices queue.
cov_4namkwh8f.s[8]++;queue.add(startVertex,distances[startVertex.getKey()]);// Iterate over the priority queue of vertices until it is empty.
cov_4namkwh8f.s[9]++;while(!queue.isEmpty()){// Fetch next closest vertex.
const currentVertex=(cov_4namkwh8f.s[10]++,queue.poll());// Iterate over every unvisited neighbor of the current vertex.
cov_4namkwh8f.s[11]++;currentVertex.getNeighbors().forEach(neighbor=>{cov_4namkwh8f.f[2]++;cov_4namkwh8f.s[12]++;// Don't visit already visited vertices.
if(!visitedVertices[neighbor.getKey()]){cov_4namkwh8f.b[0][0]++;// Update distances to every neighbor from current vertex.
const edge=(cov_4namkwh8f.s[13]++,graph.findEdge(currentVertex,neighbor));const existingDistanceToNeighbor=(cov_4namkwh8f.s[14]++,distances[neighbor.getKey()]);const distanceToNeighborFromCurrent=(cov_4namkwh8f.s[15]++,distances[currentVertex.getKey()]+edge.weight);// If we've found shorter path to the neighbor - update it.
cov_4namkwh8f.s[16]++;if(distanceToNeighborFromCurrent<existingDistanceToNeighbor){cov_4namkwh8f.b[1][0]++;cov_4namkwh8f.s[17]++;distances[neighbor.getKey()]=distanceToNeighborFromCurrent;// Change priority of the neighbor in a queue since it might have became closer.
cov_4namkwh8f.s[18]++;if(queue.hasValue(neighbor)){cov_4namkwh8f.b[2][0]++;cov_4namkwh8f.s[19]++;queue.changePriority(neighbor,distances[neighbor.getKey()]);}else{cov_4namkwh8f.b[2][1]++;}// Remember previous closest vertex.
cov_4namkwh8f.s[20]++;previousVertices[neighbor.getKey()]=currentVertex;}else{cov_4namkwh8f.b[1][1]++;}// Add neighbor to the queue for further visiting.
cov_4namkwh8f.s[21]++;if(!queue.hasValue(neighbor)){cov_4namkwh8f.b[3][0]++;cov_4namkwh8f.s[22]++;queue.add(neighbor,distances[neighbor.getKey()]);}else{cov_4namkwh8f.b[3][1]++;}}else{cov_4namkwh8f.b[0][1]++;}});// Add current vertex to visited ones to avoid visiting it again later.
cov_4namkwh8f.s[23]++;visitedVertices[currentVertex.getKey()]=currentVertex;}// Return the set of shortest distances to all vertices and the set of
// shortest paths to all vertices in a graph.
cov_4namkwh8f.s[24]++;return{distances,previousVertices};}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9oYi9sYXRsaWIvanNzZXJ2ZXIvamF2YXNjcmlwdC1hbGdvcml0aG1zL3NyYy9hbGdvcml0aG1zL2dyYXBoL2RpamtzdHJhL2RpamtzdHJhLmpzIl0sIm5hbWVzIjpbIlByaW9yaXR5UXVldWUiLCJkaWprc3RyYSIsImdyYXBoIiwic3RhcnRWZXJ0ZXgiLCJkaXN0YW5jZXMiLCJ2aXNpdGVkVmVydGljZXMiLCJwcmV2aW91c1ZlcnRpY2VzIiwicXVldWUiLCJnZXRBbGxWZXJ0aWNlcyIsImZvckVhY2giLCJ2ZXJ0ZXgiLCJnZXRLZXkiLCJJbmZpbml0eSIsImFkZCIsImlzRW1wdHkiLCJjdXJyZW50VmVydGV4IiwicG9sbCIsImdldE5laWdoYm9ycyIsIm5laWdoYm9yIiwiZWRnZSIsImZpbmRFZGdlIiwiZXhpc3RpbmdEaXN0YW5jZVRvTmVpZ2hib3IiLCJkaXN0YW5jZVRvTmVpZ2hib3JGcm9tQ3VycmVudCIsIndlaWdodCIsImhhc1ZhbHVlIiwiY2hhbmdlUHJpb3JpdHkiXSwibWFwcGluZ3MiOiJpNkdBQUEsTUFBT0EsQ0FBQUEsYUFBUCxLQUEwQix1REFBMUIsQ0FFQTs7OztJQU1BOzs7OztHQU1BLGNBQWUsU0FBU0MsQ0FBQUEsUUFBVCxDQUFrQkMsS0FBbEIsQ0FBeUJDLFdBQXpCLENBQXNDLHNCQUNuRDtBQUNBLEtBQU1DLENBQUFBLFNBQVMsdUJBQUcsRUFBSCxDQUFmLENBQ0EsS0FBTUMsQ0FBQUEsZUFBZSx1QkFBRyxFQUFILENBQXJCLENBQ0EsS0FBTUMsQ0FBQUEsZ0JBQWdCLHVCQUFHLEVBQUgsQ0FBdEIsQ0FDQSxLQUFNQyxDQUFBQSxLQUFLLHVCQUFHLEdBQUlQLENBQUFBLGFBQUosRUFBSCxDQUFYLENBRUE7QUFDQTtBQVJtRCxxQkFTbkRFLEtBQUssQ0FBQ00sY0FBTixHQUF1QkMsT0FBdkIsQ0FBZ0NDLE1BQUQsRUFBWSwyQ0FDekNOLFNBQVMsQ0FBQ00sTUFBTSxDQUFDQyxNQUFQLEVBQUQsQ0FBVCxDQUE2QkMsUUFBN0IsQ0FEeUMscUJBRXpDTixnQkFBZ0IsQ0FBQ0ksTUFBTSxDQUFDQyxNQUFQLEVBQUQsQ0FBaEIsQ0FBb0MsSUFBcEMsQ0FDRCxDQUhELEVBS0E7QUFkbUQscUJBZW5EUCxTQUFTLENBQUNELFdBQVcsQ0FBQ1EsTUFBWixFQUFELENBQVQsQ0FBa0MsQ0FBbEMsQ0FFQTtBQWpCbUQscUJBa0JuREosS0FBSyxDQUFDTSxHQUFOLENBQVVWLFdBQVYsQ0FBdUJDLFNBQVMsQ0FBQ0QsV0FBVyxDQUFDUSxNQUFaLEVBQUQsQ0FBaEMsRUFFQTtBQXBCbUQscUJBcUJuRCxNQUFPLENBQUNKLEtBQUssQ0FBQ08sT0FBTixFQUFSLENBQXlCLENBQ3ZCO0FBQ0EsS0FBTUMsQ0FBQUEsYUFBYSx3QkFBR1IsS0FBSyxDQUFDUyxJQUFOLEVBQUgsQ0FBbkIsQ0FFQTtBQUp1QixzQkFLdkJELGFBQWEsQ0FBQ0UsWUFBZCxHQUE2QlIsT0FBN0IsQ0FBc0NTLFFBQUQsRUFBYyw0Q0FDakQ7QUFDQSxHQUFJLENBQUNiLGVBQWUsQ0FBQ2EsUUFBUSxDQUFDUCxNQUFULEVBQUQsQ0FBcEIsQ0FBeUMseUJBQ3ZDO0FBQ0EsS0FBTVEsQ0FBQUEsSUFBSSx3QkFBR2pCLEtBQUssQ0FBQ2tCLFFBQU4sQ0FBZUwsYUFBZixDQUE4QkcsUUFBOUIsQ0FBSCxDQUFWLENBRUEsS0FBTUcsQ0FBQUEsMEJBQTBCLHdCQUFHakIsU0FBUyxDQUFDYyxRQUFRLENBQUNQLE1BQVQsRUFBRCxDQUFaLENBQWhDLENBQ0EsS0FBTVcsQ0FBQUEsNkJBQTZCLHdCQUFHbEIsU0FBUyxDQUFDVyxhQUFhLENBQUNKLE1BQWQsRUFBRCxDQUFULENBQW9DUSxJQUFJLENBQUNJLE1BQTVDLENBQW5DLENBRUE7QUFQdUMsc0JBUXZDLEdBQUlELDZCQUE2QixDQUFHRCwwQkFBcEMsQ0FBZ0UsK0NBQzlEakIsU0FBUyxDQUFDYyxRQUFRLENBQUNQLE1BQVQsRUFBRCxDQUFULENBQStCVyw2QkFBL0IsQ0FFQTtBQUg4RCxzQkFJOUQsR0FBSWYsS0FBSyxDQUFDaUIsUUFBTixDQUFlTixRQUFmLENBQUosQ0FBOEIsK0NBQzVCWCxLQUFLLENBQUNrQixjQUFOLENBQXFCUCxRQUFyQixDQUErQmQsU0FBUyxDQUFDYyxRQUFRLENBQUNQLE1BQVQsRUFBRCxDQUF4QyxFQUNELENBRkQsOEJBSUE7QUFSOEQsc0JBUzlETCxnQkFBZ0IsQ0FBQ1ksUUFBUSxDQUFDUCxNQUFULEVBQUQsQ0FBaEIsQ0FBc0NJLGFBQXRDLENBQ0QsQ0FWRCw4QkFZQTtBQXBCdUMsc0JBcUJ2QyxHQUFJLENBQUNSLEtBQUssQ0FBQ2lCLFFBQU4sQ0FBZU4sUUFBZixDQUFMLENBQStCLCtDQUM3QlgsS0FBSyxDQUFDTSxHQUFOLENBQVVLLFFBQVYsQ0FBb0JkLFNBQVMsQ0FBQ2MsUUFBUSxDQUFDUCxNQUFULEVBQUQsQ0FBN0IsRUFDRCxDQUZELDhCQUdELENBeEJELDhCQXlCRCxDQTNCRCxFQTZCQTtBQWxDdUIsc0JBbUN2Qk4sZUFBZSxDQUFDVSxhQUFhLENBQUNKLE1BQWQsRUFBRCxDQUFmLENBQTBDSSxhQUExQyxDQUNELENBRUQ7QUFDQTtBQTVEbUQsc0JBNkRuRCxNQUFPLENBQ0xYLFNBREssQ0FFTEUsZ0JBRkssQ0FBUCxDQUlEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFByaW9yaXR5UXVldWUgZnJvbSAnLi4vLi4vLi4vZGF0YS1zdHJ1Y3R1cmVzL3ByaW9yaXR5LXF1ZXVlL1ByaW9yaXR5UXVldWUnO1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFNob3J0ZXN0UGF0aHNcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkaXN0YW5jZXMgLSBzaG9ydGVzdCBkaXN0YW5jZXMgdG8gYWxsIHZlcnRpY2VzXG4gKiBAcHJvcGVydHkge09iamVjdH0gcHJldmlvdXNWZXJ0aWNlcyAtIHNob3J0ZXN0IHBhdGhzIHRvIGFsbCB2ZXJ0aWNlcy5cbiAqL1xuXG4vKipcbiAqIEltcGxlbWVudGF0aW9uIG9mIERpamtzdHJhIGFsZ29yaXRobSBvZiBmaW5kaW5nIHRoZSBzaG9ydGVzdCBwYXRocyB0byBncmFwaCBub2Rlcy5cbiAqIEBwYXJhbSB7R3JhcGh9IGdyYXBoIC0gZ3JhcGggd2UncmUgZ29pbmcgdG8gdHJhdmVyc2UuXG4gKiBAcGFyYW0ge0dyYXBoVmVydGV4fSBzdGFydFZlcnRleCAtIHRyYXZlcnNhbCBzdGFydCB2ZXJ0ZXguXG4gKiBAcmV0dXJuIHtTaG9ydGVzdFBhdGhzfVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkaWprc3RyYShncmFwaCwgc3RhcnRWZXJ0ZXgpIHtcbiAgLy8gSW5pdCBoZWxwZXIgdmFyaWFibGVzIHRoYXQgd2Ugd2lsbCBuZWVkIGZvciBEaWprc3RyYSBhbGdvcml0aG0uXG4gIGNvbnN0IGRpc3RhbmNlcyA9IHt9O1xuICBjb25zdCB2aXNpdGVkVmVydGljZXMgPSB7fTtcbiAgY29uc3QgcHJldmlvdXNWZXJ0aWNlcyA9IHt9O1xuICBjb25zdCBxdWV1ZSA9IG5ldyBQcmlvcml0eVF1ZXVlKCk7XG5cbiAgLy8gSW5pdCBhbGwgZGlzdGFuY2VzIHdpdGggaW5maW5pdHkgYXNzdW1pbmcgdGhhdCBjdXJyZW50bHkgd2UgY2FuJ3QgcmVhY2hcbiAgLy8gYW55IG9mIHRoZSB2ZXJ0aWNlcyBleGNlcHQgdGhlIHN0YXJ0IG9uZS5cbiAgZ3JhcGguZ2V0QWxsVmVydGljZXMoKS5mb3JFYWNoKCh2ZXJ0ZXgpID0+IHtcbiAgICBkaXN0YW5jZXNbdmVydGV4LmdldEtleSgpXSA9IEluZmluaXR5O1xuICAgIHByZXZpb3VzVmVydGljZXNbdmVydGV4LmdldEtleSgpXSA9IG51bGw7XG4gIH0pO1xuXG4gIC8vIFdlIGFyZSBhbHJlYWR5IGF0IHRoZSBzdGFydFZlcnRleCBzbyB0aGUgZGlzdGFuY2UgdG8gaXQgaXMgemVyby5cbiAgZGlzdGFuY2VzW3N0YXJ0VmVydGV4LmdldEtleSgpXSA9IDA7XG5cbiAgLy8gSW5pdCB2ZXJ0aWNlcyBxdWV1ZS5cbiAgcXVldWUuYWRkKHN0YXJ0VmVydGV4LCBkaXN0YW5jZXNbc3RhcnRWZXJ0ZXguZ2V0S2V5KCldKTtcblxuICAvLyBJdGVyYXRlIG92ZXIgdGhlIHByaW9yaXR5IHF1ZXVlIG9mIHZlcnRpY2VzIHVudGlsIGl0IGlzIGVtcHR5LlxuICB3aGlsZSAoIXF1ZXVlLmlzRW1wdHkoKSkge1xuICAgIC8vIEZldGNoIG5leHQgY2xvc2VzdCB2ZXJ0ZXguXG4gICAgY29uc3QgY3VycmVudFZlcnRleCA9IHF1ZXVlLnBvbGwoKTtcblxuICAgIC8vIEl0ZXJhdGUgb3ZlciBldmVyeSB1bnZpc2l0ZWQgbmVpZ2hib3Igb2YgdGhlIGN1cnJlbnQgdmVydGV4LlxuICAgIGN1cnJlbnRWZXJ0ZXguZ2V0TmVpZ2hib3JzKCkuZm9yRWFjaCgobmVpZ2hib3IpID0+IHtcbiAgICAgIC8vIERvbid0IHZpc2l0IGFscmVhZHkgdmlzaXRlZCB2ZXJ0aWNlcy5cbiAgICAgIGlmICghdmlzaXRlZFZlcnRpY2VzW25laWdoYm9yLmdldEtleSgpXSkge1xuICAgICAgICAvLyBVcGRhdGUgZGlzdGFuY2VzIHRvIGV2ZXJ5IG5laWdoYm9yIGZyb20gY3VycmVudCB2ZXJ0ZXguXG4gICAgICAgIGNvbnN0IGVkZ2UgPSBncmFwaC5maW5kRWRnZShjdXJyZW50VmVydGV4LCBuZWlnaGJvcik7XG5cbiAgICAgICAgY29uc3QgZXhpc3RpbmdEaXN0YW5jZVRvTmVpZ2hib3IgPSBkaXN0YW5jZXNbbmVpZ2hib3IuZ2V0S2V5KCldO1xuICAgICAgICBjb25zdCBkaXN0YW5jZVRvTmVpZ2hib3JGcm9tQ3VycmVudCA9IGRpc3RhbmNlc1tjdXJyZW50VmVydGV4LmdldEtleSgpXSArIGVkZ2Uud2VpZ2h0O1xuXG4gICAgICAgIC8vIElmIHdlJ3ZlIGZvdW5kIHNob3J0ZXIgcGF0aCB0byB0aGUgbmVpZ2hib3IgLSB1cGRhdGUgaXQuXG4gICAgICAgIGlmIChkaXN0YW5jZVRvTmVpZ2hib3JGcm9tQ3VycmVudCA8IGV4aXN0aW5nRGlzdGFuY2VUb05laWdoYm9yKSB7XG4gICAgICAgICAgZGlzdGFuY2VzW25laWdoYm9yLmdldEtleSgpXSA9IGRpc3RhbmNlVG9OZWlnaGJvckZyb21DdXJyZW50O1xuXG4gICAgICAgICAgLy8gQ2hhbmdlIHByaW9yaXR5IG9mIHRoZSBuZWlnaGJvciBpbiBhIHF1ZXVlIHNpbmNlIGl0IG1pZ2h0IGhhdmUgYmVjYW1lIGNsb3Nlci5cbiAgICAgICAgICBpZiAocXVldWUuaGFzVmFsdWUobmVpZ2hib3IpKSB7XG4gICAgICAgICAgICBxdWV1ZS5jaGFuZ2VQcmlvcml0eShuZWlnaGJvciwgZGlzdGFuY2VzW25laWdoYm9yLmdldEtleSgpXSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gUmVtZW1iZXIgcHJldmlvdXMgY2xvc2VzdCB2ZXJ0ZXguXG4gICAgICAgICAgcHJldmlvdXNWZXJ0aWNlc1tuZWlnaGJvci5nZXRLZXkoKV0gPSBjdXJyZW50VmVydGV4O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQWRkIG5laWdoYm9yIHRvIHRoZSBxdWV1ZSBmb3IgZnVydGhlciB2aXNpdGluZy5cbiAgICAgICAgaWYgKCFxdWV1ZS5oYXNWYWx1ZShuZWlnaGJvcikpIHtcbiAgICAgICAgICBxdWV1ZS5hZGQobmVpZ2hib3IsIGRpc3RhbmNlc1tuZWlnaGJvci5nZXRLZXkoKV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgY3VycmVudCB2ZXJ0ZXggdG8gdmlzaXRlZCBvbmVzIHRvIGF2b2lkIHZpc2l0aW5nIGl0IGFnYWluIGxhdGVyLlxuICAgIHZpc2l0ZWRWZXJ0aWNlc1tjdXJyZW50VmVydGV4LmdldEtleSgpXSA9IGN1cnJlbnRWZXJ0ZXg7XG4gIH1cblxuICAvLyBSZXR1cm4gdGhlIHNldCBvZiBzaG9ydGVzdCBkaXN0YW5jZXMgdG8gYWxsIHZlcnRpY2VzIGFuZCB0aGUgc2V0IG9mXG4gIC8vIHNob3J0ZXN0IHBhdGhzIHRvIGFsbCB2ZXJ0aWNlcyBpbiBhIGdyYXBoLlxuICByZXR1cm4ge1xuICAgIGRpc3RhbmNlcyxcbiAgICBwcmV2aW91c1ZlcnRpY2VzLFxuICB9O1xufVxuIl19