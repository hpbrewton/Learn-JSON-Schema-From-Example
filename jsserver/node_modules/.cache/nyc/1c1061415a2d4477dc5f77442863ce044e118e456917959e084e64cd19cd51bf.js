var cov_2hxvekn66n=function(){var path="/Users/hb/latlib/jsserver/javascript-algorithms/src/data-structures/doubly-linked-list/DoublyLinkedList.js";var hash="6a31edc6aa01818604d1e28c951c56a43ab45844";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/hb/latlib/jsserver/javascript-algorithms/src/data-structures/doubly-linked-list/DoublyLinkedList.js",statementMap:{"0":{start:{line:10,column:4},end:{line:10,column:21}},"1":{start:{line:13,column:4},end:{line:13,column:21}},"2":{start:{line:15,column:4},end:{line:15,column:54}},"3":{start:{line:24,column:20},end:{line:24,column:62}},"4":{start:{line:29,column:4},end:{line:31,column:5}},"5":{start:{line:30,column:6},end:{line:30,column:35}},"6":{start:{line:32,column:4},end:{line:32,column:24}},"7":{start:{line:35,column:4},end:{line:37,column:5}},"8":{start:{line:36,column:6},end:{line:36,column:26}},"9":{start:{line:39,column:4},end:{line:39,column:16}},"10":{start:{line:47,column:20},end:{line:47,column:51}},"11":{start:{line:50,column:4},end:{line:55,column:5}},"12":{start:{line:51,column:6},end:{line:51,column:26}},"13":{start:{line:52,column:6},end:{line:52,column:26}},"14":{start:{line:54,column:6},end:{line:54,column:18}},"15":{start:{line:58,column:4},end:{line:58,column:29}},"16":{start:{line:61,column:4},end:{line:61,column:33}},"17":{start:{line:64,column:4},end:{line:64,column:24}},"18":{start:{line:66,column:4},end:{line:66,column:16}},"19":{start:{line:74,column:4},end:{line:76,column:5}},"20":{start:{line:75,column:6},end:{line:75,column:18}},"21":{start:{line:78,column:22},end:{line:78,column:26}},"22":{start:{line:79,column:22},end:{line:79,column:31}},"23":{start:{line:81,column:4},end:{line:118,column:5}},"24":{start:{line:82,column:6},end:{line:115,column:7}},"25":{start:{line:83,column:8},end:{line:83,column:34}},"26":{start:{line:85,column:8},end:{line:114,column:9}},"27":{start:{line:89,column:10},end:{line:89,column:39}},"28":{start:{line:92,column:10},end:{line:94,column:11}},"29":{start:{line:93,column:12},end:{line:93,column:38}},"30":{start:{line:98,column:10},end:{line:100,column:11}},"31":{start:{line:99,column:12},end:{line:99,column:29}},"32":{start:{line:101,column:15},end:{line:114,column:9}},"33":{start:{line:105,column:10},end:{line:105,column:43}},"34":{start:{line:106,column:10},end:{line:106,column:32}},"35":{start:{line:109,column:31},end:{line:109,column:51}},"36":{start:{line:110,column:27},end:{line:110,column:43}},"37":{start:{line:112,column:10},end:{line:112,column:39}},"38":{start:{line:113,column:10},end:{line:113,column:43}},"39":{start:{line:117,column:6},end:{line:117,column:37}},"40":{start:{line:120,column:4},end:{line:120,column:23}},"41":{start:{line:130,column:4},end:{line:132,column:5}},"42":{start:{line:131,column:6},end:{line:131,column:18}},"43":{start:{line:134,column:22},end:{line:134,column:31}},"44":{start:{line:136,column:4},end:{line:148,column:5}},"45":{start:{line:138,column:6},end:{line:140,column:7}},"46":{start:{line:139,column:8},end:{line:139,column:27}},"47":{start:{line:143,column:6},end:{line:145,column:7}},"48":{start:{line:144,column:8},end:{line:144,column:27}},"49":{start:{line:147,column:6},end:{line:147,column:37}},"50":{start:{line:150,column:4},end:{line:150,column:16}},"51":{start:{line:157,column:4},end:{line:160,column:5}},"52":{start:{line:159,column:6},end:{line:159,column:18}},"53":{start:{line:162,column:4},end:{line:169,column:5}},"54":{start:{line:164,column:26},end:{line:164,column:35}},"55":{start:{line:165,column:6},end:{line:165,column:23}},"56":{start:{line:166,column:6},end:{line:166,column:23}},"57":{start:{line:168,column:6},end:{line:168,column:25}},"58":{start:{line:172,column:24},end:{line:172,column:33}},"59":{start:{line:174,column:4},end:{line:174,column:35}},"60":{start:{line:175,column:4},end:{line:175,column:26}},"61":{start:{line:177,column:4},end:{line:177,column:23}},"62":{start:{line:184,column:4},end:{line:186,column:5}},"63":{start:{line:185,column:6},end:{line:185,column:18}},"64":{start:{line:188,column:24},end:{line:188,column:33}},"65":{start:{line:190,column:4},end:{line:196,column:5}},"66":{start:{line:191,column:6},end:{line:191,column:33}},"67":{start:{line:192,column:6},end:{line:192,column:32}},"68":{start:{line:194,column:6},end:{line:194,column:23}},"69":{start:{line:195,column:6},end:{line:195,column:23}},"70":{start:{line:198,column:4},end:{line:198,column:23}},"71":{start:{line:205,column:18},end:{line:205,column:20}},"72":{start:{line:207,column:22},end:{line:207,column:31}},"73":{start:{line:208,column:4},end:{line:211,column:5}},"74":{start:{line:209,column:6},end:{line:209,column:30}},"75":{start:{line:210,column:6},end:{line:210,column:37}},"76":{start:{line:213,column:4},end:{line:213,column:17}},"77":{start:{line:221,column:4},end:{line:221,column:48}},"78":{start:{line:221,column:28},end:{line:221,column:46}},"79":{start:{line:223,column:4},end:{line:223,column:16}},"80":{start:{line:231,column:4},end:{line:231,column:74}},"81":{start:{line:231,column:38},end:{line:231,column:61}},"82":{start:{line:239,column:19},end:{line:239,column:28}},"83":{start:{line:240,column:19},end:{line:240,column:23}},"84":{start:{line:241,column:19},end:{line:241,column:23}},"85":{start:{line:243,column:4},end:{line:255,column:5}},"86":{start:{line:245,column:6},end:{line:245,column:31}},"87":{start:{line:246,column:6},end:{line:246,column:35}},"88":{start:{line:249,column:6},end:{line:249,column:31}},"89":{start:{line:250,column:6},end:{line:250,column:35}},"90":{start:{line:253,column:6},end:{line:253,column:26}},"91":{start:{line:254,column:6},end:{line:254,column:26}},"92":{start:{line:258,column:4},end:{line:258,column:26}},"93":{start:{line:259,column:4},end:{line:259,column:25}},"94":{start:{line:261,column:4},end:{line:261,column:16}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:8,column:2},end:{line:8,column:3}},loc:{start:{line:8,column:34},end:{line:16,column:3}},line:8},"1":{name:"(anonymous_1)",decl:{start:{line:22,column:2},end:{line:22,column:3}},loc:{start:{line:22,column:17},end:{line:40,column:3}},line:22},"2":{name:"(anonymous_2)",decl:{start:{line:46,column:2},end:{line:46,column:3}},loc:{start:{line:46,column:16},end:{line:67,column:3}},line:46},"3":{name:"(anonymous_3)",decl:{start:{line:73,column:2},end:{line:73,column:3}},loc:{start:{line:73,column:16},end:{line:121,column:3}},line:73},"4":{name:"(anonymous_4)",decl:{start:{line:129,column:2},end:{line:129,column:3}},loc:{start:{line:129,column:52},end:{line:151,column:3}},line:129},"5":{name:"(anonymous_5)",decl:{start:{line:156,column:2},end:{line:156,column:3}},loc:{start:{line:156,column:15},end:{line:178,column:3}},line:156},"6":{name:"(anonymous_6)",decl:{start:{line:183,column:2},end:{line:183,column:3}},loc:{start:{line:183,column:15},end:{line:199,column:3}},line:183},"7":{name:"(anonymous_7)",decl:{start:{line:204,column:2},end:{line:204,column:3}},loc:{start:{line:204,column:12},end:{line:214,column:3}},line:204},"8":{name:"(anonymous_8)",decl:{start:{line:220,column:2},end:{line:220,column:3}},loc:{start:{line:220,column:20},end:{line:224,column:3}},line:220},"9":{name:"(anonymous_9)",decl:{start:{line:221,column:19},end:{line:221,column:20}},loc:{start:{line:221,column:28},end:{line:221,column:46}},line:221},"10":{name:"(anonymous_10)",decl:{start:{line:230,column:2},end:{line:230,column:3}},loc:{start:{line:230,column:21},end:{line:232,column:3}},line:230},"11":{name:"(anonymous_11)",decl:{start:{line:231,column:30},end:{line:231,column:31}},loc:{start:{line:231,column:38},end:{line:231,column:61}},line:231},"12":{name:"(anonymous_12)",decl:{start:{line:238,column:2},end:{line:238,column:3}},loc:{start:{line:238,column:12},end:{line:262,column:3}},line:238}},branchMap:{"0":{loc:{start:{line:29,column:4},end:{line:31,column:5}},type:"if",locations:[{start:{line:29,column:4},end:{line:31,column:5}},{start:{line:29,column:4},end:{line:31,column:5}}],line:29},"1":{loc:{start:{line:35,column:4},end:{line:37,column:5}},type:"if",locations:[{start:{line:35,column:4},end:{line:37,column:5}},{start:{line:35,column:4},end:{line:37,column:5}}],line:35},"2":{loc:{start:{line:50,column:4},end:{line:55,column:5}},type:"if",locations:[{start:{line:50,column:4},end:{line:55,column:5}},{start:{line:50,column:4},end:{line:55,column:5}}],line:50},"3":{loc:{start:{line:74,column:4},end:{line:76,column:5}},type:"if",locations:[{start:{line:74,column:4},end:{line:76,column:5}},{start:{line:74,column:4},end:{line:76,column:5}}],line:74},"4":{loc:{start:{line:82,column:6},end:{line:115,column:7}},type:"if",locations:[{start:{line:82,column:6},end:{line:115,column:7}},{start:{line:82,column:6},end:{line:115,column:7}}],line:82},"5":{loc:{start:{line:85,column:8},end:{line:114,column:9}},type:"if",locations:[{start:{line:85,column:8},end:{line:114,column:9}},{start:{line:85,column:8},end:{line:114,column:9}}],line:85},"6":{loc:{start:{line:92,column:10},end:{line:94,column:11}},type:"if",locations:[{start:{line:92,column:10},end:{line:94,column:11}},{start:{line:92,column:10},end:{line:94,column:11}}],line:92},"7":{loc:{start:{line:98,column:10},end:{line:100,column:11}},type:"if",locations:[{start:{line:98,column:10},end:{line:100,column:11}},{start:{line:98,column:10},end:{line:100,column:11}}],line:98},"8":{loc:{start:{line:101,column:15},end:{line:114,column:9}},type:"if",locations:[{start:{line:101,column:15},end:{line:114,column:9}},{start:{line:101,column:15},end:{line:114,column:9}}],line:101},"9":{loc:{start:{line:129,column:9},end:{line:129,column:26}},type:"default-arg",locations:[{start:{line:129,column:17},end:{line:129,column:26}}],line:129},"10":{loc:{start:{line:129,column:28},end:{line:129,column:48}},type:"default-arg",locations:[{start:{line:129,column:39},end:{line:129,column:48}}],line:129},"11":{loc:{start:{line:130,column:4},end:{line:132,column:5}},type:"if",locations:[{start:{line:130,column:4},end:{line:132,column:5}},{start:{line:130,column:4},end:{line:132,column:5}}],line:130},"12":{loc:{start:{line:138,column:6},end:{line:140,column:7}},type:"if",locations:[{start:{line:138,column:6},end:{line:140,column:7}},{start:{line:138,column:6},end:{line:140,column:7}}],line:138},"13":{loc:{start:{line:138,column:10},end:{line:138,column:49}},type:"binary-expr",locations:[{start:{line:138,column:10},end:{line:138,column:18}},{start:{line:138,column:22},end:{line:138,column:49}}],line:138},"14":{loc:{start:{line:143,column:6},end:{line:145,column:7}},type:"if",locations:[{start:{line:143,column:6},end:{line:145,column:7}},{start:{line:143,column:6},end:{line:145,column:7}}],line:143},"15":{loc:{start:{line:143,column:10},end:{line:143,column:77}},type:"binary-expr",locations:[{start:{line:143,column:10},end:{line:143,column:29}},{start:{line:143,column:33},end:{line:143,column:77}}],line:143},"16":{loc:{start:{line:157,column:4},end:{line:160,column:5}},type:"if",locations:[{start:{line:157,column:4},end:{line:160,column:5}},{start:{line:157,column:4},end:{line:160,column:5}}],line:157},"17":{loc:{start:{line:162,column:4},end:{line:169,column:5}},type:"if",locations:[{start:{line:162,column:4},end:{line:169,column:5}},{start:{line:162,column:4},end:{line:169,column:5}}],line:162},"18":{loc:{start:{line:184,column:4},end:{line:186,column:5}},type:"if",locations:[{start:{line:184,column:4},end:{line:186,column:5}},{start:{line:184,column:4},end:{line:186,column:5}}],line:184},"19":{loc:{start:{line:190,column:4},end:{line:196,column:5}},type:"if",locations:[{start:{line:190,column:4},end:{line:196,column:5}},{start:{line:190,column:4},end:{line:196,column:5}}],line:190}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0],"10":[0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"6a31edc6aa01818604d1e28c951c56a43ab45844"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();import DoublyLinkedListNode from'./DoublyLinkedListNode';import Comparator from'../../utils/comparator/Comparator';export default class DoublyLinkedList{/**
   * @param {Function} [comparatorFunction]
   */constructor(comparatorFunction){cov_2hxvekn66n.f[0]++;cov_2hxvekn66n.s[0]++;/** @var DoublyLinkedListNode */this.head=null;/** @var DoublyLinkedListNode */cov_2hxvekn66n.s[1]++;this.tail=null;cov_2hxvekn66n.s[2]++;this.compare=new Comparator(comparatorFunction);}/**
   * @param {*} value
   * @return {DoublyLinkedList}
   */prepend(value){cov_2hxvekn66n.f[1]++;// Make new node to be a head.
const newNode=(cov_2hxvekn66n.s[3]++,new DoublyLinkedListNode(value,this.head));// If there is head, then it won't be head anymore.
// Therefore, make its previous reference to be new node (new head).
// Then mark the new node as head.
cov_2hxvekn66n.s[4]++;if(this.head){cov_2hxvekn66n.b[0][0]++;cov_2hxvekn66n.s[5]++;this.head.previous=newNode;}else{cov_2hxvekn66n.b[0][1]++;}cov_2hxvekn66n.s[6]++;this.head=newNode;// If there is no tail yet let's make new node a tail.
cov_2hxvekn66n.s[7]++;if(!this.tail){cov_2hxvekn66n.b[1][0]++;cov_2hxvekn66n.s[8]++;this.tail=newNode;}else{cov_2hxvekn66n.b[1][1]++;}cov_2hxvekn66n.s[9]++;return this;}/**
   * @param {*} value
   * @return {DoublyLinkedList}
   */append(value){cov_2hxvekn66n.f[2]++;const newNode=(cov_2hxvekn66n.s[10]++,new DoublyLinkedListNode(value));// If there is no head yet let's make new node a head.
cov_2hxvekn66n.s[11]++;if(!this.head){cov_2hxvekn66n.b[2][0]++;cov_2hxvekn66n.s[12]++;this.head=newNode;cov_2hxvekn66n.s[13]++;this.tail=newNode;cov_2hxvekn66n.s[14]++;return this;}else{cov_2hxvekn66n.b[2][1]++;}// Attach new node to the end of linked list.
cov_2hxvekn66n.s[15]++;this.tail.next=newNode;// Attach current tail to the new node's previous reference.
cov_2hxvekn66n.s[16]++;newNode.previous=this.tail;// Set new node to be the tail of linked list.
cov_2hxvekn66n.s[17]++;this.tail=newNode;cov_2hxvekn66n.s[18]++;return this;}/**
   * @param {*} value
   * @return {DoublyLinkedListNode}
   */delete(value){cov_2hxvekn66n.f[3]++;cov_2hxvekn66n.s[19]++;if(!this.head){cov_2hxvekn66n.b[3][0]++;cov_2hxvekn66n.s[20]++;return null;}else{cov_2hxvekn66n.b[3][1]++;}let deletedNode=(cov_2hxvekn66n.s[21]++,null);let currentNode=(cov_2hxvekn66n.s[22]++,this.head);cov_2hxvekn66n.s[23]++;while(currentNode){cov_2hxvekn66n.s[24]++;if(this.compare.equal(currentNode.value,value)){cov_2hxvekn66n.b[4][0]++;cov_2hxvekn66n.s[25]++;deletedNode=currentNode;cov_2hxvekn66n.s[26]++;if(deletedNode===this.head){cov_2hxvekn66n.b[5][0]++;cov_2hxvekn66n.s[27]++;// If HEAD is going to be deleted...
// Set head to second node, which will become new head.
this.head=deletedNode.next;// Set new head's previous to null.
cov_2hxvekn66n.s[28]++;if(this.head){cov_2hxvekn66n.b[6][0]++;cov_2hxvekn66n.s[29]++;this.head.previous=null;}else{cov_2hxvekn66n.b[6][1]++;}// If all the nodes in list has same value that is passed as argument
// then all nodes will get deleted, therefore tail needs to be updated.
cov_2hxvekn66n.s[30]++;if(deletedNode===this.tail){cov_2hxvekn66n.b[7][0]++;cov_2hxvekn66n.s[31]++;this.tail=null;}else{cov_2hxvekn66n.b[7][1]++;}}else{cov_2hxvekn66n.b[5][1]++;cov_2hxvekn66n.s[32]++;if(deletedNode===this.tail){cov_2hxvekn66n.b[8][0]++;cov_2hxvekn66n.s[33]++;// If TAIL is going to be deleted...
// Set tail to second last node, which will become new tail.
this.tail=deletedNode.previous;cov_2hxvekn66n.s[34]++;this.tail.next=null;}else{cov_2hxvekn66n.b[8][1]++;// If MIDDLE node is going to be deleted...
const previousNode=(cov_2hxvekn66n.s[35]++,deletedNode.previous);const nextNode=(cov_2hxvekn66n.s[36]++,deletedNode.next);cov_2hxvekn66n.s[37]++;previousNode.next=nextNode;cov_2hxvekn66n.s[38]++;nextNode.previous=previousNode;}}}else{cov_2hxvekn66n.b[4][1]++;}cov_2hxvekn66n.s[39]++;currentNode=currentNode.next;}cov_2hxvekn66n.s[40]++;return deletedNode;}/**
   * @param {Object} findParams
   * @param {*} findParams.value
   * @param {function} [findParams.callback]
   * @return {DoublyLinkedListNode}
   */find({value=(cov_2hxvekn66n.b[9][0]++,undefined),callback=(cov_2hxvekn66n.b[10][0]++,undefined)}){cov_2hxvekn66n.f[4]++;cov_2hxvekn66n.s[41]++;if(!this.head){cov_2hxvekn66n.b[11][0]++;cov_2hxvekn66n.s[42]++;return null;}else{cov_2hxvekn66n.b[11][1]++;}let currentNode=(cov_2hxvekn66n.s[43]++,this.head);cov_2hxvekn66n.s[44]++;while(currentNode){cov_2hxvekn66n.s[45]++;// If callback is specified then try to find node by callback.
if((cov_2hxvekn66n.b[13][0]++,callback)&&(cov_2hxvekn66n.b[13][1]++,callback(currentNode.value))){cov_2hxvekn66n.b[12][0]++;cov_2hxvekn66n.s[46]++;return currentNode;}else{cov_2hxvekn66n.b[12][1]++;}// If value is specified then try to compare by value..
cov_2hxvekn66n.s[47]++;if((cov_2hxvekn66n.b[15][0]++,value!==undefined)&&(cov_2hxvekn66n.b[15][1]++,this.compare.equal(currentNode.value,value))){cov_2hxvekn66n.b[14][0]++;cov_2hxvekn66n.s[48]++;return currentNode;}else{cov_2hxvekn66n.b[14][1]++;}cov_2hxvekn66n.s[49]++;currentNode=currentNode.next;}cov_2hxvekn66n.s[50]++;return null;}/**
   * @return {DoublyLinkedListNode}
   */deleteTail(){cov_2hxvekn66n.f[5]++;cov_2hxvekn66n.s[51]++;if(!this.tail){cov_2hxvekn66n.b[16][0]++;cov_2hxvekn66n.s[52]++;// No tail to delete.
return null;}else{cov_2hxvekn66n.b[16][1]++;}cov_2hxvekn66n.s[53]++;if(this.head===this.tail){cov_2hxvekn66n.b[17][0]++;// There is only one node in linked list.
const deletedTail=(cov_2hxvekn66n.s[54]++,this.tail);cov_2hxvekn66n.s[55]++;this.head=null;cov_2hxvekn66n.s[56]++;this.tail=null;cov_2hxvekn66n.s[57]++;return deletedTail;}else{cov_2hxvekn66n.b[17][1]++;}// If there are many nodes in linked list...
const deletedTail=(cov_2hxvekn66n.s[58]++,this.tail);cov_2hxvekn66n.s[59]++;this.tail=this.tail.previous;cov_2hxvekn66n.s[60]++;this.tail.next=null;cov_2hxvekn66n.s[61]++;return deletedTail;}/**
   * @return {DoublyLinkedListNode}
   */deleteHead(){cov_2hxvekn66n.f[6]++;cov_2hxvekn66n.s[62]++;if(!this.head){cov_2hxvekn66n.b[18][0]++;cov_2hxvekn66n.s[63]++;return null;}else{cov_2hxvekn66n.b[18][1]++;}const deletedHead=(cov_2hxvekn66n.s[64]++,this.head);cov_2hxvekn66n.s[65]++;if(this.head.next){cov_2hxvekn66n.b[19][0]++;cov_2hxvekn66n.s[66]++;this.head=this.head.next;cov_2hxvekn66n.s[67]++;this.head.previous=null;}else{cov_2hxvekn66n.b[19][1]++;cov_2hxvekn66n.s[68]++;this.head=null;cov_2hxvekn66n.s[69]++;this.tail=null;}cov_2hxvekn66n.s[70]++;return deletedHead;}/**
   * @return {DoublyLinkedListNode[]}
   */toArray(){cov_2hxvekn66n.f[7]++;const nodes=(cov_2hxvekn66n.s[71]++,[]);let currentNode=(cov_2hxvekn66n.s[72]++,this.head);cov_2hxvekn66n.s[73]++;while(currentNode){cov_2hxvekn66n.s[74]++;nodes.push(currentNode);cov_2hxvekn66n.s[75]++;currentNode=currentNode.next;}cov_2hxvekn66n.s[76]++;return nodes;}/**
   * @param {*[]} values - Array of values that need to be converted to linked list.
   * @return {DoublyLinkedList}
   */fromArray(values){cov_2hxvekn66n.f[8]++;cov_2hxvekn66n.s[77]++;values.forEach(value=>{cov_2hxvekn66n.f[9]++;cov_2hxvekn66n.s[78]++;return this.append(value);});cov_2hxvekn66n.s[79]++;return this;}/**
   * @param {function} [callback]
   * @return {string}
   */toString(callback){cov_2hxvekn66n.f[10]++;cov_2hxvekn66n.s[80]++;return this.toArray().map(node=>{cov_2hxvekn66n.f[11]++;cov_2hxvekn66n.s[81]++;return node.toString(callback);}).toString();}/**
   * Reverse a linked list.
   * @returns {DoublyLinkedList}
   */reverse(){cov_2hxvekn66n.f[12]++;let currNode=(cov_2hxvekn66n.s[82]++,this.head);let prevNode=(cov_2hxvekn66n.s[83]++,null);let nextNode=(cov_2hxvekn66n.s[84]++,null);cov_2hxvekn66n.s[85]++;while(currNode){cov_2hxvekn66n.s[86]++;// Store next node.
nextNode=currNode.next;cov_2hxvekn66n.s[87]++;prevNode=currNode.previous;// Change next node of the current node so it would link to previous node.
cov_2hxvekn66n.s[88]++;currNode.next=prevNode;cov_2hxvekn66n.s[89]++;currNode.previous=nextNode;// Move prevNode and currNode nodes one step forward.
cov_2hxvekn66n.s[90]++;prevNode=currNode;cov_2hxvekn66n.s[91]++;currNode=nextNode;}// Reset head and tail.
cov_2hxvekn66n.s[92]++;this.tail=this.head;cov_2hxvekn66n.s[93]++;this.head=prevNode;cov_2hxvekn66n.s[94]++;return this;}}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,