var cov_qimfipz6b=function(){var path="/Users/hb/latlib/jsserver/javascript-algorithms/src/algorithms/graph/floyd-warshall/floydWarshall.js";var hash="561498cd055fe1a42462b10cb6145849d3fa9d64";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/hb/latlib/jsserver/javascript-algorithms/src/algorithms/graph/floyd-warshall/floydWarshall.js",statementMap:{"0":{start:{line:7,column:19},end:{line:7,column:41}},"1":{start:{line:11,column:23},end:{line:13,column:4}},"2":{start:{line:12,column:4},end:{line:12,column:45}},"3":{start:{line:17,column:20},end:{line:19,column:4}},"4":{start:{line:18,column:4},end:{line:18,column:49}},"5":{start:{line:23,column:2},end:{line:42,column:5}},"6":{start:{line:24,column:4},end:{line:41,column:7}},"7":{start:{line:25,column:6},end:{line:40,column:7}},"8":{start:{line:27,column:8},end:{line:27,column:44}},"9":{start:{line:30,column:21},end:{line:30,column:59}},"10":{start:{line:32,column:8},end:{line:39,column:9}},"11":{start:{line:35,column:10},end:{line:35,column:56}},"12":{start:{line:36,column:10},end:{line:36,column:59}},"13":{start:{line:38,column:10},end:{line:38,column:53}},"14":{start:{line:49,column:2},end:{line:67,column:5}},"15":{start:{line:51,column:4},end:{line:66,column:7}},"16":{start:{line:53,column:6},end:{line:65,column:9}},"17":{start:{line:58,column:30},end:{line:58,column:99}},"18":{start:{line:60,column:8},end:{line:64,column:9}},"19":{start:{line:62,column:10},end:{line:62,column:58}},"20":{start:{line:63,column:10},end:{line:63,column:60}},"21":{start:{line:71,column:2},end:{line:71,column:37}}},fnMap:{"0":{name:"floydWarshall",decl:{start:{line:5,column:24},end:{line:5,column:37}},loc:{start:{line:5,column:45},end:{line:72,column:1}},line:5},"1":{name:"(anonymous_1)",decl:{start:{line:11,column:61},end:{line:11,column:62}},loc:{start:{line:11,column:67},end:{line:13,column:3}},line:11},"2":{name:"(anonymous_2)",decl:{start:{line:17,column:58},end:{line:17,column:59}},loc:{start:{line:17,column:64},end:{line:19,column:3}},line:17},"3":{name:"(anonymous_3)",decl:{start:{line:23,column:19},end:{line:23,column:20}},loc:{start:{line:23,column:48},end:{line:42,column:3}},line:23},"4":{name:"(anonymous_4)",decl:{start:{line:24,column:21},end:{line:24,column:22}},loc:{start:{line:24,column:46},end:{line:41,column:5}},line:24},"5":{name:"(anonymous_5)",decl:{start:{line:49,column:19},end:{line:49,column:20}},loc:{start:{line:49,column:50},end:{line:67,column:3}},line:49},"6":{name:"(anonymous_6)",decl:{start:{line:51,column:21},end:{line:51,column:22}},loc:{start:{line:51,column:50},end:{line:66,column:5}},line:51},"7":{name:"(anonymous_7)",decl:{start:{line:53,column:23},end:{line:53,column:24}},loc:{start:{line:53,column:48},end:{line:65,column:7}},line:53}},branchMap:{"0":{loc:{start:{line:25,column:6},end:{line:40,column:7}},type:"if",locations:[{start:{line:25,column:6},end:{line:40,column:7}},{start:{line:25,column:6},end:{line:40,column:7}}],line:25},"1":{loc:{start:{line:32,column:8},end:{line:39,column:9}},type:"if",locations:[{start:{line:32,column:8},end:{line:39,column:9}},{start:{line:32,column:8},end:{line:39,column:9}}],line:32},"2":{loc:{start:{line:60,column:8},end:{line:64,column:9}},type:"if",locations:[{start:{line:60,column:8},end:{line:64,column:9}},{start:{line:60,column:8},end:{line:64,column:9}}],line:60}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},b:{"0":[0,0],"1":[0,0],"2":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"561498cd055fe1a42462b10cb6145849d3fa9d64"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();/**
 * @param {Graph} graph
 * @return {{distances: number[][], nextVertices: GraphVertex[][]}}
 */export default function floydWarshall(graph){cov_qimfipz6b.f[0]++;// Get all graph vertices.
const vertices=(cov_qimfipz6b.s[0]++,graph.getAllVertices());// Init previous vertices matrix with nulls meaning that there are no
// previous vertices exist that will give us shortest path.
const nextVertices=(cov_qimfipz6b.s[1]++,Array(vertices.length).fill(null).map(()=>{cov_qimfipz6b.f[1]++;cov_qimfipz6b.s[2]++;return Array(vertices.length).fill(null);}));// Init distances matrix with Infinities meaning there are no paths
// between vertices exist so far.
const distances=(cov_qimfipz6b.s[3]++,Array(vertices.length).fill(null).map(()=>{cov_qimfipz6b.f[2]++;cov_qimfipz6b.s[4]++;return Array(vertices.length).fill(Infinity);}));// Init distance matrix with the distance we already now (from existing edges).
// And also init previous vertices from the edges.
cov_qimfipz6b.s[5]++;vertices.forEach((startVertex,startIndex)=>{cov_qimfipz6b.f[3]++;cov_qimfipz6b.s[6]++;vertices.forEach((endVertex,endIndex)=>{cov_qimfipz6b.f[4]++;cov_qimfipz6b.s[7]++;if(startVertex===endVertex){cov_qimfipz6b.b[0][0]++;cov_qimfipz6b.s[8]++;// Distance to the vertex itself is 0.
distances[startIndex][endIndex]=0;}else{cov_qimfipz6b.b[0][1]++;// Find edge between the start and end vertices.
const edge=(cov_qimfipz6b.s[9]++,graph.findEdge(startVertex,endVertex));cov_qimfipz6b.s[10]++;if(edge){cov_qimfipz6b.b[1][0]++;cov_qimfipz6b.s[11]++;// There is an edge from vertex with startIndex to vertex with endIndex.
// Save distance and previous vertex.
distances[startIndex][endIndex]=edge.weight;cov_qimfipz6b.s[12]++;nextVertices[startIndex][endIndex]=startVertex;}else{cov_qimfipz6b.b[1][1]++;cov_qimfipz6b.s[13]++;distances[startIndex][endIndex]=Infinity;}}});});// Now let's go to the core of the algorithm.
// Let's all pair of vertices (from start to end ones) and try to check if there
// is a shorter path exists between them via middle vertex. Middle vertex may also
// be one of the graph vertices. As you may see now we're going to have three
// loops over all graph vertices: for start, end and middle vertices.
cov_qimfipz6b.s[14]++;vertices.forEach((middleVertex,middleIndex)=>{cov_qimfipz6b.f[5]++;cov_qimfipz6b.s[15]++;// Path starts from startVertex with startIndex.
vertices.forEach((startVertex,startIndex)=>{cov_qimfipz6b.f[6]++;cov_qimfipz6b.s[16]++;// Path ends to endVertex with endIndex.
vertices.forEach((endVertex,endIndex)=>{cov_qimfipz6b.f[7]++;// Compare existing distance from startVertex to endVertex, with distance
// from startVertex to endVertex but via middleVertex.
// Save the shortest distance and previous vertex that allows
// us to have this shortest distance.
const distViaMiddle=(cov_qimfipz6b.s[17]++,distances[startIndex][middleIndex]+distances[middleIndex][endIndex]);cov_qimfipz6b.s[18]++;if(distances[startIndex][endIndex]>distViaMiddle){cov_qimfipz6b.b[2][0]++;cov_qimfipz6b.s[19]++;// We've found a shortest pass via middle vertex.
distances[startIndex][endIndex]=distViaMiddle;cov_qimfipz6b.s[20]++;nextVertices[startIndex][endIndex]=middleVertex;}else{cov_qimfipz6b.b[2][1]++;}});});});// Shortest distance from x to y: distance[x][y].
// Next vertex after x one in path from x to y: nextVertices[x][y].
cov_qimfipz6b.s[21]++;return{distances,nextVertices};}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9oYi9sYXRsaWIvanNzZXJ2ZXIvamF2YXNjcmlwdC1hbGdvcml0aG1zL3NyYy9hbGdvcml0aG1zL2dyYXBoL2Zsb3lkLXdhcnNoYWxsL2Zsb3lkV2Fyc2hhbGwuanMiXSwibmFtZXMiOlsiZmxveWRXYXJzaGFsbCIsImdyYXBoIiwidmVydGljZXMiLCJnZXRBbGxWZXJ0aWNlcyIsIm5leHRWZXJ0aWNlcyIsIkFycmF5IiwibGVuZ3RoIiwiZmlsbCIsIm1hcCIsImRpc3RhbmNlcyIsIkluZmluaXR5IiwiZm9yRWFjaCIsInN0YXJ0VmVydGV4Iiwic3RhcnRJbmRleCIsImVuZFZlcnRleCIsImVuZEluZGV4IiwiZWRnZSIsImZpbmRFZGdlIiwid2VpZ2h0IiwibWlkZGxlVmVydGV4IiwibWlkZGxlSW5kZXgiLCJkaXN0VmlhTWlkZGxlIl0sIm1hcHBpbmdzIjoia3lIQUFBOzs7R0FJQSxjQUFlLFNBQVNBLENBQUFBLGFBQVQsQ0FBdUJDLEtBQXZCLENBQThCLHNCQUMzQztBQUNBLEtBQU1DLENBQUFBLFFBQVEsdUJBQUdELEtBQUssQ0FBQ0UsY0FBTixFQUFILENBQWQsQ0FFQTtBQUNBO0FBQ0EsS0FBTUMsQ0FBQUEsWUFBWSx1QkFBR0MsS0FBSyxDQUFDSCxRQUFRLENBQUNJLE1BQVYsQ0FBTCxDQUF1QkMsSUFBdkIsQ0FBNEIsSUFBNUIsRUFBa0NDLEdBQWxDLENBQXNDLElBQU0sMkNBQy9ELE1BQU9ILENBQUFBLEtBQUssQ0FBQ0gsUUFBUSxDQUFDSSxNQUFWLENBQUwsQ0FBdUJDLElBQXZCLENBQTRCLElBQTVCLENBQVAsQ0FDRCxDQUZvQixDQUFILENBQWxCLENBSUE7QUFDQTtBQUNBLEtBQU1FLENBQUFBLFNBQVMsdUJBQUdKLEtBQUssQ0FBQ0gsUUFBUSxDQUFDSSxNQUFWLENBQUwsQ0FBdUJDLElBQXZCLENBQTRCLElBQTVCLEVBQWtDQyxHQUFsQyxDQUFzQyxJQUFNLDJDQUM1RCxNQUFPSCxDQUFBQSxLQUFLLENBQUNILFFBQVEsQ0FBQ0ksTUFBVixDQUFMLENBQXVCQyxJQUF2QixDQUE0QkcsUUFBNUIsQ0FBUCxDQUNELENBRmlCLENBQUgsQ0FBZixDQUlBO0FBQ0E7QUFqQjJDLHFCQWtCM0NSLFFBQVEsQ0FBQ1MsT0FBVCxDQUFpQixDQUFDQyxXQUFELENBQWNDLFVBQWQsR0FBNkIsMkNBQzVDWCxRQUFRLENBQUNTLE9BQVQsQ0FBaUIsQ0FBQ0csU0FBRCxDQUFZQyxRQUFaLEdBQXlCLDJDQUN4QyxHQUFJSCxXQUFXLEdBQUtFLFNBQXBCLENBQStCLDhDQUM3QjtBQUNBTCxTQUFTLENBQUNJLFVBQUQsQ0FBVCxDQUFzQkUsUUFBdEIsRUFBa0MsQ0FBbEMsQ0FDRCxDQUhELElBR08seUJBQ0w7QUFDQSxLQUFNQyxDQUFBQSxJQUFJLHVCQUFHZixLQUFLLENBQUNnQixRQUFOLENBQWVMLFdBQWYsQ0FBNEJFLFNBQTVCLENBQUgsQ0FBVixDQUZLLHNCQUlMLEdBQUlFLElBQUosQ0FBVSwrQ0FDUjtBQUNBO0FBQ0FQLFNBQVMsQ0FBQ0ksVUFBRCxDQUFULENBQXNCRSxRQUF0QixFQUFrQ0MsSUFBSSxDQUFDRSxNQUF2QyxDQUhRLHNCQUlSZCxZQUFZLENBQUNTLFVBQUQsQ0FBWixDQUF5QkUsUUFBekIsRUFBcUNILFdBQXJDLENBQ0QsQ0FMRCxJQUtPLCtDQUNMSCxTQUFTLENBQUNJLFVBQUQsQ0FBVCxDQUFzQkUsUUFBdEIsRUFBa0NMLFFBQWxDLENBQ0QsQ0FDRixDQUNGLENBakJELEVBa0JELENBbkJELEVBcUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUEzQzJDLHNCQTRDM0NSLFFBQVEsQ0FBQ1MsT0FBVCxDQUFpQixDQUFDUSxZQUFELENBQWVDLFdBQWYsR0FBK0IsNENBQzlDO0FBQ0FsQixRQUFRLENBQUNTLE9BQVQsQ0FBaUIsQ0FBQ0MsV0FBRCxDQUFjQyxVQUFkLEdBQTZCLDRDQUM1QztBQUNBWCxRQUFRLENBQUNTLE9BQVQsQ0FBaUIsQ0FBQ0csU0FBRCxDQUFZQyxRQUFaLEdBQXlCLHNCQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQU1NLENBQUFBLGFBQWEsd0JBQUdaLFNBQVMsQ0FBQ0ksVUFBRCxDQUFULENBQXNCTyxXQUF0QixFQUFxQ1gsU0FBUyxDQUFDVyxXQUFELENBQVQsQ0FBdUJMLFFBQXZCLENBQXhDLENBQW5CLENBTHdDLHNCQU94QyxHQUFJTixTQUFTLENBQUNJLFVBQUQsQ0FBVCxDQUFzQkUsUUFBdEIsRUFBa0NNLGFBQXRDLENBQXFELCtDQUNuRDtBQUNBWixTQUFTLENBQUNJLFVBQUQsQ0FBVCxDQUFzQkUsUUFBdEIsRUFBa0NNLGFBQWxDLENBRm1ELHNCQUduRGpCLFlBQVksQ0FBQ1MsVUFBRCxDQUFaLENBQXlCRSxRQUF6QixFQUFxQ0ksWUFBckMsQ0FDRCxDQUpELDhCQUtELENBWkQsRUFhRCxDQWZELEVBZ0JELENBbEJELEVBb0JBO0FBQ0E7QUFqRTJDLHNCQWtFM0MsTUFBTyxDQUFFVixTQUFGLENBQWFMLFlBQWIsQ0FBUCxDQUNEIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcGFyYW0ge0dyYXBofSBncmFwaFxuICogQHJldHVybiB7e2Rpc3RhbmNlczogbnVtYmVyW11bXSwgbmV4dFZlcnRpY2VzOiBHcmFwaFZlcnRleFtdW119fVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmbG95ZFdhcnNoYWxsKGdyYXBoKSB7XG4gIC8vIEdldCBhbGwgZ3JhcGggdmVydGljZXMuXG4gIGNvbnN0IHZlcnRpY2VzID0gZ3JhcGguZ2V0QWxsVmVydGljZXMoKTtcblxuICAvLyBJbml0IHByZXZpb3VzIHZlcnRpY2VzIG1hdHJpeCB3aXRoIG51bGxzIG1lYW5pbmcgdGhhdCB0aGVyZSBhcmUgbm9cbiAgLy8gcHJldmlvdXMgdmVydGljZXMgZXhpc3QgdGhhdCB3aWxsIGdpdmUgdXMgc2hvcnRlc3QgcGF0aC5cbiAgY29uc3QgbmV4dFZlcnRpY2VzID0gQXJyYXkodmVydGljZXMubGVuZ3RoKS5maWxsKG51bGwpLm1hcCgoKSA9PiB7XG4gICAgcmV0dXJuIEFycmF5KHZlcnRpY2VzLmxlbmd0aCkuZmlsbChudWxsKTtcbiAgfSk7XG5cbiAgLy8gSW5pdCBkaXN0YW5jZXMgbWF0cml4IHdpdGggSW5maW5pdGllcyBtZWFuaW5nIHRoZXJlIGFyZSBubyBwYXRoc1xuICAvLyBiZXR3ZWVuIHZlcnRpY2VzIGV4aXN0IHNvIGZhci5cbiAgY29uc3QgZGlzdGFuY2VzID0gQXJyYXkodmVydGljZXMubGVuZ3RoKS5maWxsKG51bGwpLm1hcCgoKSA9PiB7XG4gICAgcmV0dXJuIEFycmF5KHZlcnRpY2VzLmxlbmd0aCkuZmlsbChJbmZpbml0eSk7XG4gIH0pO1xuXG4gIC8vIEluaXQgZGlzdGFuY2UgbWF0cml4IHdpdGggdGhlIGRpc3RhbmNlIHdlIGFscmVhZHkgbm93IChmcm9tIGV4aXN0aW5nIGVkZ2VzKS5cbiAgLy8gQW5kIGFsc28gaW5pdCBwcmV2aW91cyB2ZXJ0aWNlcyBmcm9tIHRoZSBlZGdlcy5cbiAgdmVydGljZXMuZm9yRWFjaCgoc3RhcnRWZXJ0ZXgsIHN0YXJ0SW5kZXgpID0+IHtcbiAgICB2ZXJ0aWNlcy5mb3JFYWNoKChlbmRWZXJ0ZXgsIGVuZEluZGV4KSA9PiB7XG4gICAgICBpZiAoc3RhcnRWZXJ0ZXggPT09IGVuZFZlcnRleCkge1xuICAgICAgICAvLyBEaXN0YW5jZSB0byB0aGUgdmVydGV4IGl0c2VsZiBpcyAwLlxuICAgICAgICBkaXN0YW5jZXNbc3RhcnRJbmRleF1bZW5kSW5kZXhdID0gMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEZpbmQgZWRnZSBiZXR3ZWVuIHRoZSBzdGFydCBhbmQgZW5kIHZlcnRpY2VzLlxuICAgICAgICBjb25zdCBlZGdlID0gZ3JhcGguZmluZEVkZ2Uoc3RhcnRWZXJ0ZXgsIGVuZFZlcnRleCk7XG5cbiAgICAgICAgaWYgKGVkZ2UpIHtcbiAgICAgICAgICAvLyBUaGVyZSBpcyBhbiBlZGdlIGZyb20gdmVydGV4IHdpdGggc3RhcnRJbmRleCB0byB2ZXJ0ZXggd2l0aCBlbmRJbmRleC5cbiAgICAgICAgICAvLyBTYXZlIGRpc3RhbmNlIGFuZCBwcmV2aW91cyB2ZXJ0ZXguXG4gICAgICAgICAgZGlzdGFuY2VzW3N0YXJ0SW5kZXhdW2VuZEluZGV4XSA9IGVkZ2Uud2VpZ2h0O1xuICAgICAgICAgIG5leHRWZXJ0aWNlc1tzdGFydEluZGV4XVtlbmRJbmRleF0gPSBzdGFydFZlcnRleDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkaXN0YW5jZXNbc3RhcnRJbmRleF1bZW5kSW5kZXhdID0gSW5maW5pdHk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG5cbiAgLy8gTm93IGxldCdzIGdvIHRvIHRoZSBjb3JlIG9mIHRoZSBhbGdvcml0aG0uXG4gIC8vIExldCdzIGFsbCBwYWlyIG9mIHZlcnRpY2VzIChmcm9tIHN0YXJ0IHRvIGVuZCBvbmVzKSBhbmQgdHJ5IHRvIGNoZWNrIGlmIHRoZXJlXG4gIC8vIGlzIGEgc2hvcnRlciBwYXRoIGV4aXN0cyBiZXR3ZWVuIHRoZW0gdmlhIG1pZGRsZSB2ZXJ0ZXguIE1pZGRsZSB2ZXJ0ZXggbWF5IGFsc29cbiAgLy8gYmUgb25lIG9mIHRoZSBncmFwaCB2ZXJ0aWNlcy4gQXMgeW91IG1heSBzZWUgbm93IHdlJ3JlIGdvaW5nIHRvIGhhdmUgdGhyZWVcbiAgLy8gbG9vcHMgb3ZlciBhbGwgZ3JhcGggdmVydGljZXM6IGZvciBzdGFydCwgZW5kIGFuZCBtaWRkbGUgdmVydGljZXMuXG4gIHZlcnRpY2VzLmZvckVhY2goKG1pZGRsZVZlcnRleCwgbWlkZGxlSW5kZXgpID0+IHtcbiAgICAvLyBQYXRoIHN0YXJ0cyBmcm9tIHN0YXJ0VmVydGV4IHdpdGggc3RhcnRJbmRleC5cbiAgICB2ZXJ0aWNlcy5mb3JFYWNoKChzdGFydFZlcnRleCwgc3RhcnRJbmRleCkgPT4ge1xuICAgICAgLy8gUGF0aCBlbmRzIHRvIGVuZFZlcnRleCB3aXRoIGVuZEluZGV4LlxuICAgICAgdmVydGljZXMuZm9yRWFjaCgoZW5kVmVydGV4LCBlbmRJbmRleCkgPT4ge1xuICAgICAgICAvLyBDb21wYXJlIGV4aXN0aW5nIGRpc3RhbmNlIGZyb20gc3RhcnRWZXJ0ZXggdG8gZW5kVmVydGV4LCB3aXRoIGRpc3RhbmNlXG4gICAgICAgIC8vIGZyb20gc3RhcnRWZXJ0ZXggdG8gZW5kVmVydGV4IGJ1dCB2aWEgbWlkZGxlVmVydGV4LlxuICAgICAgICAvLyBTYXZlIHRoZSBzaG9ydGVzdCBkaXN0YW5jZSBhbmQgcHJldmlvdXMgdmVydGV4IHRoYXQgYWxsb3dzXG4gICAgICAgIC8vIHVzIHRvIGhhdmUgdGhpcyBzaG9ydGVzdCBkaXN0YW5jZS5cbiAgICAgICAgY29uc3QgZGlzdFZpYU1pZGRsZSA9IGRpc3RhbmNlc1tzdGFydEluZGV4XVttaWRkbGVJbmRleF0gKyBkaXN0YW5jZXNbbWlkZGxlSW5kZXhdW2VuZEluZGV4XTtcblxuICAgICAgICBpZiAoZGlzdGFuY2VzW3N0YXJ0SW5kZXhdW2VuZEluZGV4XSA+IGRpc3RWaWFNaWRkbGUpIHtcbiAgICAgICAgICAvLyBXZSd2ZSBmb3VuZCBhIHNob3J0ZXN0IHBhc3MgdmlhIG1pZGRsZSB2ZXJ0ZXguXG4gICAgICAgICAgZGlzdGFuY2VzW3N0YXJ0SW5kZXhdW2VuZEluZGV4XSA9IGRpc3RWaWFNaWRkbGU7XG4gICAgICAgICAgbmV4dFZlcnRpY2VzW3N0YXJ0SW5kZXhdW2VuZEluZGV4XSA9IG1pZGRsZVZlcnRleDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIC8vIFNob3J0ZXN0IGRpc3RhbmNlIGZyb20geCB0byB5OiBkaXN0YW5jZVt4XVt5XS5cbiAgLy8gTmV4dCB2ZXJ0ZXggYWZ0ZXIgeCBvbmUgaW4gcGF0aCBmcm9tIHggdG8geTogbmV4dFZlcnRpY2VzW3hdW3ldLlxuICByZXR1cm4geyBkaXN0YW5jZXMsIG5leHRWZXJ0aWNlcyB9O1xufVxuIl19