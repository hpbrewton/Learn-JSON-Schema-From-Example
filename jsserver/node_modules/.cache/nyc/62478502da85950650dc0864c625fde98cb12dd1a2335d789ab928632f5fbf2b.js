var cov_1lmu27e6ob=function(){var path="/Users/hb/latlib/jsserver/javascript-algorithms/src/data-structures/bloom-filter/BloomFilter.js";var hash="4b66f5ea11c917d6e8d4bd8316db1fca12c4371e";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/hb/latlib/jsserver/javascript-algorithms/src/data-structures/bloom-filter/BloomFilter.js",statementMap:{"0":{start:{line:8,column:4},end:{line:8,column:21}},"1":{start:{line:9,column:4},end:{line:9,column:42}},"2":{start:{line:16,column:23},end:{line:16,column:47}},"3":{start:{line:19,column:4},end:{line:19,column:58}},"4":{start:{line:19,column:30},end:{line:19,column:56}},"5":{start:{line:27,column:23},end:{line:27,column:47}},"6":{start:{line:29,column:4},end:{line:34,column:5}},"7":{start:{line:29,column:25},end:{line:29,column:26}},"8":{start:{line:30,column:6},end:{line:33,column:7}},"9":{start:{line:32,column:8},end:{line:32,column:21}},"10":{start:{line:37,column:4},end:{line:37,column:16}},"11":{start:{line:50,column:20},end:{line:50,column:22}},"12":{start:{line:53,column:4},end:{line:55,column:5}},"13":{start:{line:53,column:32},end:{line:53,column:33}},"14":{start:{line:54,column:6},end:{line:54,column:26}},"15":{start:{line:57,column:29},end:{line:64,column:5}},"16":{start:{line:59,column:8},end:{line:59,column:30}},"17":{start:{line:62,column:8},end:{line:62,column:30}},"18":{start:{line:66,column:4},end:{line:66,column:28}},"19":{start:{line:74,column:15},end:{line:74,column:16}},"20":{start:{line:76,column:4},end:{line:81,column:5}},"21":{start:{line:76,column:25},end:{line:76,column:26}},"22":{start:{line:77,column:19},end:{line:77,column:45}},"23":{start:{line:78,column:6},end:{line:78,column:39}},"24":{start:{line:79,column:6},end:{line:79,column:19}},"25":{start:{line:80,column:6},end:{line:80,column:28}},"26":{start:{line:83,column:4},end:{line:83,column:28}},"27":{start:{line:91,column:15},end:{line:91,column:19}},"28":{start:{line:93,column:4},end:{line:96,column:5}},"29":{start:{line:93,column:25},end:{line:93,column:26}},"30":{start:{line:94,column:19},end:{line:94,column:45}},"31":{start:{line:95,column:6},end:{line:95,column:39}},"32":{start:{line:98,column:4},end:{line:98,column:38}},"33":{start:{line:106,column:15},end:{line:106,column:16}},"34":{start:{line:108,column:4},end:{line:113,column:5}},"35":{start:{line:108,column:25},end:{line:108,column:26}},"36":{start:{line:109,column:19},end:{line:109,column:45}},"37":{start:{line:110,column:6},end:{line:110,column:32}},"38":{start:{line:111,column:6},end:{line:111,column:19}},"39":{start:{line:112,column:6},end:{line:112,column:19}},"40":{start:{line:115,column:4},end:{line:115,column:38}},"41":{start:{line:125,column:4},end:{line:129,column:6}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:5,column:2},end:{line:5,column:3}},loc:{start:{line:5,column:26},end:{line:10,column:3}},line:5},"1":{name:"(anonymous_1)",decl:{start:{line:15,column:2},end:{line:15,column:3}},loc:{start:{line:15,column:15},end:{line:20,column:3}},line:15},"2":{name:"(anonymous_2)",decl:{start:{line:19,column:23},end:{line:19,column:24}},loc:{start:{line:19,column:30},end:{line:19,column:56}},line:19},"3":{name:"(anonymous_3)",decl:{start:{line:26,column:2},end:{line:26,column:3}},loc:{start:{line:26,column:19},end:{line:38,column:3}},line:26},"4":{name:"(anonymous_4)",decl:{start:{line:49,column:2},end:{line:49,column:3}},loc:{start:{line:49,column:20},end:{line:67,column:3}},line:49},"5":{name:"(anonymous_5)",decl:{start:{line:58,column:6},end:{line:58,column:7}},loc:{start:{line:58,column:22},end:{line:60,column:7}},line:58},"6":{name:"(anonymous_6)",decl:{start:{line:61,column:6},end:{line:61,column:7}},loc:{start:{line:61,column:22},end:{line:63,column:7}},line:61},"7":{name:"(anonymous_7)",decl:{start:{line:73,column:2},end:{line:73,column:3}},loc:{start:{line:73,column:14},end:{line:84,column:3}},line:73},"8":{name:"(anonymous_8)",decl:{start:{line:90,column:2},end:{line:90,column:3}},loc:{start:{line:90,column:14},end:{line:99,column:3}},line:90},"9":{name:"(anonymous_9)",decl:{start:{line:105,column:2},end:{line:105,column:3}},loc:{start:{line:105,column:14},end:{line:116,column:3}},line:105},"10":{name:"(anonymous_10)",decl:{start:{line:124,column:2},end:{line:124,column:3}},loc:{start:{line:124,column:22},end:{line:130,column:3}},line:124}},branchMap:{"0":{loc:{start:{line:5,column:14},end:{line:5,column:24}},type:"default-arg",locations:[{start:{line:5,column:21},end:{line:5,column:24}}],line:5},"1":{loc:{start:{line:30,column:6},end:{line:33,column:7}},type:"if",locations:[{start:{line:30,column:6},end:{line:33,column:7}},{start:{line:30,column:6},end:{line:33,column:7}}],line:30}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},b:{"0":[0],"1":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"4b66f5ea11c917d6e8d4bd8316db1fca12c4371e"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();export default class BloomFilter{/**
   * @param {number} size - the size of the storage.
   */constructor(size=(cov_1lmu27e6ob.b[0][0]++,100)){cov_1lmu27e6ob.f[0]++;cov_1lmu27e6ob.s[0]++;// Bloom filter size directly affects the likelihood of false positives.
// The bigger the size the lower the likelihood of false positives.
this.size=size;cov_1lmu27e6ob.s[1]++;this.storage=this.createStore(size);}/**
   * @param {string} item
   */insert(item){cov_1lmu27e6ob.f[1]++;const hashValues=(cov_1lmu27e6ob.s[2]++,this.getHashValues(item));// Set each hashValue index to true.
cov_1lmu27e6ob.s[3]++;hashValues.forEach(val=>{cov_1lmu27e6ob.f[2]++;cov_1lmu27e6ob.s[4]++;return this.storage.setValue(val);});}/**
   * @param {string} item
   * @return {boolean}
   */mayContain(item){cov_1lmu27e6ob.f[3]++;const hashValues=(cov_1lmu27e6ob.s[5]++,this.getHashValues(item));cov_1lmu27e6ob.s[6]++;for(let hashIndex=(cov_1lmu27e6ob.s[7]++,0);hashIndex<hashValues.length;hashIndex+=1){cov_1lmu27e6ob.s[8]++;if(!this.storage.getValue(hashValues[hashIndex])){cov_1lmu27e6ob.b[1][0]++;cov_1lmu27e6ob.s[9]++;// We know that the item was definitely not inserted.
return false;}else{cov_1lmu27e6ob.b[1][1]++;}}// The item may or may not have been inserted.
cov_1lmu27e6ob.s[10]++;return true;}/**
   * Creates the data store for our filter.
   * We use this method to generate the store in order to
   * encapsulate the data itself and only provide access
   * to the necessary methods.
   *
   * @param {number} size
   * @return {Object}
   */createStore(size){cov_1lmu27e6ob.f[4]++;const storage=(cov_1lmu27e6ob.s[11]++,[]);// Initialize all indexes to false
cov_1lmu27e6ob.s[12]++;for(let storageCellIndex=(cov_1lmu27e6ob.s[13]++,0);storageCellIndex<size;storageCellIndex+=1){cov_1lmu27e6ob.s[14]++;storage.push(false);}const storageInterface=(cov_1lmu27e6ob.s[15]++,{getValue(index){cov_1lmu27e6ob.f[5]++;cov_1lmu27e6ob.s[16]++;return storage[index];},setValue(index){cov_1lmu27e6ob.f[6]++;cov_1lmu27e6ob.s[17]++;storage[index]=true;}});cov_1lmu27e6ob.s[18]++;return storageInterface;}/**
   * @param {string} item
   * @return {number}
   */hash1(item){cov_1lmu27e6ob.f[7]++;let hash=(cov_1lmu27e6ob.s[19]++,0);cov_1lmu27e6ob.s[20]++;for(let charIndex=(cov_1lmu27e6ob.s[21]++,0);charIndex<item.length;charIndex+=1){const char=(cov_1lmu27e6ob.s[22]++,item.charCodeAt(charIndex));cov_1lmu27e6ob.s[23]++;hash=(hash<<5)+hash+char;cov_1lmu27e6ob.s[24]++;hash&=hash;// Convert to 32bit integer
cov_1lmu27e6ob.s[25]++;hash=Math.abs(hash);}cov_1lmu27e6ob.s[26]++;return hash%this.size;}/**
   * @param {string} item
   * @return {number}
   */hash2(item){cov_1lmu27e6ob.f[8]++;let hash=(cov_1lmu27e6ob.s[27]++,5381);cov_1lmu27e6ob.s[28]++;for(let charIndex=(cov_1lmu27e6ob.s[29]++,0);charIndex<item.length;charIndex+=1){const char=(cov_1lmu27e6ob.s[30]++,item.charCodeAt(charIndex));cov_1lmu27e6ob.s[31]++;hash=(hash<<5)+hash+char;/* hash * 33 + c */}cov_1lmu27e6ob.s[32]++;return Math.abs(hash%this.size);}/**
   * @param {string} item
   * @return {number}
   */hash3(item){cov_1lmu27e6ob.f[9]++;let hash=(cov_1lmu27e6ob.s[33]++,0);cov_1lmu27e6ob.s[34]++;for(let charIndex=(cov_1lmu27e6ob.s[35]++,0);charIndex<item.length;charIndex+=1){const char=(cov_1lmu27e6ob.s[36]++,item.charCodeAt(charIndex));cov_1lmu27e6ob.s[37]++;hash=(hash<<5)-hash;cov_1lmu27e6ob.s[38]++;hash+=char;cov_1lmu27e6ob.s[39]++;hash&=hash;// Convert to 32bit integer
}cov_1lmu27e6ob.s[40]++;return Math.abs(hash%this.size);}/**
   * Runs all 3 hash functions on the input and returns an array of results.
   *
   * @param {string} item
   * @return {number[]}
   */getHashValues(item){cov_1lmu27e6ob.f[10]++;cov_1lmu27e6ob.s[41]++;return[this.hash1(item),this.hash2(item),this.hash3(item)];}}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,