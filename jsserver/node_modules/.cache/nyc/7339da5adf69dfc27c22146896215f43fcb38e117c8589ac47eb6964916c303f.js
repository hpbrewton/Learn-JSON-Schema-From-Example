var cov_1mku7msyd8=function(){var path="/Users/hb/latlib/jsserver/javascript-algorithms/src/algorithms/graph/detect-cycle/detectDirectedCycle.js";var hash="0aeb45dd403d1e67af814c42509992eedb63b868";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/hb/latlib/jsserver/javascript-algorithms/src/algorithms/graph/detect-cycle/detectDirectedCycle.js",statementMap:{"0":{start:{line:9,column:14},end:{line:9,column:18}},"1":{start:{line:13,column:23},end:{line:13,column:25}},"2":{start:{line:16,column:19},end:{line:16,column:21}},"3":{start:{line:20,column:18},end:{line:20,column:20}},"4":{start:{line:24,column:19},end:{line:24,column:21}},"5":{start:{line:32,column:2},end:{line:34,column:5}},"6":{start:{line:33,column:4},end:{line:33,column:39}},"7":{start:{line:37,column:20},end:{line:80,column:3}},"8":{start:{line:39,column:6},end:{line:61,column:7}},"9":{start:{line:42,column:8},end:{line:42,column:19}},"10":{start:{line:44,column:33},end:{line:44,column:46}},"11":{start:{line:45,column:34},end:{line:45,column:48}},"12":{start:{line:47,column:8},end:{line:51,column:9}},"13":{start:{line:48,column:10},end:{line:48,column:67}},"14":{start:{line:49,column:10},end:{line:49,column:51}},"15":{start:{line:50,column:10},end:{line:50,column:75}},"16":{start:{line:53,column:8},end:{line:53,column:65}},"17":{start:{line:56,column:8},end:{line:56,column:56}},"18":{start:{line:57,column:8},end:{line:57,column:48}},"19":{start:{line:60,column:8},end:{line:60,column:62}},"20":{start:{line:66,column:6},end:{line:66,column:55}},"21":{start:{line:67,column:6},end:{line:67,column:45}},"22":{start:{line:72,column:6},end:{line:74,column:7}},"23":{start:{line:73,column:8},end:{line:73,column:21}},"24":{start:{line:78,column:6},end:{line:78,column:44}},"25":{start:{line:83,column:2},end:{line:90,column:3}},"26":{start:{line:85,column:26},end:{line:85,column:50}},"27":{start:{line:86,column:24},end:{line:86,column:47}},"28":{start:{line:89,column:4},end:{line:89,column:52}},"29":{start:{line:92,column:2},end:{line:92,column:15}}},fnMap:{"0":{name:"detectDirectedCycle",decl:{start:{line:8,column:24},end:{line:8,column:43}},loc:{start:{line:8,column:51},end:{line:93,column:1}},line:8},"1":{name:"(anonymous_1)",decl:{start:{line:32,column:33},end:{line:32,column:34}},loc:{start:{line:32,column:45},end:{line:34,column:3}},line:32},"2":{name:"(anonymous_2)",decl:{start:{line:38,column:17},end:{line:38,column:18}},loc:{start:{line:38,column:56},end:{line:62,column:5}},line:38},"3":{name:"(anonymous_3)",decl:{start:{line:63,column:17},end:{line:63,column:18}},loc:{start:{line:63,column:40},end:{line:68,column:5}},line:63},"4":{name:"(anonymous_4)",decl:{start:{line:69,column:20},end:{line:69,column:21}},loc:{start:{line:69,column:40},end:{line:79,column:5}},line:69}},branchMap:{"0":{loc:{start:{line:39,column:6},end:{line:61,column:7}},type:"if",locations:[{start:{line:39,column:6},end:{line:61,column:7}},{start:{line:39,column:6},end:{line:61,column:7}}],line:39},"1":{loc:{start:{line:72,column:6},end:{line:74,column:7}},type:"if",locations:[{start:{line:72,column:6},end:{line:74,column:7}},{start:{line:72,column:6},end:{line:74,column:7}}],line:72}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0},b:{"0":[0,0],"1":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"0aeb45dd403d1e67af814c42509992eedb63b868"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();import depthFirstSearch from'../depth-first-search/depthFirstSearch';/**
 * Detect cycle in directed graph using Depth First Search.
 *
 * @param {Graph} graph
 */export default function detectDirectedCycle(graph){cov_1mku7msyd8.f[0]++;let cycle=(cov_1mku7msyd8.s[0]++,null);// Will store parents (previous vertices) for all visited nodes.
// This will be needed in order to specify what path exactly is a cycle.
const dfsParentMap=(cov_1mku7msyd8.s[1]++,{});// White set (UNVISITED) contains all the vertices that haven't been visited at all.
const whiteSet=(cov_1mku7msyd8.s[2]++,{});// Gray set (VISITING) contains all the vertices that are being visited right now
// (in current path).
const graySet=(cov_1mku7msyd8.s[3]++,{});// Black set (VISITED) contains all the vertices that has been fully visited.
// Meaning that all children of the vertex has been visited.
const blackSet=(cov_1mku7msyd8.s[4]++,{});// If we encounter vertex in gray set it means that we've found a cycle.
// Because when vertex in gray set it means that its neighbors or its neighbors
// neighbors are still being explored.
// Init white set and add all vertices to it.
/** @param {GraphVertex} vertex */cov_1mku7msyd8.s[5]++;graph.getAllVertices().forEach(vertex=>{cov_1mku7msyd8.f[1]++;cov_1mku7msyd8.s[6]++;whiteSet[vertex.getKey()]=vertex;});// Describe BFS callbacks.
const callbacks=(cov_1mku7msyd8.s[7]++,{enterVertex:({currentVertex,previousVertex})=>{cov_1mku7msyd8.f[2]++;cov_1mku7msyd8.s[8]++;if(graySet[currentVertex.getKey()]){cov_1mku7msyd8.b[0][0]++;cov_1mku7msyd8.s[9]++;// If current vertex already in grey set it means that cycle is detected.
// Let's detect cycle path.
cycle={};let currentCycleVertex=(cov_1mku7msyd8.s[10]++,currentVertex);let previousCycleVertex=(cov_1mku7msyd8.s[11]++,previousVertex);cov_1mku7msyd8.s[12]++;while(previousCycleVertex.getKey()!==currentVertex.getKey()){cov_1mku7msyd8.s[13]++;cycle[currentCycleVertex.getKey()]=previousCycleVertex;cov_1mku7msyd8.s[14]++;currentCycleVertex=previousCycleVertex;cov_1mku7msyd8.s[15]++;previousCycleVertex=dfsParentMap[previousCycleVertex.getKey()];}cov_1mku7msyd8.s[16]++;cycle[currentCycleVertex.getKey()]=previousCycleVertex;}else{cov_1mku7msyd8.b[0][1]++;cov_1mku7msyd8.s[17]++;// Otherwise let's add current vertex to gray set and remove it from white set.
graySet[currentVertex.getKey()]=currentVertex;cov_1mku7msyd8.s[18]++;delete whiteSet[currentVertex.getKey()];// Update DFS parents list.
cov_1mku7msyd8.s[19]++;dfsParentMap[currentVertex.getKey()]=previousVertex;}},leaveVertex:({currentVertex})=>{cov_1mku7msyd8.f[3]++;cov_1mku7msyd8.s[20]++;// If all node's children has been visited let's remove it from gray set
// and move it to the black set meaning that all its neighbors are visited.
blackSet[currentVertex.getKey()]=currentVertex;cov_1mku7msyd8.s[21]++;delete graySet[currentVertex.getKey()];},allowTraversal:({nextVertex})=>{cov_1mku7msyd8.f[4]++;cov_1mku7msyd8.s[22]++;// If cycle was detected we must forbid all further traversing since it will
// cause infinite traversal loop.
if(cycle){cov_1mku7msyd8.b[1][0]++;cov_1mku7msyd8.s[23]++;return false;}else{cov_1mku7msyd8.b[1][1]++;}// Allow traversal only for the vertices that are not in black set
// since all black set vertices have been already visited.
cov_1mku7msyd8.s[24]++;return!blackSet[nextVertex.getKey()];}});// Start exploring vertices.
cov_1mku7msyd8.s[25]++;while(Object.keys(whiteSet).length){// Pick fist vertex to start BFS from.
const firstWhiteKey=(cov_1mku7msyd8.s[26]++,Object.keys(whiteSet)[0]);const startVertex=(cov_1mku7msyd8.s[27]++,whiteSet[firstWhiteKey]);// Do Depth First Search.
cov_1mku7msyd8.s[28]++;depthFirstSearch(graph,startVertex,callbacks);}cov_1mku7msyd8.s[29]++;return cycle;}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9oYi9sYXRsaWIvanNzZXJ2ZXIvamF2YXNjcmlwdC1hbGdvcml0aG1zL3NyYy9hbGdvcml0aG1zL2dyYXBoL2RldGVjdC1jeWNsZS9kZXRlY3REaXJlY3RlZEN5Y2xlLmpzIl0sIm5hbWVzIjpbImRlcHRoRmlyc3RTZWFyY2giLCJkZXRlY3REaXJlY3RlZEN5Y2xlIiwiZ3JhcGgiLCJjeWNsZSIsImRmc1BhcmVudE1hcCIsIndoaXRlU2V0IiwiZ3JheVNldCIsImJsYWNrU2V0IiwiZ2V0QWxsVmVydGljZXMiLCJmb3JFYWNoIiwidmVydGV4IiwiZ2V0S2V5IiwiY2FsbGJhY2tzIiwiZW50ZXJWZXJ0ZXgiLCJjdXJyZW50VmVydGV4IiwicHJldmlvdXNWZXJ0ZXgiLCJjdXJyZW50Q3ljbGVWZXJ0ZXgiLCJwcmV2aW91c0N5Y2xlVmVydGV4IiwibGVhdmVWZXJ0ZXgiLCJhbGxvd1RyYXZlcnNhbCIsIm5leHRWZXJ0ZXgiLCJPYmplY3QiLCJrZXlzIiwibGVuZ3RoIiwiZmlyc3RXaGl0ZUtleSIsInN0YXJ0VmVydGV4Il0sIm1hcHBpbmdzIjoiNnBIQUFBLE1BQU9BLENBQUFBLGdCQUFQLEtBQTZCLHdDQUE3QixDQUVBOzs7O0dBS0EsY0FBZSxTQUFTQyxDQUFBQSxtQkFBVCxDQUE2QkMsS0FBN0IsQ0FBb0MsdUJBQ2pELEdBQUlDLENBQUFBLEtBQUssd0JBQUcsSUFBSCxDQUFULENBRUE7QUFDQTtBQUNBLEtBQU1DLENBQUFBLFlBQVksd0JBQUcsRUFBSCxDQUFsQixDQUVBO0FBQ0EsS0FBTUMsQ0FBQUEsUUFBUSx3QkFBRyxFQUFILENBQWQsQ0FFQTtBQUNBO0FBQ0EsS0FBTUMsQ0FBQUEsT0FBTyx3QkFBRyxFQUFILENBQWIsQ0FFQTtBQUNBO0FBQ0EsS0FBTUMsQ0FBQUEsUUFBUSx3QkFBRyxFQUFILENBQWQsQ0FFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBLGtDQXZCaUQsc0JBd0JqREwsS0FBSyxDQUFDTSxjQUFOLEdBQXVCQyxPQUF2QixDQUFnQ0MsTUFBRCxFQUFZLDZDQUN6Q0wsUUFBUSxDQUFDSyxNQUFNLENBQUNDLE1BQVAsRUFBRCxDQUFSLENBQTRCRCxNQUE1QixDQUNELENBRkQsRUFJQTtBQUNBLEtBQU1FLENBQUFBLFNBQVMsd0JBQUcsQ0FDaEJDLFdBQVcsQ0FBRSxDQUFDLENBQUVDLGFBQUYsQ0FBaUJDLGNBQWpCLENBQUQsR0FBdUMsNkNBQ2xELEdBQUlULE9BQU8sQ0FBQ1EsYUFBYSxDQUFDSCxNQUFkLEVBQUQsQ0FBWCxDQUFxQyxnREFDbkM7QUFDQTtBQUNBUixLQUFLLENBQUcsRUFBUixDQUVBLEdBQUlhLENBQUFBLGtCQUFrQix5QkFBR0YsYUFBSCxDQUF0QixDQUNBLEdBQUlHLENBQUFBLG1CQUFtQix5QkFBR0YsY0FBSCxDQUF2QixDQU5tQyx1QkFRbkMsTUFBT0UsbUJBQW1CLENBQUNOLE1BQXBCLEtBQWlDRyxhQUFhLENBQUNILE1BQWQsRUFBeEMsQ0FBZ0Usd0JBQzlEUixLQUFLLENBQUNhLGtCQUFrQixDQUFDTCxNQUFuQixFQUFELENBQUwsQ0FBcUNNLG1CQUFyQyxDQUQ4RCx1QkFFOURELGtCQUFrQixDQUFHQyxtQkFBckIsQ0FGOEQsdUJBRzlEQSxtQkFBbUIsQ0FBR2IsWUFBWSxDQUFDYSxtQkFBbUIsQ0FBQ04sTUFBcEIsRUFBRCxDQUFsQyxDQUNELENBWmtDLHVCQWNuQ1IsS0FBSyxDQUFDYSxrQkFBa0IsQ0FBQ0wsTUFBbkIsRUFBRCxDQUFMLENBQXFDTSxtQkFBckMsQ0FDRCxDQWZELElBZU8saURBQ0w7QUFDQVgsT0FBTyxDQUFDUSxhQUFhLENBQUNILE1BQWQsRUFBRCxDQUFQLENBQWtDRyxhQUFsQyxDQUZLLHVCQUdMLE1BQU9ULENBQUFBLFFBQVEsQ0FBQ1MsYUFBYSxDQUFDSCxNQUFkLEVBQUQsQ0FBZixDQUVBO0FBTEssdUJBTUxQLFlBQVksQ0FBQ1UsYUFBYSxDQUFDSCxNQUFkLEVBQUQsQ0FBWixDQUF1Q0ksY0FBdkMsQ0FDRCxDQUNGLENBekJlLENBMEJoQkcsV0FBVyxDQUFFLENBQUMsQ0FBRUosYUFBRixDQUFELEdBQXVCLDhDQUNsQztBQUNBO0FBQ0FQLFFBQVEsQ0FBQ08sYUFBYSxDQUFDSCxNQUFkLEVBQUQsQ0FBUixDQUFtQ0csYUFBbkMsQ0FIa0MsdUJBSWxDLE1BQU9SLENBQUFBLE9BQU8sQ0FBQ1EsYUFBYSxDQUFDSCxNQUFkLEVBQUQsQ0FBZCxDQUNELENBL0JlLENBZ0NoQlEsY0FBYyxDQUFFLENBQUMsQ0FBRUMsVUFBRixDQUFELEdBQW9CLDhDQUNsQztBQUNBO0FBQ0EsR0FBSWpCLEtBQUosQ0FBVyxpREFDVCxNQUFPLE1BQVAsQ0FDRCxDQUZELCtCQUlBO0FBQ0E7QUFSa0MsdUJBU2xDLE1BQU8sQ0FBQ0ksUUFBUSxDQUFDYSxVQUFVLENBQUNULE1BQVgsRUFBRCxDQUFoQixDQUNELENBMUNlLENBQUgsQ0FBZixDQTZDQTtBQTFFaUQsdUJBMkVqRCxNQUFPVSxNQUFNLENBQUNDLElBQVAsQ0FBWWpCLFFBQVosRUFBc0JrQixNQUE3QixDQUFxQyxDQUNuQztBQUNBLEtBQU1DLENBQUFBLGFBQWEseUJBQUdILE1BQU0sQ0FBQ0MsSUFBUCxDQUFZakIsUUFBWixFQUFzQixDQUF0QixDQUFILENBQW5CLENBQ0EsS0FBTW9CLENBQUFBLFdBQVcseUJBQUdwQixRQUFRLENBQUNtQixhQUFELENBQVgsQ0FBakIsQ0FFQTtBQUxtQyx1QkFNbkN4QixnQkFBZ0IsQ0FBQ0UsS0FBRCxDQUFRdUIsV0FBUixDQUFxQmIsU0FBckIsQ0FBaEIsQ0FDRCxDQWxGZ0QsdUJBb0ZqRCxNQUFPVCxDQUFBQSxLQUFQLENBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZGVwdGhGaXJzdFNlYXJjaCBmcm9tICcuLi9kZXB0aC1maXJzdC1zZWFyY2gvZGVwdGhGaXJzdFNlYXJjaCc7XG5cbi8qKlxuICogRGV0ZWN0IGN5Y2xlIGluIGRpcmVjdGVkIGdyYXBoIHVzaW5nIERlcHRoIEZpcnN0IFNlYXJjaC5cbiAqXG4gKiBAcGFyYW0ge0dyYXBofSBncmFwaFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZXRlY3REaXJlY3RlZEN5Y2xlKGdyYXBoKSB7XG4gIGxldCBjeWNsZSA9IG51bGw7XG5cbiAgLy8gV2lsbCBzdG9yZSBwYXJlbnRzIChwcmV2aW91cyB2ZXJ0aWNlcykgZm9yIGFsbCB2aXNpdGVkIG5vZGVzLlxuICAvLyBUaGlzIHdpbGwgYmUgbmVlZGVkIGluIG9yZGVyIHRvIHNwZWNpZnkgd2hhdCBwYXRoIGV4YWN0bHkgaXMgYSBjeWNsZS5cbiAgY29uc3QgZGZzUGFyZW50TWFwID0ge307XG5cbiAgLy8gV2hpdGUgc2V0IChVTlZJU0lURUQpIGNvbnRhaW5zIGFsbCB0aGUgdmVydGljZXMgdGhhdCBoYXZlbid0IGJlZW4gdmlzaXRlZCBhdCBhbGwuXG4gIGNvbnN0IHdoaXRlU2V0ID0ge307XG5cbiAgLy8gR3JheSBzZXQgKFZJU0lUSU5HKSBjb250YWlucyBhbGwgdGhlIHZlcnRpY2VzIHRoYXQgYXJlIGJlaW5nIHZpc2l0ZWQgcmlnaHQgbm93XG4gIC8vIChpbiBjdXJyZW50IHBhdGgpLlxuICBjb25zdCBncmF5U2V0ID0ge307XG5cbiAgLy8gQmxhY2sgc2V0IChWSVNJVEVEKSBjb250YWlucyBhbGwgdGhlIHZlcnRpY2VzIHRoYXQgaGFzIGJlZW4gZnVsbHkgdmlzaXRlZC5cbiAgLy8gTWVhbmluZyB0aGF0IGFsbCBjaGlsZHJlbiBvZiB0aGUgdmVydGV4IGhhcyBiZWVuIHZpc2l0ZWQuXG4gIGNvbnN0IGJsYWNrU2V0ID0ge307XG5cbiAgLy8gSWYgd2UgZW5jb3VudGVyIHZlcnRleCBpbiBncmF5IHNldCBpdCBtZWFucyB0aGF0IHdlJ3ZlIGZvdW5kIGEgY3ljbGUuXG4gIC8vIEJlY2F1c2Ugd2hlbiB2ZXJ0ZXggaW4gZ3JheSBzZXQgaXQgbWVhbnMgdGhhdCBpdHMgbmVpZ2hib3JzIG9yIGl0cyBuZWlnaGJvcnNcbiAgLy8gbmVpZ2hib3JzIGFyZSBzdGlsbCBiZWluZyBleHBsb3JlZC5cblxuICAvLyBJbml0IHdoaXRlIHNldCBhbmQgYWRkIGFsbCB2ZXJ0aWNlcyB0byBpdC5cbiAgLyoqIEBwYXJhbSB7R3JhcGhWZXJ0ZXh9IHZlcnRleCAqL1xuICBncmFwaC5nZXRBbGxWZXJ0aWNlcygpLmZvckVhY2goKHZlcnRleCkgPT4ge1xuICAgIHdoaXRlU2V0W3ZlcnRleC5nZXRLZXkoKV0gPSB2ZXJ0ZXg7XG4gIH0pO1xuXG4gIC8vIERlc2NyaWJlIEJGUyBjYWxsYmFja3MuXG4gIGNvbnN0IGNhbGxiYWNrcyA9IHtcbiAgICBlbnRlclZlcnRleDogKHsgY3VycmVudFZlcnRleCwgcHJldmlvdXNWZXJ0ZXggfSkgPT4ge1xuICAgICAgaWYgKGdyYXlTZXRbY3VycmVudFZlcnRleC5nZXRLZXkoKV0pIHtcbiAgICAgICAgLy8gSWYgY3VycmVudCB2ZXJ0ZXggYWxyZWFkeSBpbiBncmV5IHNldCBpdCBtZWFucyB0aGF0IGN5Y2xlIGlzIGRldGVjdGVkLlxuICAgICAgICAvLyBMZXQncyBkZXRlY3QgY3ljbGUgcGF0aC5cbiAgICAgICAgY3ljbGUgPSB7fTtcblxuICAgICAgICBsZXQgY3VycmVudEN5Y2xlVmVydGV4ID0gY3VycmVudFZlcnRleDtcbiAgICAgICAgbGV0IHByZXZpb3VzQ3ljbGVWZXJ0ZXggPSBwcmV2aW91c1ZlcnRleDtcblxuICAgICAgICB3aGlsZSAocHJldmlvdXNDeWNsZVZlcnRleC5nZXRLZXkoKSAhPT0gY3VycmVudFZlcnRleC5nZXRLZXkoKSkge1xuICAgICAgICAgIGN5Y2xlW2N1cnJlbnRDeWNsZVZlcnRleC5nZXRLZXkoKV0gPSBwcmV2aW91c0N5Y2xlVmVydGV4O1xuICAgICAgICAgIGN1cnJlbnRDeWNsZVZlcnRleCA9IHByZXZpb3VzQ3ljbGVWZXJ0ZXg7XG4gICAgICAgICAgcHJldmlvdXNDeWNsZVZlcnRleCA9IGRmc1BhcmVudE1hcFtwcmV2aW91c0N5Y2xlVmVydGV4LmdldEtleSgpXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGN5Y2xlW2N1cnJlbnRDeWNsZVZlcnRleC5nZXRLZXkoKV0gPSBwcmV2aW91c0N5Y2xlVmVydGV4O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gT3RoZXJ3aXNlIGxldCdzIGFkZCBjdXJyZW50IHZlcnRleCB0byBncmF5IHNldCBhbmQgcmVtb3ZlIGl0IGZyb20gd2hpdGUgc2V0LlxuICAgICAgICBncmF5U2V0W2N1cnJlbnRWZXJ0ZXguZ2V0S2V5KCldID0gY3VycmVudFZlcnRleDtcbiAgICAgICAgZGVsZXRlIHdoaXRlU2V0W2N1cnJlbnRWZXJ0ZXguZ2V0S2V5KCldO1xuXG4gICAgICAgIC8vIFVwZGF0ZSBERlMgcGFyZW50cyBsaXN0LlxuICAgICAgICBkZnNQYXJlbnRNYXBbY3VycmVudFZlcnRleC5nZXRLZXkoKV0gPSBwcmV2aW91c1ZlcnRleDtcbiAgICAgIH1cbiAgICB9LFxuICAgIGxlYXZlVmVydGV4OiAoeyBjdXJyZW50VmVydGV4IH0pID0+IHtcbiAgICAgIC8vIElmIGFsbCBub2RlJ3MgY2hpbGRyZW4gaGFzIGJlZW4gdmlzaXRlZCBsZXQncyByZW1vdmUgaXQgZnJvbSBncmF5IHNldFxuICAgICAgLy8gYW5kIG1vdmUgaXQgdG8gdGhlIGJsYWNrIHNldCBtZWFuaW5nIHRoYXQgYWxsIGl0cyBuZWlnaGJvcnMgYXJlIHZpc2l0ZWQuXG4gICAgICBibGFja1NldFtjdXJyZW50VmVydGV4LmdldEtleSgpXSA9IGN1cnJlbnRWZXJ0ZXg7XG4gICAgICBkZWxldGUgZ3JheVNldFtjdXJyZW50VmVydGV4LmdldEtleSgpXTtcbiAgICB9LFxuICAgIGFsbG93VHJhdmVyc2FsOiAoeyBuZXh0VmVydGV4IH0pID0+IHtcbiAgICAgIC8vIElmIGN5Y2xlIHdhcyBkZXRlY3RlZCB3ZSBtdXN0IGZvcmJpZCBhbGwgZnVydGhlciB0cmF2ZXJzaW5nIHNpbmNlIGl0IHdpbGxcbiAgICAgIC8vIGNhdXNlIGluZmluaXRlIHRyYXZlcnNhbCBsb29wLlxuICAgICAgaWYgKGN5Y2xlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgLy8gQWxsb3cgdHJhdmVyc2FsIG9ubHkgZm9yIHRoZSB2ZXJ0aWNlcyB0aGF0IGFyZSBub3QgaW4gYmxhY2sgc2V0XG4gICAgICAvLyBzaW5jZSBhbGwgYmxhY2sgc2V0IHZlcnRpY2VzIGhhdmUgYmVlbiBhbHJlYWR5IHZpc2l0ZWQuXG4gICAgICByZXR1cm4gIWJsYWNrU2V0W25leHRWZXJ0ZXguZ2V0S2V5KCldO1xuICAgIH0sXG4gIH07XG5cbiAgLy8gU3RhcnQgZXhwbG9yaW5nIHZlcnRpY2VzLlxuICB3aGlsZSAoT2JqZWN0LmtleXMod2hpdGVTZXQpLmxlbmd0aCkge1xuICAgIC8vIFBpY2sgZmlzdCB2ZXJ0ZXggdG8gc3RhcnQgQkZTIGZyb20uXG4gICAgY29uc3QgZmlyc3RXaGl0ZUtleSA9IE9iamVjdC5rZXlzKHdoaXRlU2V0KVswXTtcbiAgICBjb25zdCBzdGFydFZlcnRleCA9IHdoaXRlU2V0W2ZpcnN0V2hpdGVLZXldO1xuXG4gICAgLy8gRG8gRGVwdGggRmlyc3QgU2VhcmNoLlxuICAgIGRlcHRoRmlyc3RTZWFyY2goZ3JhcGgsIHN0YXJ0VmVydGV4LCBjYWxsYmFja3MpO1xuICB9XG5cbiAgcmV0dXJuIGN5Y2xlO1xufVxuIl19