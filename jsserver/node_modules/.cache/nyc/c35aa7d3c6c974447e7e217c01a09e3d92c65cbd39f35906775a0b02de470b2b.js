var cov_2b5x4oq2z9=function(){var path="/Users/hb/latlib/jsserver/javascript-algorithms/src/algorithms/cryptography/polynomial-hash/PolynomialHash.js";var hash="040615b2e6d4a93de2f822c2375c1e689a413fe7";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/hb/latlib/jsserver/javascript-algorithms/src/algorithms/cryptography/polynomial-hash/PolynomialHash.js",statementMap:{"0":{start:{line:1,column:21},end:{line:1,column:23}},"1":{start:{line:2,column:24},end:{line:2,column:27}},"2":{start:{line:10,column:4},end:{line:10,column:21}},"3":{start:{line:11,column:4},end:{line:11,column:27}},"4":{start:{line:23,column:22},end:{line:23,column:75}},"5":{start:{line:23,column:51},end:{line:23,column:74}},"6":{start:{line:25,column:15},end:{line:25,column:16}},"7":{start:{line:26,column:4},end:{line:30,column:5}},"8":{start:{line:26,column:25},end:{line:26,column:26}},"9":{start:{line:27,column:6},end:{line:27,column:24}},"10":{start:{line:28,column:6},end:{line:28,column:35}},"11":{start:{line:29,column:6},end:{line:29,column:27}},"12":{start:{line:32,column:4},end:{line:32,column:16}},"13":{start:{line:50,column:15},end:{line:50,column:23}},"14":{start:{line:52,column:22},end:{line:52,column:52}},"15":{start:{line:53,column:21},end:{line:53,column:67}},"16":{start:{line:55,column:30},end:{line:55,column:31}},"17":{start:{line:56,column:4},end:{line:59,column:5}},"18":{start:{line:56,column:17},end:{line:56,column:18}},"19":{start:{line:57,column:6},end:{line:57,column:39}},"20":{start:{line:58,column:6},end:{line:58,column:42}},"21":{start:{line:61,column:4},end:{line:61,column:25}},"22":{start:{line:62,column:4},end:{line:62,column:61}},"23":{start:{line:64,column:4},end:{line:64,column:22}},"24":{start:{line:65,column:4},end:{line:65,column:21}},"25":{start:{line:66,column:4},end:{line:66,column:25}},"26":{start:{line:68,column:4},end:{line:68,column:16}},"27":{start:{line:78,column:19},end:{line:78,column:38}},"28":{start:{line:81,column:22},end:{line:81,column:41}},"29":{start:{line:82,column:4},end:{line:85,column:5}},"30":{start:{line:83,column:29},end:{line:83,column:36}},"31":{start:{line:84,column:6},end:{line:84,column:45}},"32":{start:{line:87,column:4},end:{line:87,column:20}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:9,column:2},end:{line:9,column:3}},loc:{start:{line:9,column:71},end:{line:12,column:3}},line:9},"1":{name:"(anonymous_1)",decl:{start:{line:22,column:2},end:{line:22,column:3}},loc:{start:{line:22,column:13},end:{line:33,column:3}},line:22},"2":{name:"(anonymous_2)",decl:{start:{line:23,column:43},end:{line:23,column:44}},loc:{start:{line:23,column:51},end:{line:23,column:74}},line:23},"3":{name:"(anonymous_3)",decl:{start:{line:49,column:2},end:{line:49,column:3}},loc:{start:{line:49,column:36},end:{line:69,column:3}},line:49},"4":{name:"(anonymous_4)",decl:{start:{line:77,column:2},end:{line:77,column:3}},loc:{start:{line:77,column:21},end:{line:88,column:3}},line:77}},branchMap:{"0":{loc:{start:{line:9,column:14},end:{line:9,column:69}},type:"default-arg",locations:[{start:{line:9,column:67},end:{line:9,column:69}}],line:9},"1":{loc:{start:{line:9,column:16},end:{line:9,column:35}},type:"default-arg",locations:[{start:{line:9,column:23},end:{line:9,column:35}}],line:9},"2":{loc:{start:{line:9,column:37},end:{line:9,column:62}},type:"default-arg",locations:[{start:{line:9,column:47},end:{line:9,column:62}}],line:9},"3":{loc:{start:{line:82,column:4},end:{line:85,column:5}},type:"if",locations:[{start:{line:82,column:4},end:{line:85,column:5}},{start:{line:82,column:4},end:{line:85,column:5}}],line:82}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0},b:{"0":[0],"1":[0],"2":[0],"3":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"040615b2e6d4a93de2f822c2375c1e689a413fe7"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();const DEFAULT_BASE=(cov_2b5x4oq2z9.s[0]++,37);const DEFAULT_MODULUS=(cov_2b5x4oq2z9.s[1]++,101);export default class PolynomialHash{/**
   * @param {number} [base] - Base number that is used to create the polynomial.
   * @param {number} [modulus] - Modulus number that keeps the hash from overflowing.
   */constructor({base=(cov_2b5x4oq2z9.b[1][0]++,DEFAULT_BASE),modulus=(cov_2b5x4oq2z9.b[2][0]++,DEFAULT_MODULUS)}=(cov_2b5x4oq2z9.b[0][0]++,{})){cov_2b5x4oq2z9.f[0]++;cov_2b5x4oq2z9.s[2]++;this.base=base;cov_2b5x4oq2z9.s[3]++;this.modulus=modulus;}/**
   * Function that creates hash representation of the word.
   *
   * Time complexity: O(word.length).
   *
   * @param {string} word - String that needs to be hashed.
   * @return {number}
   */hash(word){cov_2b5x4oq2z9.f[1]++;const charCodes=(cov_2b5x4oq2z9.s[4]++,Array.from(word).map(char=>{cov_2b5x4oq2z9.f[2]++;cov_2b5x4oq2z9.s[5]++;return this.charToNumber(char);}));let hash=(cov_2b5x4oq2z9.s[6]++,0);cov_2b5x4oq2z9.s[7]++;for(let charIndex=(cov_2b5x4oq2z9.s[8]++,0);charIndex<charCodes.length;charIndex+=1){cov_2b5x4oq2z9.s[9]++;hash*=this.base;cov_2b5x4oq2z9.s[10]++;hash+=charCodes[charIndex];cov_2b5x4oq2z9.s[11]++;hash%=this.modulus;}cov_2b5x4oq2z9.s[12]++;return hash;}/**
   * Function that creates hash representation of the word
   * based on previous word (shifted by one character left) hash value.
   *
   * Recalculates the hash representation of a word so that it isn't
   * necessary to traverse the whole word again.
   *
   * Time complexity: O(1).
   *
   * @param {number} prevHash
   * @param {string} prevWord
   * @param {string} newWord
   * @return {number}
   */roll(prevHash,prevWord,newWord){cov_2b5x4oq2z9.f[3]++;let hash=(cov_2b5x4oq2z9.s[13]++,prevHash);const prevValue=(cov_2b5x4oq2z9.s[14]++,this.charToNumber(prevWord[0]));const newValue=(cov_2b5x4oq2z9.s[15]++,this.charToNumber(newWord[newWord.length-1]));let prevValueMultiplier=(cov_2b5x4oq2z9.s[16]++,1);cov_2b5x4oq2z9.s[17]++;for(let i=(cov_2b5x4oq2z9.s[18]++,1);i<prevWord.length;i+=1){cov_2b5x4oq2z9.s[19]++;prevValueMultiplier*=this.base;cov_2b5x4oq2z9.s[20]++;prevValueMultiplier%=this.modulus;}cov_2b5x4oq2z9.s[21]++;hash+=this.modulus;cov_2b5x4oq2z9.s[22]++;hash-=prevValue*prevValueMultiplier%this.modulus;cov_2b5x4oq2z9.s[23]++;hash*=this.base;cov_2b5x4oq2z9.s[24]++;hash+=newValue;cov_2b5x4oq2z9.s[25]++;hash%=this.modulus;cov_2b5x4oq2z9.s[26]++;return hash;}/**
   * Converts char to number.
   *
   * @param {string} char
   * @return {number}
   */charToNumber(char){cov_2b5x4oq2z9.f[4]++;let charCode=(cov_2b5x4oq2z9.s[27]++,char.codePointAt(0));// Check if character has surrogate pair.
const surrogate=(cov_2b5x4oq2z9.s[28]++,char.codePointAt(1));cov_2b5x4oq2z9.s[29]++;if(surrogate!==undefined){cov_2b5x4oq2z9.b[3][0]++;const surrogateShift=(cov_2b5x4oq2z9.s[30]++,2**16);cov_2b5x4oq2z9.s[31]++;charCode+=surrogate*surrogateShift;}else{cov_2b5x4oq2z9.b[3][1]++;}cov_2b5x4oq2z9.s[32]++;return charCode;}}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9oYi9sYXRsaWIvanNzZXJ2ZXIvamF2YXNjcmlwdC1hbGdvcml0aG1zL3NyYy9hbGdvcml0aG1zL2NyeXB0b2dyYXBoeS9wb2x5bm9taWFsLWhhc2gvUG9seW5vbWlhbEhhc2guanMiXSwibmFtZXMiOlsiREVGQVVMVF9CQVNFIiwiREVGQVVMVF9NT0RVTFVTIiwiUG9seW5vbWlhbEhhc2giLCJjb25zdHJ1Y3RvciIsImJhc2UiLCJtb2R1bHVzIiwiaGFzaCIsIndvcmQiLCJjaGFyQ29kZXMiLCJBcnJheSIsImZyb20iLCJtYXAiLCJjaGFyIiwiY2hhclRvTnVtYmVyIiwiY2hhckluZGV4IiwibGVuZ3RoIiwicm9sbCIsInByZXZIYXNoIiwicHJldldvcmQiLCJuZXdXb3JkIiwicHJldlZhbHVlIiwibmV3VmFsdWUiLCJwcmV2VmFsdWVNdWx0aXBsaWVyIiwiaSIsImNoYXJDb2RlIiwiY29kZVBvaW50QXQiLCJzdXJyb2dhdGUiLCJ1bmRlZmluZWQiLCJzdXJyb2dhdGVTaGlmdCJdLCJtYXBwaW5ncyI6InFtSUFBQSxLQUFNQSxDQUFBQSxZQUFZLHdCQUFHLEVBQUgsQ0FBbEIsQ0FDQSxLQUFNQyxDQUFBQSxlQUFlLHdCQUFHLEdBQUgsQ0FBckIsQ0FFQSxjQUFlLE1BQU1DLENBQUFBLGNBQWUsQ0FDbEM7OztLQUlBQyxXQUFXLENBQUMsQ0FBRUMsSUFBSSwyQkFBR0osWUFBSCxDQUFOLENBQXVCSyxPQUFPLDJCQUFHSixlQUFILENBQTlCLDRCQUFxRCxFQUFyRCxDQUFELENBQTBELDZDQUNuRSxLQUFLRyxJQUFMLENBQVlBLElBQVosQ0FEbUUsc0JBRW5FLEtBQUtDLE9BQUwsQ0FBZUEsT0FBZixDQUNELENBRUQ7Ozs7Ozs7S0FRQUMsSUFBSSxDQUFDQyxJQUFELENBQU8sdUJBQ1QsS0FBTUMsQ0FBQUEsU0FBUyx3QkFBR0MsS0FBSyxDQUFDQyxJQUFOLENBQVdILElBQVgsRUFBaUJJLEdBQWpCLENBQXFCQyxJQUFJLEVBQUkseURBQUtDLFlBQUwsQ0FBa0JELElBQWxCLEVBQXVCLENBQXBELENBQUgsQ0FBZixDQUVBLEdBQUlOLENBQUFBLElBQUksd0JBQUcsQ0FBSCxDQUFSLENBSFMsc0JBSVQsSUFBSyxHQUFJUSxDQUFBQSxTQUFTLHdCQUFHLENBQUgsQ0FBbEIsQ0FBd0JBLFNBQVMsQ0FBR04sU0FBUyxDQUFDTyxNQUE5QyxDQUFzREQsU0FBUyxFQUFJLENBQW5FLENBQXNFLHVCQUNwRVIsSUFBSSxFQUFJLEtBQUtGLElBQWIsQ0FEb0UsdUJBRXBFRSxJQUFJLEVBQUlFLFNBQVMsQ0FBQ00sU0FBRCxDQUFqQixDQUZvRSx1QkFHcEVSLElBQUksRUFBSSxLQUFLRCxPQUFiLENBQ0QsQ0FSUSx1QkFVVCxNQUFPQyxDQUFBQSxJQUFQLENBQ0QsQ0FFRDs7Ozs7Ozs7Ozs7OztLQWNBVSxJQUFJLENBQUNDLFFBQUQsQ0FBV0MsUUFBWCxDQUFxQkMsT0FBckIsQ0FBOEIsdUJBQ2hDLEdBQUliLENBQUFBLElBQUkseUJBQUdXLFFBQUgsQ0FBUixDQUVBLEtBQU1HLENBQUFBLFNBQVMseUJBQUcsS0FBS1AsWUFBTCxDQUFrQkssUUFBUSxDQUFDLENBQUQsQ0FBMUIsQ0FBSCxDQUFmLENBQ0EsS0FBTUcsQ0FBQUEsUUFBUSx5QkFBRyxLQUFLUixZQUFMLENBQWtCTSxPQUFPLENBQUNBLE9BQU8sQ0FBQ0osTUFBUixDQUFpQixDQUFsQixDQUF6QixDQUFILENBQWQsQ0FFQSxHQUFJTyxDQUFBQSxtQkFBbUIseUJBQUcsQ0FBSCxDQUF2QixDQU5nQyx1QkFPaEMsSUFBSyxHQUFJQyxDQUFBQSxDQUFDLHlCQUFHLENBQUgsQ0FBVixDQUFnQkEsQ0FBQyxDQUFHTCxRQUFRLENBQUNILE1BQTdCLENBQXFDUSxDQUFDLEVBQUksQ0FBMUMsQ0FBNkMsd0JBQzNDRCxtQkFBbUIsRUFBSSxLQUFLbEIsSUFBNUIsQ0FEMkMsdUJBRTNDa0IsbUJBQW1CLEVBQUksS0FBS2pCLE9BQTVCLENBQ0QsQ0FWK0IsdUJBWWhDQyxJQUFJLEVBQUksS0FBS0QsT0FBYixDQVpnQyx1QkFhaENDLElBQUksRUFBS2MsU0FBUyxDQUFHRSxtQkFBYixDQUFvQyxLQUFLakIsT0FBakQsQ0FiZ0MsdUJBZWhDQyxJQUFJLEVBQUksS0FBS0YsSUFBYixDQWZnQyx1QkFnQmhDRSxJQUFJLEVBQUllLFFBQVIsQ0FoQmdDLHVCQWlCaENmLElBQUksRUFBSSxLQUFLRCxPQUFiLENBakJnQyx1QkFtQmhDLE1BQU9DLENBQUFBLElBQVAsQ0FDRCxDQUVEOzs7OztLQU1BTyxZQUFZLENBQUNELElBQUQsQ0FBTyx1QkFDakIsR0FBSVksQ0FBQUEsUUFBUSx5QkFBR1osSUFBSSxDQUFDYSxXQUFMLENBQWlCLENBQWpCLENBQUgsQ0FBWixDQUVBO0FBQ0EsS0FBTUMsQ0FBQUEsU0FBUyx5QkFBR2QsSUFBSSxDQUFDYSxXQUFMLENBQWlCLENBQWpCLENBQUgsQ0FBZixDQUppQix1QkFLakIsR0FBSUMsU0FBUyxHQUFLQyxTQUFsQixDQUE2QiwwQkFDM0IsS0FBTUMsQ0FBQUEsY0FBYyx5QkFBRyxHQUFLLEVBQVIsQ0FBcEIsQ0FEMkIsdUJBRTNCSixRQUFRLEVBQUlFLFNBQVMsQ0FBR0UsY0FBeEIsQ0FDRCxDQUhELCtCQUxpQix1QkFVakIsTUFBT0osQ0FBQUEsUUFBUCxDQUNELENBcEZpQyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IERFRkFVTFRfQkFTRSA9IDM3O1xuY29uc3QgREVGQVVMVF9NT0RVTFVTID0gMTAxO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb2x5bm9taWFsSGFzaCB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gW2Jhc2VdIC0gQmFzZSBudW1iZXIgdGhhdCBpcyB1c2VkIHRvIGNyZWF0ZSB0aGUgcG9seW5vbWlhbC5cbiAgICogQHBhcmFtIHtudW1iZXJ9IFttb2R1bHVzXSAtIE1vZHVsdXMgbnVtYmVyIHRoYXQga2VlcHMgdGhlIGhhc2ggZnJvbSBvdmVyZmxvd2luZy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKHsgYmFzZSA9IERFRkFVTFRfQkFTRSwgbW9kdWx1cyA9IERFRkFVTFRfTU9EVUxVUyB9ID0ge30pIHtcbiAgICB0aGlzLmJhc2UgPSBiYXNlO1xuICAgIHRoaXMubW9kdWx1cyA9IG1vZHVsdXM7XG4gIH1cblxuICAvKipcbiAgICogRnVuY3Rpb24gdGhhdCBjcmVhdGVzIGhhc2ggcmVwcmVzZW50YXRpb24gb2YgdGhlIHdvcmQuXG4gICAqXG4gICAqIFRpbWUgY29tcGxleGl0eTogTyh3b3JkLmxlbmd0aCkuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB3b3JkIC0gU3RyaW5nIHRoYXQgbmVlZHMgdG8gYmUgaGFzaGVkLlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICBoYXNoKHdvcmQpIHtcbiAgICBjb25zdCBjaGFyQ29kZXMgPSBBcnJheS5mcm9tKHdvcmQpLm1hcChjaGFyID0+IHRoaXMuY2hhclRvTnVtYmVyKGNoYXIpKTtcblxuICAgIGxldCBoYXNoID0gMDtcbiAgICBmb3IgKGxldCBjaGFySW5kZXggPSAwOyBjaGFySW5kZXggPCBjaGFyQ29kZXMubGVuZ3RoOyBjaGFySW5kZXggKz0gMSkge1xuICAgICAgaGFzaCAqPSB0aGlzLmJhc2U7XG4gICAgICBoYXNoICs9IGNoYXJDb2Rlc1tjaGFySW5kZXhdO1xuICAgICAgaGFzaCAlPSB0aGlzLm1vZHVsdXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIGhhc2g7XG4gIH1cblxuICAvKipcbiAgICogRnVuY3Rpb24gdGhhdCBjcmVhdGVzIGhhc2ggcmVwcmVzZW50YXRpb24gb2YgdGhlIHdvcmRcbiAgICogYmFzZWQgb24gcHJldmlvdXMgd29yZCAoc2hpZnRlZCBieSBvbmUgY2hhcmFjdGVyIGxlZnQpIGhhc2ggdmFsdWUuXG4gICAqXG4gICAqIFJlY2FsY3VsYXRlcyB0aGUgaGFzaCByZXByZXNlbnRhdGlvbiBvZiBhIHdvcmQgc28gdGhhdCBpdCBpc24ndFxuICAgKiBuZWNlc3NhcnkgdG8gdHJhdmVyc2UgdGhlIHdob2xlIHdvcmQgYWdhaW4uXG4gICAqXG4gICAqIFRpbWUgY29tcGxleGl0eTogTygxKS5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHByZXZIYXNoXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwcmV2V29yZFxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmV3V29yZFxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICByb2xsKHByZXZIYXNoLCBwcmV2V29yZCwgbmV3V29yZCkge1xuICAgIGxldCBoYXNoID0gcHJldkhhc2g7XG5cbiAgICBjb25zdCBwcmV2VmFsdWUgPSB0aGlzLmNoYXJUb051bWJlcihwcmV2V29yZFswXSk7XG4gICAgY29uc3QgbmV3VmFsdWUgPSB0aGlzLmNoYXJUb051bWJlcihuZXdXb3JkW25ld1dvcmQubGVuZ3RoIC0gMV0pO1xuXG4gICAgbGV0IHByZXZWYWx1ZU11bHRpcGxpZXIgPSAxO1xuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgcHJldldvcmQubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIHByZXZWYWx1ZU11bHRpcGxpZXIgKj0gdGhpcy5iYXNlO1xuICAgICAgcHJldlZhbHVlTXVsdGlwbGllciAlPSB0aGlzLm1vZHVsdXM7XG4gICAgfVxuXG4gICAgaGFzaCArPSB0aGlzLm1vZHVsdXM7XG4gICAgaGFzaCAtPSAocHJldlZhbHVlICogcHJldlZhbHVlTXVsdGlwbGllcikgJSB0aGlzLm1vZHVsdXM7XG5cbiAgICBoYXNoICo9IHRoaXMuYmFzZTtcbiAgICBoYXNoICs9IG5ld1ZhbHVlO1xuICAgIGhhc2ggJT0gdGhpcy5tb2R1bHVzO1xuXG4gICAgcmV0dXJuIGhhc2g7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgY2hhciB0byBudW1iZXIuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjaGFyXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIGNoYXJUb051bWJlcihjaGFyKSB7XG4gICAgbGV0IGNoYXJDb2RlID0gY2hhci5jb2RlUG9pbnRBdCgwKTtcblxuICAgIC8vIENoZWNrIGlmIGNoYXJhY3RlciBoYXMgc3Vycm9nYXRlIHBhaXIuXG4gICAgY29uc3Qgc3Vycm9nYXRlID0gY2hhci5jb2RlUG9pbnRBdCgxKTtcbiAgICBpZiAoc3Vycm9nYXRlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGNvbnN0IHN1cnJvZ2F0ZVNoaWZ0ID0gMiAqKiAxNjtcbiAgICAgIGNoYXJDb2RlICs9IHN1cnJvZ2F0ZSAqIHN1cnJvZ2F0ZVNoaWZ0O1xuICAgIH1cblxuICAgIHJldHVybiBjaGFyQ29kZTtcbiAgfVxufVxuIl19