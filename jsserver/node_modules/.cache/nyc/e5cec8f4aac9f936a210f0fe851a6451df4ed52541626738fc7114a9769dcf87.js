var cov_2ipcxiry6k=function(){var path="/Users/hb/latlib/jsserver/javascript-algorithms/src/algorithms/graph/detect-cycle/detectUndirectedCycle.js";var hash="8d5686242cf65d4fc7ba9c341c128c203ea38d0b";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/hb/latlib/jsserver/javascript-algorithms/src/algorithms/graph/detect-cycle/detectUndirectedCycle.js",statementMap:{"0":{start:{line:9,column:14},end:{line:9,column:18}},"1":{start:{line:12,column:26},end:{line:12,column:28}},"2":{start:{line:15,column:18},end:{line:15,column:20}},"3":{start:{line:18,column:20},end:{line:52,column:3}},"4":{start:{line:21,column:6},end:{line:23,column:7}},"5":{start:{line:22,column:8},end:{line:22,column:21}},"6":{start:{line:26,column:34},end:{line:26,column:65}},"7":{start:{line:27,column:37},end:{line:27,column:94}},"8":{start:{line:29,column:6},end:{line:29,column:60}},"9":{start:{line:32,column:6},end:{line:50,column:7}},"10":{start:{line:34,column:8},end:{line:34,column:19}},"11":{start:{line:36,column:33},end:{line:36,column:46}},"12":{start:{line:37,column:34},end:{line:37,column:48}},"13":{start:{line:39,column:8},end:{line:43,column:9}},"14":{start:{line:40,column:10},end:{line:40,column:67}},"15":{start:{line:41,column:10},end:{line:41,column:51}},"16":{start:{line:42,column:10},end:{line:42,column:70}},"17":{start:{line:45,column:8},end:{line:45,column:65}},"18":{start:{line:48,column:8},end:{line:48,column:64}},"19":{start:{line:49,column:8},end:{line:49,column:57}},"20":{start:{line:55,column:22},end:{line:55,column:47}},"21":{start:{line:56,column:2},end:{line:56,column:50}},"22":{start:{line:58,column:2},end:{line:58,column:15}}},fnMap:{"0":{name:"detectUndirectedCycle",decl:{start:{line:8,column:24},end:{line:8,column:45}},loc:{start:{line:8,column:53},end:{line:59,column:1}},line:8},"1":{name:"(anonymous_1)",decl:{start:{line:19,column:20},end:{line:19,column:21}},loc:{start:{line:19,column:55},end:{line:30,column:5}},line:19},"2":{name:"(anonymous_2)",decl:{start:{line:31,column:17},end:{line:31,column:18}},loc:{start:{line:31,column:56},end:{line:51,column:5}},line:31}},branchMap:{"0":{loc:{start:{line:21,column:6},end:{line:23,column:7}},type:"if",locations:[{start:{line:21,column:6},end:{line:23,column:7}},{start:{line:21,column:6},end:{line:23,column:7}}],line:21},"1":{loc:{start:{line:27,column:37},end:{line:27,column:94}},type:"cond-expr",locations:[{start:{line:27,column:59},end:{line:27,column:87}},{start:{line:27,column:90},end:{line:27,column:94}}],line:27},"2":{loc:{start:{line:32,column:6},end:{line:50,column:7}},type:"if",locations:[{start:{line:32,column:6},end:{line:50,column:7}},{start:{line:32,column:6},end:{line:50,column:7}}],line:32}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0},f:{"0":0,"1":0,"2":0},b:{"0":[0,0],"1":[0,0],"2":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"8d5686242cf65d4fc7ba9c341c128c203ea38d0b"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();import depthFirstSearch from'../depth-first-search/depthFirstSearch';/**
 * Detect cycle in undirected graph using Depth First Search.
 *
 * @param {Graph} graph
 */export default function detectUndirectedCycle(graph){cov_2ipcxiry6k.f[0]++;let cycle=(cov_2ipcxiry6k.s[0]++,null);// List of vertices that we have visited.
const visitedVertices=(cov_2ipcxiry6k.s[1]++,{});// List of parents vertices for every visited vertex.
const parents=(cov_2ipcxiry6k.s[2]++,{});// Callbacks for DFS traversing.
const callbacks=(cov_2ipcxiry6k.s[3]++,{allowTraversal:({currentVertex,nextVertex})=>{cov_2ipcxiry6k.f[1]++;cov_2ipcxiry6k.s[4]++;// Don't allow further traversal in case if cycle has been detected.
if(cycle){cov_2ipcxiry6k.b[0][0]++;cov_2ipcxiry6k.s[5]++;return false;}else{cov_2ipcxiry6k.b[0][1]++;}// Don't allow traversal from child back to its parent.
const currentVertexParent=(cov_2ipcxiry6k.s[6]++,parents[currentVertex.getKey()]);const currentVertexParentKey=(cov_2ipcxiry6k.s[7]++,currentVertexParent?(cov_2ipcxiry6k.b[1][0]++,currentVertexParent.getKey()):(cov_2ipcxiry6k.b[1][1]++,null));cov_2ipcxiry6k.s[8]++;return currentVertexParentKey!==nextVertex.getKey();},enterVertex:({currentVertex,previousVertex})=>{cov_2ipcxiry6k.f[2]++;cov_2ipcxiry6k.s[9]++;if(visitedVertices[currentVertex.getKey()]){cov_2ipcxiry6k.b[2][0]++;cov_2ipcxiry6k.s[10]++;// Compile cycle path based on parents of previous vertices.
cycle={};let currentCycleVertex=(cov_2ipcxiry6k.s[11]++,currentVertex);let previousCycleVertex=(cov_2ipcxiry6k.s[12]++,previousVertex);cov_2ipcxiry6k.s[13]++;while(previousCycleVertex.getKey()!==currentVertex.getKey()){cov_2ipcxiry6k.s[14]++;cycle[currentCycleVertex.getKey()]=previousCycleVertex;cov_2ipcxiry6k.s[15]++;currentCycleVertex=previousCycleVertex;cov_2ipcxiry6k.s[16]++;previousCycleVertex=parents[previousCycleVertex.getKey()];}cov_2ipcxiry6k.s[17]++;cycle[currentCycleVertex.getKey()]=previousCycleVertex;}else{cov_2ipcxiry6k.b[2][1]++;cov_2ipcxiry6k.s[18]++;// Add next vertex to visited set.
visitedVertices[currentVertex.getKey()]=currentVertex;cov_2ipcxiry6k.s[19]++;parents[currentVertex.getKey()]=previousVertex;}}});// Start DFS traversing.
const startVertex=(cov_2ipcxiry6k.s[20]++,graph.getAllVertices()[0]);cov_2ipcxiry6k.s[21]++;depthFirstSearch(graph,startVertex,callbacks);cov_2ipcxiry6k.s[22]++;return cycle;}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9oYi9sYXRsaWIvanNzZXJ2ZXIvamF2YXNjcmlwdC1hbGdvcml0aG1zL3NyYy9hbGdvcml0aG1zL2dyYXBoL2RldGVjdC1jeWNsZS9kZXRlY3RVbmRpcmVjdGVkQ3ljbGUuanMiXSwibmFtZXMiOlsiZGVwdGhGaXJzdFNlYXJjaCIsImRldGVjdFVuZGlyZWN0ZWRDeWNsZSIsImdyYXBoIiwiY3ljbGUiLCJ2aXNpdGVkVmVydGljZXMiLCJwYXJlbnRzIiwiY2FsbGJhY2tzIiwiYWxsb3dUcmF2ZXJzYWwiLCJjdXJyZW50VmVydGV4IiwibmV4dFZlcnRleCIsImN1cnJlbnRWZXJ0ZXhQYXJlbnQiLCJnZXRLZXkiLCJjdXJyZW50VmVydGV4UGFyZW50S2V5IiwiZW50ZXJWZXJ0ZXgiLCJwcmV2aW91c1ZlcnRleCIsImN1cnJlbnRDeWNsZVZlcnRleCIsInByZXZpb3VzQ3ljbGVWZXJ0ZXgiLCJzdGFydFZlcnRleCIsImdldEFsbFZlcnRpY2VzIl0sIm1hcHBpbmdzIjoiOG9HQUFBLE1BQU9BLENBQUFBLGdCQUFQLEtBQTZCLHdDQUE3QixDQUVBOzs7O0dBS0EsY0FBZSxTQUFTQyxDQUFBQSxxQkFBVCxDQUErQkMsS0FBL0IsQ0FBc0MsdUJBQ25ELEdBQUlDLENBQUFBLEtBQUssd0JBQUcsSUFBSCxDQUFULENBRUE7QUFDQSxLQUFNQyxDQUFBQSxlQUFlLHdCQUFHLEVBQUgsQ0FBckIsQ0FFQTtBQUNBLEtBQU1DLENBQUFBLE9BQU8sd0JBQUcsRUFBSCxDQUFiLENBRUE7QUFDQSxLQUFNQyxDQUFBQSxTQUFTLHdCQUFHLENBQ2hCQyxjQUFjLENBQUUsQ0FBQyxDQUFFQyxhQUFGLENBQWlCQyxVQUFqQixDQUFELEdBQW1DLDZDQUNqRDtBQUNBLEdBQUlOLEtBQUosQ0FBVyxnREFDVCxNQUFPLE1BQVAsQ0FDRCxDQUZELCtCQUlBO0FBQ0EsS0FBTU8sQ0FBQUEsbUJBQW1CLHdCQUFHTCxPQUFPLENBQUNHLGFBQWEsQ0FBQ0csTUFBZCxFQUFELENBQVYsQ0FBekIsQ0FDQSxLQUFNQyxDQUFBQSxzQkFBc0Isd0JBQUdGLG1CQUFtQiwyQkFBR0EsbUJBQW1CLENBQUNDLE1BQXBCLEVBQUgsNEJBQWtDLElBQWxDLENBQXRCLENBQTVCLENBUmlELHNCQVVqRCxNQUFPQyxDQUFBQSxzQkFBc0IsR0FBS0gsVUFBVSxDQUFDRSxNQUFYLEVBQWxDLENBQ0QsQ0FaZSxDQWFoQkUsV0FBVyxDQUFFLENBQUMsQ0FBRUwsYUFBRixDQUFpQk0sY0FBakIsQ0FBRCxHQUF1Qyw2Q0FDbEQsR0FBSVYsZUFBZSxDQUFDSSxhQUFhLENBQUNHLE1BQWQsRUFBRCxDQUFuQixDQUE2QyxpREFDM0M7QUFDQVIsS0FBSyxDQUFHLEVBQVIsQ0FFQSxHQUFJWSxDQUFBQSxrQkFBa0IseUJBQUdQLGFBQUgsQ0FBdEIsQ0FDQSxHQUFJUSxDQUFBQSxtQkFBbUIseUJBQUdGLGNBQUgsQ0FBdkIsQ0FMMkMsdUJBTzNDLE1BQU9FLG1CQUFtQixDQUFDTCxNQUFwQixLQUFpQ0gsYUFBYSxDQUFDRyxNQUFkLEVBQXhDLENBQWdFLHdCQUM5RFIsS0FBSyxDQUFDWSxrQkFBa0IsQ0FBQ0osTUFBbkIsRUFBRCxDQUFMLENBQXFDSyxtQkFBckMsQ0FEOEQsdUJBRTlERCxrQkFBa0IsQ0FBR0MsbUJBQXJCLENBRjhELHVCQUc5REEsbUJBQW1CLENBQUdYLE9BQU8sQ0FBQ1csbUJBQW1CLENBQUNMLE1BQXBCLEVBQUQsQ0FBN0IsQ0FDRCxDQVgwQyx1QkFhM0NSLEtBQUssQ0FBQ1ksa0JBQWtCLENBQUNKLE1BQW5CLEVBQUQsQ0FBTCxDQUFxQ0ssbUJBQXJDLENBQ0QsQ0FkRCxJQWNPLGlEQUNMO0FBQ0FaLGVBQWUsQ0FBQ0ksYUFBYSxDQUFDRyxNQUFkLEVBQUQsQ0FBZixDQUEwQ0gsYUFBMUMsQ0FGSyx1QkFHTEgsT0FBTyxDQUFDRyxhQUFhLENBQUNHLE1BQWQsRUFBRCxDQUFQLENBQWtDRyxjQUFsQyxDQUNELENBQ0YsQ0FqQ2UsQ0FBSCxDQUFmLENBb0NBO0FBQ0EsS0FBTUcsQ0FBQUEsV0FBVyx5QkFBR2YsS0FBSyxDQUFDZ0IsY0FBTixHQUF1QixDQUF2QixDQUFILENBQWpCLENBL0NtRCx1QkFnRG5EbEIsZ0JBQWdCLENBQUNFLEtBQUQsQ0FBUWUsV0FBUixDQUFxQlgsU0FBckIsQ0FBaEIsQ0FoRG1ELHVCQWtEbkQsTUFBT0gsQ0FBQUEsS0FBUCxDQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGRlcHRoRmlyc3RTZWFyY2ggZnJvbSAnLi4vZGVwdGgtZmlyc3Qtc2VhcmNoL2RlcHRoRmlyc3RTZWFyY2gnO1xuXG4vKipcbiAqIERldGVjdCBjeWNsZSBpbiB1bmRpcmVjdGVkIGdyYXBoIHVzaW5nIERlcHRoIEZpcnN0IFNlYXJjaC5cbiAqXG4gKiBAcGFyYW0ge0dyYXBofSBncmFwaFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZXRlY3RVbmRpcmVjdGVkQ3ljbGUoZ3JhcGgpIHtcbiAgbGV0IGN5Y2xlID0gbnVsbDtcblxuICAvLyBMaXN0IG9mIHZlcnRpY2VzIHRoYXQgd2UgaGF2ZSB2aXNpdGVkLlxuICBjb25zdCB2aXNpdGVkVmVydGljZXMgPSB7fTtcblxuICAvLyBMaXN0IG9mIHBhcmVudHMgdmVydGljZXMgZm9yIGV2ZXJ5IHZpc2l0ZWQgdmVydGV4LlxuICBjb25zdCBwYXJlbnRzID0ge307XG5cbiAgLy8gQ2FsbGJhY2tzIGZvciBERlMgdHJhdmVyc2luZy5cbiAgY29uc3QgY2FsbGJhY2tzID0ge1xuICAgIGFsbG93VHJhdmVyc2FsOiAoeyBjdXJyZW50VmVydGV4LCBuZXh0VmVydGV4IH0pID0+IHtcbiAgICAgIC8vIERvbid0IGFsbG93IGZ1cnRoZXIgdHJhdmVyc2FsIGluIGNhc2UgaWYgY3ljbGUgaGFzIGJlZW4gZGV0ZWN0ZWQuXG4gICAgICBpZiAoY3ljbGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICAvLyBEb24ndCBhbGxvdyB0cmF2ZXJzYWwgZnJvbSBjaGlsZCBiYWNrIHRvIGl0cyBwYXJlbnQuXG4gICAgICBjb25zdCBjdXJyZW50VmVydGV4UGFyZW50ID0gcGFyZW50c1tjdXJyZW50VmVydGV4LmdldEtleSgpXTtcbiAgICAgIGNvbnN0IGN1cnJlbnRWZXJ0ZXhQYXJlbnRLZXkgPSBjdXJyZW50VmVydGV4UGFyZW50ID8gY3VycmVudFZlcnRleFBhcmVudC5nZXRLZXkoKSA6IG51bGw7XG5cbiAgICAgIHJldHVybiBjdXJyZW50VmVydGV4UGFyZW50S2V5ICE9PSBuZXh0VmVydGV4LmdldEtleSgpO1xuICAgIH0sXG4gICAgZW50ZXJWZXJ0ZXg6ICh7IGN1cnJlbnRWZXJ0ZXgsIHByZXZpb3VzVmVydGV4IH0pID0+IHtcbiAgICAgIGlmICh2aXNpdGVkVmVydGljZXNbY3VycmVudFZlcnRleC5nZXRLZXkoKV0pIHtcbiAgICAgICAgLy8gQ29tcGlsZSBjeWNsZSBwYXRoIGJhc2VkIG9uIHBhcmVudHMgb2YgcHJldmlvdXMgdmVydGljZXMuXG4gICAgICAgIGN5Y2xlID0ge307XG5cbiAgICAgICAgbGV0IGN1cnJlbnRDeWNsZVZlcnRleCA9IGN1cnJlbnRWZXJ0ZXg7XG4gICAgICAgIGxldCBwcmV2aW91c0N5Y2xlVmVydGV4ID0gcHJldmlvdXNWZXJ0ZXg7XG5cbiAgICAgICAgd2hpbGUgKHByZXZpb3VzQ3ljbGVWZXJ0ZXguZ2V0S2V5KCkgIT09IGN1cnJlbnRWZXJ0ZXguZ2V0S2V5KCkpIHtcbiAgICAgICAgICBjeWNsZVtjdXJyZW50Q3ljbGVWZXJ0ZXguZ2V0S2V5KCldID0gcHJldmlvdXNDeWNsZVZlcnRleDtcbiAgICAgICAgICBjdXJyZW50Q3ljbGVWZXJ0ZXggPSBwcmV2aW91c0N5Y2xlVmVydGV4O1xuICAgICAgICAgIHByZXZpb3VzQ3ljbGVWZXJ0ZXggPSBwYXJlbnRzW3ByZXZpb3VzQ3ljbGVWZXJ0ZXguZ2V0S2V5KCldO1xuICAgICAgICB9XG5cbiAgICAgICAgY3ljbGVbY3VycmVudEN5Y2xlVmVydGV4LmdldEtleSgpXSA9IHByZXZpb3VzQ3ljbGVWZXJ0ZXg7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBBZGQgbmV4dCB2ZXJ0ZXggdG8gdmlzaXRlZCBzZXQuXG4gICAgICAgIHZpc2l0ZWRWZXJ0aWNlc1tjdXJyZW50VmVydGV4LmdldEtleSgpXSA9IGN1cnJlbnRWZXJ0ZXg7XG4gICAgICAgIHBhcmVudHNbY3VycmVudFZlcnRleC5nZXRLZXkoKV0gPSBwcmV2aW91c1ZlcnRleDtcbiAgICAgIH1cbiAgICB9LFxuICB9O1xuXG4gIC8vIFN0YXJ0IERGUyB0cmF2ZXJzaW5nLlxuICBjb25zdCBzdGFydFZlcnRleCA9IGdyYXBoLmdldEFsbFZlcnRpY2VzKClbMF07XG4gIGRlcHRoRmlyc3RTZWFyY2goZ3JhcGgsIHN0YXJ0VmVydGV4LCBjYWxsYmFja3MpO1xuXG4gIHJldHVybiBjeWNsZTtcbn1cbiJdfQ==