var cov_2qgl8d0yuv=function(){var path="/Users/hb/latlib/jsserver/javascript-algorithms/src/algorithms/graph/topological-sorting/topologicalSort.js";var hash="2d6a919c1417ba4170a123a281db12ab4480d3ff";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/hb/latlib/jsserver/javascript-algorithms/src/algorithms/graph/topological-sorting/topologicalSort.js",statementMap:{"0":{start:{line:9,column:23},end:{line:9,column:25}},"1":{start:{line:10,column:2},end:{line:12,column:5}},"2":{start:{line:11,column:4},end:{line:11,column:43}},"3":{start:{line:15,column:21},end:{line:15,column:23}},"4":{start:{line:18,column:22},end:{line:18,column:33}},"5":{start:{line:20,column:23},end:{line:35,column:3}},"6":{start:{line:23,column:6},end:{line:23,column:57}},"7":{start:{line:26,column:6},end:{line:26,column:50}},"8":{start:{line:30,column:6},end:{line:30,column:38}},"9":{start:{line:33,column:6},end:{line:33,column:46}},"10":{start:{line:38,column:2},end:{line:44,column:3}},"11":{start:{line:39,column:29},end:{line:39,column:57}},"12":{start:{line:40,column:26},end:{line:40,column:56}},"13":{start:{line:43,column:4},end:{line:43,column:57}},"14":{start:{line:46,column:2},end:{line:46,column:31}}},fnMap:{"0":{name:"topologicalSort",decl:{start:{line:7,column:24},end:{line:7,column:39}},loc:{start:{line:7,column:47},end:{line:47,column:1}},line:7},"1":{name:"(anonymous_1)",decl:{start:{line:10,column:33},end:{line:10,column:34}},loc:{start:{line:10,column:45},end:{line:12,column:3}},line:10},"2":{name:"(anonymous_2)",decl:{start:{line:21,column:17},end:{line:21,column:18}},loc:{start:{line:21,column:40},end:{line:27,column:5}},line:21},"3":{name:"(anonymous_3)",decl:{start:{line:28,column:17},end:{line:28,column:18}},loc:{start:{line:28,column:40},end:{line:31,column:5}},line:28},"4":{name:"(anonymous_4)",decl:{start:{line:32,column:20},end:{line:32,column:21}},loc:{start:{line:32,column:40},end:{line:34,column:5}},line:32}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0},b:{},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"2d6a919c1417ba4170a123a281db12ab4480d3ff"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();import Stack from'../../../data-structures/stack/Stack';import depthFirstSearch from'../depth-first-search/depthFirstSearch';/**
 * @param {Graph} graph
 */export default function topologicalSort(graph){cov_2qgl8d0yuv.f[0]++;// Create a set of all vertices we want to visit.
const unvisitedSet=(cov_2qgl8d0yuv.s[0]++,{});cov_2qgl8d0yuv.s[1]++;graph.getAllVertices().forEach(vertex=>{cov_2qgl8d0yuv.f[1]++;cov_2qgl8d0yuv.s[2]++;unvisitedSet[vertex.getKey()]=vertex;});// Create a set for all vertices that we've already visited.
const visitedSet=(cov_2qgl8d0yuv.s[3]++,{});// Create a stack of already ordered vertices.
const sortedStack=(cov_2qgl8d0yuv.s[4]++,new Stack());const dfsCallbacks=(cov_2qgl8d0yuv.s[5]++,{enterVertex:({currentVertex})=>{cov_2qgl8d0yuv.f[2]++;cov_2qgl8d0yuv.s[6]++;// Add vertex to visited set in case if all its children has been explored.
visitedSet[currentVertex.getKey()]=currentVertex;// Remove this vertex from unvisited set.
cov_2qgl8d0yuv.s[7]++;delete unvisitedSet[currentVertex.getKey()];},leaveVertex:({currentVertex})=>{cov_2qgl8d0yuv.f[3]++;cov_2qgl8d0yuv.s[8]++;// If the vertex has been totally explored then we may push it to stack.
sortedStack.push(currentVertex);},allowTraversal:({nextVertex})=>{cov_2qgl8d0yuv.f[4]++;cov_2qgl8d0yuv.s[9]++;return!visitedSet[nextVertex.getKey()];}});// Let's go and do DFS for all unvisited nodes.
cov_2qgl8d0yuv.s[10]++;while(Object.keys(unvisitedSet).length){const currentVertexKey=(cov_2qgl8d0yuv.s[11]++,Object.keys(unvisitedSet)[0]);const currentVertex=(cov_2qgl8d0yuv.s[12]++,unvisitedSet[currentVertexKey]);// Do DFS for current node.
cov_2qgl8d0yuv.s[13]++;depthFirstSearch(graph,currentVertex,dfsCallbacks);}cov_2qgl8d0yuv.s[14]++;return sortedStack.toArray();}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9oYi9sYXRsaWIvanNzZXJ2ZXIvamF2YXNjcmlwdC1hbGdvcml0aG1zL3NyYy9hbGdvcml0aG1zL2dyYXBoL3RvcG9sb2dpY2FsLXNvcnRpbmcvdG9wb2xvZ2ljYWxTb3J0LmpzIl0sIm5hbWVzIjpbIlN0YWNrIiwiZGVwdGhGaXJzdFNlYXJjaCIsInRvcG9sb2dpY2FsU29ydCIsImdyYXBoIiwidW52aXNpdGVkU2V0IiwiZ2V0QWxsVmVydGljZXMiLCJmb3JFYWNoIiwidmVydGV4IiwiZ2V0S2V5IiwidmlzaXRlZFNldCIsInNvcnRlZFN0YWNrIiwiZGZzQ2FsbGJhY2tzIiwiZW50ZXJWZXJ0ZXgiLCJjdXJyZW50VmVydGV4IiwibGVhdmVWZXJ0ZXgiLCJwdXNoIiwiYWxsb3dUcmF2ZXJzYWwiLCJuZXh0VmVydGV4IiwiT2JqZWN0Iiwia2V5cyIsImxlbmd0aCIsImN1cnJlbnRWZXJ0ZXhLZXkiLCJ0b0FycmF5Il0sIm1hcHBpbmdzIjoiNDFFQUFBLE1BQU9BLENBQUFBLEtBQVAsS0FBa0Isc0NBQWxCLENBQ0EsTUFBT0MsQ0FBQUEsZ0JBQVAsS0FBNkIsd0NBQTdCLENBRUE7O0dBR0EsY0FBZSxTQUFTQyxDQUFBQSxlQUFULENBQXlCQyxLQUF6QixDQUFnQyx1QkFDN0M7QUFDQSxLQUFNQyxDQUFBQSxZQUFZLHdCQUFHLEVBQUgsQ0FBbEIsQ0FGNkMsc0JBRzdDRCxLQUFLLENBQUNFLGNBQU4sR0FBdUJDLE9BQXZCLENBQWdDQyxNQUFELEVBQVksNkNBQ3pDSCxZQUFZLENBQUNHLE1BQU0sQ0FBQ0MsTUFBUCxFQUFELENBQVosQ0FBZ0NELE1BQWhDLENBQ0QsQ0FGRCxFQUlBO0FBQ0EsS0FBTUUsQ0FBQUEsVUFBVSx3QkFBRyxFQUFILENBQWhCLENBRUE7QUFDQSxLQUFNQyxDQUFBQSxXQUFXLHdCQUFHLEdBQUlWLENBQUFBLEtBQUosRUFBSCxDQUFqQixDQUVBLEtBQU1XLENBQUFBLFlBQVksd0JBQUcsQ0FDbkJDLFdBQVcsQ0FBRSxDQUFDLENBQUVDLGFBQUYsQ0FBRCxHQUF1Qiw2Q0FDbEM7QUFDQUosVUFBVSxDQUFDSSxhQUFhLENBQUNMLE1BQWQsRUFBRCxDQUFWLENBQXFDSyxhQUFyQyxDQUVBO0FBSmtDLHNCQUtsQyxNQUFPVCxDQUFBQSxZQUFZLENBQUNTLGFBQWEsQ0FBQ0wsTUFBZCxFQUFELENBQW5CLENBQ0QsQ0FQa0IsQ0FRbkJNLFdBQVcsQ0FBRSxDQUFDLENBQUVELGFBQUYsQ0FBRCxHQUF1Qiw2Q0FDbEM7QUFDQUgsV0FBVyxDQUFDSyxJQUFaLENBQWlCRixhQUFqQixFQUNELENBWGtCLENBWW5CRyxjQUFjLENBQUUsQ0FBQyxDQUFFQyxVQUFGLENBQUQsR0FBb0IsNkNBQ2xDLE1BQU8sQ0FBQ1IsVUFBVSxDQUFDUSxVQUFVLENBQUNULE1BQVgsRUFBRCxDQUFsQixDQUNELENBZGtCLENBQUgsQ0FBbEIsQ0FpQkE7QUE5QjZDLHVCQStCN0MsTUFBT1UsTUFBTSxDQUFDQyxJQUFQLENBQVlmLFlBQVosRUFBMEJnQixNQUFqQyxDQUF5QyxDQUN2QyxLQUFNQyxDQUFBQSxnQkFBZ0IseUJBQUdILE1BQU0sQ0FBQ0MsSUFBUCxDQUFZZixZQUFaLEVBQTBCLENBQTFCLENBQUgsQ0FBdEIsQ0FDQSxLQUFNUyxDQUFBQSxhQUFhLHlCQUFHVCxZQUFZLENBQUNpQixnQkFBRCxDQUFmLENBQW5CLENBRUE7QUFKdUMsdUJBS3ZDcEIsZ0JBQWdCLENBQUNFLEtBQUQsQ0FBUVUsYUFBUixDQUF1QkYsWUFBdkIsQ0FBaEIsQ0FDRCxDQXJDNEMsdUJBdUM3QyxNQUFPRCxDQUFBQSxXQUFXLENBQUNZLE9BQVosRUFBUCxDQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFN0YWNrIGZyb20gJy4uLy4uLy4uL2RhdGEtc3RydWN0dXJlcy9zdGFjay9TdGFjayc7XG5pbXBvcnQgZGVwdGhGaXJzdFNlYXJjaCBmcm9tICcuLi9kZXB0aC1maXJzdC1zZWFyY2gvZGVwdGhGaXJzdFNlYXJjaCc7XG5cbi8qKlxuICogQHBhcmFtIHtHcmFwaH0gZ3JhcGhcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdG9wb2xvZ2ljYWxTb3J0KGdyYXBoKSB7XG4gIC8vIENyZWF0ZSBhIHNldCBvZiBhbGwgdmVydGljZXMgd2Ugd2FudCB0byB2aXNpdC5cbiAgY29uc3QgdW52aXNpdGVkU2V0ID0ge307XG4gIGdyYXBoLmdldEFsbFZlcnRpY2VzKCkuZm9yRWFjaCgodmVydGV4KSA9PiB7XG4gICAgdW52aXNpdGVkU2V0W3ZlcnRleC5nZXRLZXkoKV0gPSB2ZXJ0ZXg7XG4gIH0pO1xuXG4gIC8vIENyZWF0ZSBhIHNldCBmb3IgYWxsIHZlcnRpY2VzIHRoYXQgd2UndmUgYWxyZWFkeSB2aXNpdGVkLlxuICBjb25zdCB2aXNpdGVkU2V0ID0ge307XG5cbiAgLy8gQ3JlYXRlIGEgc3RhY2sgb2YgYWxyZWFkeSBvcmRlcmVkIHZlcnRpY2VzLlxuICBjb25zdCBzb3J0ZWRTdGFjayA9IG5ldyBTdGFjaygpO1xuXG4gIGNvbnN0IGRmc0NhbGxiYWNrcyA9IHtcbiAgICBlbnRlclZlcnRleDogKHsgY3VycmVudFZlcnRleCB9KSA9PiB7XG4gICAgICAvLyBBZGQgdmVydGV4IHRvIHZpc2l0ZWQgc2V0IGluIGNhc2UgaWYgYWxsIGl0cyBjaGlsZHJlbiBoYXMgYmVlbiBleHBsb3JlZC5cbiAgICAgIHZpc2l0ZWRTZXRbY3VycmVudFZlcnRleC5nZXRLZXkoKV0gPSBjdXJyZW50VmVydGV4O1xuXG4gICAgICAvLyBSZW1vdmUgdGhpcyB2ZXJ0ZXggZnJvbSB1bnZpc2l0ZWQgc2V0LlxuICAgICAgZGVsZXRlIHVudmlzaXRlZFNldFtjdXJyZW50VmVydGV4LmdldEtleSgpXTtcbiAgICB9LFxuICAgIGxlYXZlVmVydGV4OiAoeyBjdXJyZW50VmVydGV4IH0pID0+IHtcbiAgICAgIC8vIElmIHRoZSB2ZXJ0ZXggaGFzIGJlZW4gdG90YWxseSBleHBsb3JlZCB0aGVuIHdlIG1heSBwdXNoIGl0IHRvIHN0YWNrLlxuICAgICAgc29ydGVkU3RhY2sucHVzaChjdXJyZW50VmVydGV4KTtcbiAgICB9LFxuICAgIGFsbG93VHJhdmVyc2FsOiAoeyBuZXh0VmVydGV4IH0pID0+IHtcbiAgICAgIHJldHVybiAhdmlzaXRlZFNldFtuZXh0VmVydGV4LmdldEtleSgpXTtcbiAgICB9LFxuICB9O1xuXG4gIC8vIExldCdzIGdvIGFuZCBkbyBERlMgZm9yIGFsbCB1bnZpc2l0ZWQgbm9kZXMuXG4gIHdoaWxlIChPYmplY3Qua2V5cyh1bnZpc2l0ZWRTZXQpLmxlbmd0aCkge1xuICAgIGNvbnN0IGN1cnJlbnRWZXJ0ZXhLZXkgPSBPYmplY3Qua2V5cyh1bnZpc2l0ZWRTZXQpWzBdO1xuICAgIGNvbnN0IGN1cnJlbnRWZXJ0ZXggPSB1bnZpc2l0ZWRTZXRbY3VycmVudFZlcnRleEtleV07XG5cbiAgICAvLyBEbyBERlMgZm9yIGN1cnJlbnQgbm9kZS5cbiAgICBkZXB0aEZpcnN0U2VhcmNoKGdyYXBoLCBjdXJyZW50VmVydGV4LCBkZnNDYWxsYmFja3MpO1xuICB9XG5cbiAgcmV0dXJuIHNvcnRlZFN0YWNrLnRvQXJyYXkoKTtcbn1cbiJdfQ==