var cov_2bnmj2mk3e=function(){var path="/Users/hb/latlib/jsserver/javascript-algorithms/src/algorithms/graph/bellman-ford/bellmanFord.js";var hash="9e108e8b7d52affacf7a018102254dbd0801c77f";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/hb/latlib/jsserver/javascript-algorithms/src/algorithms/graph/bellman-ford/bellmanFord.js",statementMap:{"0":{start:{line:7,column:20},end:{line:7,column:22}},"1":{start:{line:8,column:27},end:{line:8,column:29}},"2":{start:{line:12,column:2},end:{line:12,column:38}},"3":{start:{line:13,column:2},end:{line:18,column:5}},"4":{start:{line:14,column:4},end:{line:14,column:45}},"5":{start:{line:15,column:4},end:{line:17,column:5}},"6":{start:{line:16,column:6},end:{line:16,column:44}},"7":{start:{line:21,column:2},end:{line:39,column:3}},"8":{start:{line:21,column:23},end:{line:21,column:24}},"9":{start:{line:23,column:4},end:{line:38,column:7}},"10":{start:{line:24,column:21},end:{line:24,column:52}},"11":{start:{line:27,column:6},end:{line:37,column:9}},"12":{start:{line:28,column:21},end:{line:28,column:53}},"13":{start:{line:31,column:33},end:{line:31,column:59}},"14":{start:{line:32,column:35},end:{line:32,column:65}},"15":{start:{line:33,column:8},end:{line:36,column:9}},"16":{start:{line:34,column:10},end:{line:34,column:60}},"17":{start:{line:35,column:10},end:{line:35,column:55}},"18":{start:{line:41,column:2},end:{line:44,column:4}}},fnMap:{"0":{name:"bellmanFord",decl:{start:{line:6,column:24},end:{line:6,column:35}},loc:{start:{line:6,column:56},end:{line:45,column:1}},line:6},"1":{name:"(anonymous_1)",decl:{start:{line:13,column:33},end:{line:13,column:34}},loc:{start:{line:13,column:45},end:{line:18,column:3}},line:13},"2":{name:"(anonymous_2)",decl:{start:{line:23,column:35},end:{line:23,column:36}},loc:{start:{line:23,column:50},end:{line:38,column:5}},line:23},"3":{name:"(anonymous_3)",decl:{start:{line:27,column:41},end:{line:27,column:42}},loc:{start:{line:27,column:55},end:{line:37,column:7}},line:27}},branchMap:{"0":{loc:{start:{line:15,column:4},end:{line:17,column:5}},type:"if",locations:[{start:{line:15,column:4},end:{line:17,column:5}},{start:{line:15,column:4},end:{line:17,column:5}}],line:15},"1":{loc:{start:{line:33,column:8},end:{line:36,column:9}},type:"if",locations:[{start:{line:33,column:8},end:{line:36,column:9}},{start:{line:33,column:8},end:{line:36,column:9}}],line:33}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0},f:{"0":0,"1":0,"2":0,"3":0},b:{"0":[0,0],"1":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"9e108e8b7d52affacf7a018102254dbd0801c77f"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();/**
 * @param {Graph} graph
 * @param {GraphVertex} startVertex
 * @return {{distances, previousVertices}}
 */export default function bellmanFord(graph,startVertex){cov_2bnmj2mk3e.f[0]++;const distances=(cov_2bnmj2mk3e.s[0]++,{});const previousVertices=(cov_2bnmj2mk3e.s[1]++,{});// Init all distances with infinity assuming that currently we can't reach
// any of the vertices except start one.
cov_2bnmj2mk3e.s[2]++;distances[startVertex.getKey()]=0;cov_2bnmj2mk3e.s[3]++;graph.getAllVertices().forEach(vertex=>{cov_2bnmj2mk3e.f[1]++;cov_2bnmj2mk3e.s[4]++;previousVertices[vertex.getKey()]=null;cov_2bnmj2mk3e.s[5]++;if(vertex.getKey()!==startVertex.getKey()){cov_2bnmj2mk3e.b[0][0]++;cov_2bnmj2mk3e.s[6]++;distances[vertex.getKey()]=Infinity;}else{cov_2bnmj2mk3e.b[0][1]++;}});// We need (|V| - 1) iterations.
cov_2bnmj2mk3e.s[7]++;for(let iteration=(cov_2bnmj2mk3e.s[8]++,0);iteration<graph.getAllVertices().length-1;iteration+=1){cov_2bnmj2mk3e.s[9]++;// During each iteration go through all vertices.
Object.keys(distances).forEach(vertexKey=>{cov_2bnmj2mk3e.f[2]++;const vertex=(cov_2bnmj2mk3e.s[10]++,graph.getVertexByKey(vertexKey));// Go through all vertex edges.
cov_2bnmj2mk3e.s[11]++;graph.getNeighbors(vertex).forEach(neighbor=>{cov_2bnmj2mk3e.f[3]++;const edge=(cov_2bnmj2mk3e.s[12]++,graph.findEdge(vertex,neighbor));// Find out if the distance to the neighbor is shorter in this iteration
// then in previous one.
const distanceToVertex=(cov_2bnmj2mk3e.s[13]++,distances[vertex.getKey()]);const distanceToNeighbor=(cov_2bnmj2mk3e.s[14]++,distanceToVertex+edge.weight);cov_2bnmj2mk3e.s[15]++;if(distanceToNeighbor<distances[neighbor.getKey()]){cov_2bnmj2mk3e.b[1][0]++;cov_2bnmj2mk3e.s[16]++;distances[neighbor.getKey()]=distanceToNeighbor;cov_2bnmj2mk3e.s[17]++;previousVertices[neighbor.getKey()]=vertex;}else{cov_2bnmj2mk3e.b[1][1]++;}});});}cov_2bnmj2mk3e.s[18]++;return{distances,previousVertices};}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9oYi9sYXRsaWIvanNzZXJ2ZXIvamF2YXNjcmlwdC1hbGdvcml0aG1zL3NyYy9hbGdvcml0aG1zL2dyYXBoL2JlbGxtYW4tZm9yZC9iZWxsbWFuRm9yZC5qcyJdLCJuYW1lcyI6WyJiZWxsbWFuRm9yZCIsImdyYXBoIiwic3RhcnRWZXJ0ZXgiLCJkaXN0YW5jZXMiLCJwcmV2aW91c1ZlcnRpY2VzIiwiZ2V0S2V5IiwiZ2V0QWxsVmVydGljZXMiLCJmb3JFYWNoIiwidmVydGV4IiwiSW5maW5pdHkiLCJpdGVyYXRpb24iLCJsZW5ndGgiLCJPYmplY3QiLCJrZXlzIiwidmVydGV4S2V5IiwiZ2V0VmVydGV4QnlLZXkiLCJnZXROZWlnaGJvcnMiLCJuZWlnaGJvciIsImVkZ2UiLCJmaW5kRWRnZSIsImRpc3RhbmNlVG9WZXJ0ZXgiLCJkaXN0YW5jZVRvTmVpZ2hib3IiLCJ3ZWlnaHQiXSwibWFwcGluZ3MiOiJnekZBQUE7Ozs7R0FLQSxjQUFlLFNBQVNBLENBQUFBLFdBQVQsQ0FBcUJDLEtBQXJCLENBQTRCQyxXQUE1QixDQUF5Qyx1QkFDdEQsS0FBTUMsQ0FBQUEsU0FBUyx3QkFBRyxFQUFILENBQWYsQ0FDQSxLQUFNQyxDQUFBQSxnQkFBZ0Isd0JBQUcsRUFBSCxDQUF0QixDQUVBO0FBQ0E7QUFMc0Qsc0JBTXRERCxTQUFTLENBQUNELFdBQVcsQ0FBQ0csTUFBWixFQUFELENBQVQsQ0FBa0MsQ0FBbEMsQ0FOc0Qsc0JBT3RESixLQUFLLENBQUNLLGNBQU4sR0FBdUJDLE9BQXZCLENBQWdDQyxNQUFELEVBQVksNkNBQ3pDSixnQkFBZ0IsQ0FBQ0ksTUFBTSxDQUFDSCxNQUFQLEVBQUQsQ0FBaEIsQ0FBb0MsSUFBcEMsQ0FEeUMsc0JBRXpDLEdBQUlHLE1BQU0sQ0FBQ0gsTUFBUCxLQUFvQkgsV0FBVyxDQUFDRyxNQUFaLEVBQXhCLENBQThDLGdEQUM1Q0YsU0FBUyxDQUFDSyxNQUFNLENBQUNILE1BQVAsRUFBRCxDQUFULENBQTZCSSxRQUE3QixDQUNELENBRkQsK0JBR0QsQ0FMRCxFQU9BO0FBZHNELHNCQWV0RCxJQUFLLEdBQUlDLENBQUFBLFNBQVMsd0JBQUcsQ0FBSCxDQUFsQixDQUF3QkEsU0FBUyxDQUFJVCxLQUFLLENBQUNLLGNBQU4sR0FBdUJLLE1BQXZCLENBQWdDLENBQXJFLENBQXlFRCxTQUFTLEVBQUksQ0FBdEYsQ0FBeUYsdUJBQ3ZGO0FBQ0FFLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZVixTQUFaLEVBQXVCSSxPQUF2QixDQUFnQ08sU0FBRCxFQUFlLHVCQUM1QyxLQUFNTixDQUFBQSxNQUFNLHlCQUFHUCxLQUFLLENBQUNjLGNBQU4sQ0FBcUJELFNBQXJCLENBQUgsQ0FBWixDQUVBO0FBSDRDLHVCQUk1Q2IsS0FBSyxDQUFDZSxZQUFOLENBQW1CUixNQUFuQixFQUEyQkQsT0FBM0IsQ0FBb0NVLFFBQUQsRUFBYyx1QkFDL0MsS0FBTUMsQ0FBQUEsSUFBSSx5QkFBR2pCLEtBQUssQ0FBQ2tCLFFBQU4sQ0FBZVgsTUFBZixDQUF1QlMsUUFBdkIsQ0FBSCxDQUFWLENBQ0E7QUFDQTtBQUNBLEtBQU1HLENBQUFBLGdCQUFnQix5QkFBR2pCLFNBQVMsQ0FBQ0ssTUFBTSxDQUFDSCxNQUFQLEVBQUQsQ0FBWixDQUF0QixDQUNBLEtBQU1nQixDQUFBQSxrQkFBa0IseUJBQUdELGdCQUFnQixDQUFHRixJQUFJLENBQUNJLE1BQTNCLENBQXhCLENBTCtDLHVCQU0vQyxHQUFJRCxrQkFBa0IsQ0FBR2xCLFNBQVMsQ0FBQ2MsUUFBUSxDQUFDWixNQUFULEVBQUQsQ0FBbEMsQ0FBdUQsaURBQ3JERixTQUFTLENBQUNjLFFBQVEsQ0FBQ1osTUFBVCxFQUFELENBQVQsQ0FBK0JnQixrQkFBL0IsQ0FEcUQsdUJBRXJEakIsZ0JBQWdCLENBQUNhLFFBQVEsQ0FBQ1osTUFBVCxFQUFELENBQWhCLENBQXNDRyxNQUF0QyxDQUNELENBSEQsK0JBSUQsQ0FWRCxFQVdELENBZkQsRUFnQkQsQ0FqQ3FELHVCQW1DdEQsTUFBTyxDQUNMTCxTQURLLENBRUxDLGdCQUZLLENBQVAsQ0FJRCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHBhcmFtIHtHcmFwaH0gZ3JhcGhcbiAqIEBwYXJhbSB7R3JhcGhWZXJ0ZXh9IHN0YXJ0VmVydGV4XG4gKiBAcmV0dXJuIHt7ZGlzdGFuY2VzLCBwcmV2aW91c1ZlcnRpY2VzfX1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYmVsbG1hbkZvcmQoZ3JhcGgsIHN0YXJ0VmVydGV4KSB7XG4gIGNvbnN0IGRpc3RhbmNlcyA9IHt9O1xuICBjb25zdCBwcmV2aW91c1ZlcnRpY2VzID0ge307XG5cbiAgLy8gSW5pdCBhbGwgZGlzdGFuY2VzIHdpdGggaW5maW5pdHkgYXNzdW1pbmcgdGhhdCBjdXJyZW50bHkgd2UgY2FuJ3QgcmVhY2hcbiAgLy8gYW55IG9mIHRoZSB2ZXJ0aWNlcyBleGNlcHQgc3RhcnQgb25lLlxuICBkaXN0YW5jZXNbc3RhcnRWZXJ0ZXguZ2V0S2V5KCldID0gMDtcbiAgZ3JhcGguZ2V0QWxsVmVydGljZXMoKS5mb3JFYWNoKCh2ZXJ0ZXgpID0+IHtcbiAgICBwcmV2aW91c1ZlcnRpY2VzW3ZlcnRleC5nZXRLZXkoKV0gPSBudWxsO1xuICAgIGlmICh2ZXJ0ZXguZ2V0S2V5KCkgIT09IHN0YXJ0VmVydGV4LmdldEtleSgpKSB7XG4gICAgICBkaXN0YW5jZXNbdmVydGV4LmdldEtleSgpXSA9IEluZmluaXR5O1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gV2UgbmVlZCAofFZ8IC0gMSkgaXRlcmF0aW9ucy5cbiAgZm9yIChsZXQgaXRlcmF0aW9uID0gMDsgaXRlcmF0aW9uIDwgKGdyYXBoLmdldEFsbFZlcnRpY2VzKCkubGVuZ3RoIC0gMSk7IGl0ZXJhdGlvbiArPSAxKSB7XG4gICAgLy8gRHVyaW5nIGVhY2ggaXRlcmF0aW9uIGdvIHRocm91Z2ggYWxsIHZlcnRpY2VzLlxuICAgIE9iamVjdC5rZXlzKGRpc3RhbmNlcykuZm9yRWFjaCgodmVydGV4S2V5KSA9PiB7XG4gICAgICBjb25zdCB2ZXJ0ZXggPSBncmFwaC5nZXRWZXJ0ZXhCeUtleSh2ZXJ0ZXhLZXkpO1xuXG4gICAgICAvLyBHbyB0aHJvdWdoIGFsbCB2ZXJ0ZXggZWRnZXMuXG4gICAgICBncmFwaC5nZXROZWlnaGJvcnModmVydGV4KS5mb3JFYWNoKChuZWlnaGJvcikgPT4ge1xuICAgICAgICBjb25zdCBlZGdlID0gZ3JhcGguZmluZEVkZ2UodmVydGV4LCBuZWlnaGJvcik7XG4gICAgICAgIC8vIEZpbmQgb3V0IGlmIHRoZSBkaXN0YW5jZSB0byB0aGUgbmVpZ2hib3IgaXMgc2hvcnRlciBpbiB0aGlzIGl0ZXJhdGlvblxuICAgICAgICAvLyB0aGVuIGluIHByZXZpb3VzIG9uZS5cbiAgICAgICAgY29uc3QgZGlzdGFuY2VUb1ZlcnRleCA9IGRpc3RhbmNlc1t2ZXJ0ZXguZ2V0S2V5KCldO1xuICAgICAgICBjb25zdCBkaXN0YW5jZVRvTmVpZ2hib3IgPSBkaXN0YW5jZVRvVmVydGV4ICsgZWRnZS53ZWlnaHQ7XG4gICAgICAgIGlmIChkaXN0YW5jZVRvTmVpZ2hib3IgPCBkaXN0YW5jZXNbbmVpZ2hib3IuZ2V0S2V5KCldKSB7XG4gICAgICAgICAgZGlzdGFuY2VzW25laWdoYm9yLmdldEtleSgpXSA9IGRpc3RhbmNlVG9OZWlnaGJvcjtcbiAgICAgICAgICBwcmV2aW91c1ZlcnRpY2VzW25laWdoYm9yLmdldEtleSgpXSA9IHZlcnRleDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGRpc3RhbmNlcyxcbiAgICBwcmV2aW91c1ZlcnRpY2VzLFxuICB9O1xufVxuIl19