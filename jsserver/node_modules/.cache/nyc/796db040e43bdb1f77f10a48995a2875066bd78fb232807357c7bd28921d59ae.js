var cov_u9vsvej=function(){var path="/Users/hb/latlib/jsserver/javascript-algorithms/src/data-structures/hash-table/HashTable.js";var hash="26e79a576f7f7d893abc3a2d2a3cd21a1e6457a4";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/hb/latlib/jsserver/javascript-algorithms/src/data-structures/hash-table/HashTable.js",statementMap:{"0":{start:{line:7,column:29},end:{line:7,column:31}},"1":{start:{line:15,column:4},end:{line:15,column:79}},"2":{start:{line:15,column:61},end:{line:15,column:77}},"3":{start:{line:18,column:4},end:{line:18,column:19}},"4":{start:{line:38,column:17},end:{line:41,column:5}},"5":{start:{line:39,column:39},end:{line:39,column:80}},"6":{start:{line:44,column:4},end:{line:44,column:38}},"7":{start:{line:52,column:20},end:{line:52,column:34}},"8":{start:{line:53,column:4},end:{line:53,column:29}},"9":{start:{line:54,column:29},end:{line:54,column:50}},"10":{start:{line:55,column:17},end:{line:55,column:88}},"11":{start:{line:55,column:64},end:{line:55,column:85}},"12":{start:{line:57,column:4},end:{line:63,column:5}},"13":{start:{line:59,column:6},end:{line:59,column:46}},"14":{start:{line:62,column:6},end:{line:62,column:31}},"15":{start:{line:71,column:20},end:{line:71,column:34}},"16":{start:{line:72,column:4},end:{line:72,column:26}},"17":{start:{line:73,column:29},end:{line:73,column:50}},"18":{start:{line:74,column:17},end:{line:74,column:88}},"19":{start:{line:74,column:64},end:{line:74,column:85}},"20":{start:{line:76,column:4},end:{line:78,column:5}},"21":{start:{line:77,column:6},end:{line:77,column:49}},"22":{start:{line:80,column:4},end:{line:80,column:16}},"23":{start:{line:88,column:29},end:{line:88,column:57}},"24":{start:{line:89,column:17},end:{line:89,column:88}},"25":{start:{line:89,column:64},end:{line:89,column:85}},"26":{start:{line:91,column:4},end:{line:91,column:47}},"27":{start:{line:99,column:4},end:{line:99,column:54}},"28":{start:{line:106,column:4},end:{line:106,column:34}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:13,column:2},end:{line:13,column:3}},loc:{start:{line:13,column:52},end:{line:19,column:3}},line:13},"1":{name:"(anonymous_1)",decl:{start:{line:15,column:55},end:{line:15,column:56}},loc:{start:{line:15,column:61},end:{line:15,column:77}},line:15},"2":{name:"(anonymous_2)",decl:{start:{line:27,column:2},end:{line:27,column:3}},loc:{start:{line:27,column:12},end:{line:45,column:3}},line:27},"3":{name:"(anonymous_3)",decl:{start:{line:39,column:6},end:{line:39,column:7}},loc:{start:{line:39,column:39},end:{line:39,column:80}},line:39},"4":{name:"(anonymous_4)",decl:{start:{line:51,column:2},end:{line:51,column:3}},loc:{start:{line:51,column:18},end:{line:64,column:3}},line:51},"5":{name:"(anonymous_5)",decl:{start:{line:55,column:51},end:{line:55,column:52}},loc:{start:{line:55,column:64},end:{line:55,column:85}},line:55},"6":{name:"(anonymous_6)",decl:{start:{line:70,column:2},end:{line:70,column:3}},loc:{start:{line:70,column:14},end:{line:81,column:3}},line:70},"7":{name:"(anonymous_7)",decl:{start:{line:74,column:51},end:{line:74,column:52}},loc:{start:{line:74,column:64},end:{line:74,column:85}},line:74},"8":{name:"(anonymous_8)",decl:{start:{line:87,column:2},end:{line:87,column:3}},loc:{start:{line:87,column:11},end:{line:92,column:3}},line:87},"9":{name:"(anonymous_9)",decl:{start:{line:89,column:51},end:{line:89,column:52}},loc:{start:{line:89,column:64},end:{line:89,column:85}},line:89},"10":{name:"(anonymous_10)",decl:{start:{line:98,column:2},end:{line:98,column:3}},loc:{start:{line:98,column:11},end:{line:100,column:3}},line:98},"11":{name:"(anonymous_11)",decl:{start:{line:105,column:2},end:{line:105,column:3}},loc:{start:{line:105,column:12},end:{line:107,column:3}},line:105}},branchMap:{"0":{loc:{start:{line:13,column:14},end:{line:13,column:50}},type:"default-arg",locations:[{start:{line:13,column:30},end:{line:13,column:50}}],line:13},"1":{loc:{start:{line:57,column:4},end:{line:63,column:5}},type:"if",locations:[{start:{line:57,column:4},end:{line:63,column:5}},{start:{line:57,column:4},end:{line:63,column:5}}],line:57},"2":{loc:{start:{line:76,column:4},end:{line:78,column:5}},type:"if",locations:[{start:{line:76,column:4},end:{line:78,column:5}},{start:{line:76,column:4},end:{line:78,column:5}}],line:76},"3":{loc:{start:{line:91,column:11},end:{line:91,column:46}},type:"cond-expr",locations:[{start:{line:91,column:18},end:{line:91,column:34}},{start:{line:91,column:37},end:{line:91,column:46}}],line:91}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},b:{"0":[0],"1":[0,0],"2":[0,0],"3":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"26e79a576f7f7d893abc3a2d2a3cd21a1e6457a4"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();import LinkedList from'../linked-list/LinkedList';// Hash table size directly affects on the number of collisions.
// The bigger the hash table size the less collisions you'll get.
// For demonstrating purposes hash table size is small to show how collisions
// are being handled.
const defaultHashTableSize=(cov_u9vsvej.s[0]++,32);export default class HashTable{/**
   * @param {number} hashTableSize
   */constructor(hashTableSize=(cov_u9vsvej.b[0][0]++,defaultHashTableSize)){cov_u9vsvej.f[0]++;cov_u9vsvej.s[1]++;// Create hash table of certain size and fill each bucket with empty linked list.
this.buckets=Array(hashTableSize).fill(null).map(()=>{cov_u9vsvej.f[1]++;cov_u9vsvej.s[2]++;return new LinkedList();});// Just to keep track of all actual keys in a fast way.
cov_u9vsvej.s[3]++;this.keys={};}/**
   * Converts key string to hash number.
   *
   * @param {string} key
   * @return {number}
   */hash(key){cov_u9vsvej.f[2]++;// For simplicity reasons we will just use character codes sum of all characters of the key
// to calculate the hash.
//
// But you may also use more sophisticated approaches like polynomial string hash to reduce the
// number of collisions:
//
// hash = charCodeAt(0) * PRIME^(n-1) + charCodeAt(1) * PRIME^(n-2) + ... + charCodeAt(n-1)
//
// where charCodeAt(i) is the i-th character code of the key, n is the length of the key and
// PRIME is just any prime number like 31.
const hash=(cov_u9vsvej.s[4]++,Array.from(key).reduce((hashAccumulator,keySymbol)=>{cov_u9vsvej.f[3]++;cov_u9vsvej.s[5]++;return hashAccumulator+keySymbol.charCodeAt(0);},0));// Reduce hash number so it would fit hash table size.
cov_u9vsvej.s[6]++;return hash%this.buckets.length;}/**
   * @param {string} key
   * @param {*} value
   */set(key,value){cov_u9vsvej.f[4]++;const keyHash=(cov_u9vsvej.s[7]++,this.hash(key));cov_u9vsvej.s[8]++;this.keys[key]=keyHash;const bucketLinkedList=(cov_u9vsvej.s[9]++,this.buckets[keyHash]);const node=(cov_u9vsvej.s[10]++,bucketLinkedList.find({callback:nodeValue=>{cov_u9vsvej.f[5]++;cov_u9vsvej.s[11]++;return nodeValue.key===key;}}));cov_u9vsvej.s[12]++;if(!node){cov_u9vsvej.b[1][0]++;cov_u9vsvej.s[13]++;// Insert new node.
bucketLinkedList.append({key,value});}else{cov_u9vsvej.b[1][1]++;cov_u9vsvej.s[14]++;// Update value of existing node.
node.value.value=value;}}/**
   * @param {string} key
   * @return {*}
   */delete(key){cov_u9vsvej.f[6]++;const keyHash=(cov_u9vsvej.s[15]++,this.hash(key));cov_u9vsvej.s[16]++;delete this.keys[key];const bucketLinkedList=(cov_u9vsvej.s[17]++,this.buckets[keyHash]);const node=(cov_u9vsvej.s[18]++,bucketLinkedList.find({callback:nodeValue=>{cov_u9vsvej.f[7]++;cov_u9vsvej.s[19]++;return nodeValue.key===key;}}));cov_u9vsvej.s[20]++;if(node){cov_u9vsvej.b[2][0]++;cov_u9vsvej.s[21]++;return bucketLinkedList.delete(node.value);}else{cov_u9vsvej.b[2][1]++;}cov_u9vsvej.s[22]++;return null;}/**
   * @param {string} key
   * @return {*}
   */get(key){cov_u9vsvej.f[8]++;const bucketLinkedList=(cov_u9vsvej.s[23]++,this.buckets[this.hash(key)]);const node=(cov_u9vsvej.s[24]++,bucketLinkedList.find({callback:nodeValue=>{cov_u9vsvej.f[9]++;cov_u9vsvej.s[25]++;return nodeValue.key===key;}}));cov_u9vsvej.s[26]++;return node?(cov_u9vsvej.b[3][0]++,node.value.value):(cov_u9vsvej.b[3][1]++,undefined);}/**
   * @param {string} key
   * @return {boolean}
   */has(key){cov_u9vsvej.f[10]++;cov_u9vsvej.s[27]++;return Object.hasOwnProperty.call(this.keys,key);}/**
   * @return {string[]}
   */getKeys(){cov_u9vsvej.f[11]++;cov_u9vsvej.s[28]++;return Object.keys(this.keys);}}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9oYi9sYXRsaWIvanNzZXJ2ZXIvamF2YXNjcmlwdC1hbGdvcml0aG1zL3NyYy9kYXRhLXN0cnVjdHVyZXMvaGFzaC10YWJsZS9IYXNoVGFibGUuanMiXSwibmFtZXMiOlsiTGlua2VkTGlzdCIsImRlZmF1bHRIYXNoVGFibGVTaXplIiwiSGFzaFRhYmxlIiwiY29uc3RydWN0b3IiLCJoYXNoVGFibGVTaXplIiwiYnVja2V0cyIsIkFycmF5IiwiZmlsbCIsIm1hcCIsImtleXMiLCJoYXNoIiwia2V5IiwiZnJvbSIsInJlZHVjZSIsImhhc2hBY2N1bXVsYXRvciIsImtleVN5bWJvbCIsImNoYXJDb2RlQXQiLCJsZW5ndGgiLCJzZXQiLCJ2YWx1ZSIsImtleUhhc2giLCJidWNrZXRMaW5rZWRMaXN0Iiwibm9kZSIsImZpbmQiLCJjYWxsYmFjayIsIm5vZGVWYWx1ZSIsImFwcGVuZCIsImRlbGV0ZSIsImdldCIsInVuZGVmaW5lZCIsImhhcyIsIk9iamVjdCIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImdldEtleXMiXSwibWFwcGluZ3MiOiI0K0pBQUEsTUFBT0EsQ0FBQUEsVUFBUCxLQUF1QiwyQkFBdkIsQ0FFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQU1DLENBQUFBLG9CQUFvQixxQkFBRyxFQUFILENBQTFCLENBRUEsY0FBZSxNQUFNQyxDQUFBQSxTQUFVLENBQzdCOztLQUdBQyxXQUFXLENBQUNDLGFBQWEsd0JBQUdILG9CQUFILENBQWQsQ0FBdUMsdUNBQ2hEO0FBQ0EsS0FBS0ksT0FBTCxDQUFlQyxLQUFLLENBQUNGLGFBQUQsQ0FBTCxDQUFxQkcsSUFBckIsQ0FBMEIsSUFBMUIsRUFBZ0NDLEdBQWhDLENBQW9DLElBQU0saURBQUlSLENBQUFBLFVBQUosR0FBZ0IsQ0FBMUQsQ0FBZixDQUVBO0FBSmdELG1CQUtoRCxLQUFLUyxJQUFMLENBQVksRUFBWixDQUNELENBRUQ7Ozs7O0tBTUFDLElBQUksQ0FBQ0MsR0FBRCxDQUFNLG9CQUNS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R0FBdEMsQ0FBUCxDQUNELENBRUQ7O0tBR0F1QixPQUFPLEVBQUcseUNBQ1IsTUFBT0gsQ0FBQUEsTUFBTSxDQUFDdEIsSUFBUCxDQUFZLEtBQUtBLElBQWpCLENBQVAsQ0FDRCxDQWxHNEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgTGlua2VkTGlzdCBmcm9tICcuLi9saW5rZWQtbGlzdC9MaW5rZWRMaXN0JztcblxuLy8gSGFzaCB0YWJsZSBzaXplIGRpcmVjdGx5IGFmZmVjdHMgb24gdGhlIG51bWJlciBvZiBjb2xsaXNpb25zLlxuLy8gVGhlIGJpZ2dlciB0aGUgaGFzaCB0YWJsZSBzaXplIHRoZSBsZXNzIGNvbGxpc2lvbnMgeW91J2xsIGdldC5cbi8vIEZvciBkZW1vbnN0cmF0aW5nIHB1cnBvc2VzIGhhc2ggdGFibGUgc2l6ZSBpcyBzbWFsbCB0byBzaG93IGhvdyBjb2xsaXNpb25zXG4vLyBhcmUgYmVpbmcgaGFuZGxlZC5cbmNvbnN0IGRlZmF1bHRIYXNoVGFibGVTaXplID0gMzI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEhhc2hUYWJsZSB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gaGFzaFRhYmxlU2l6ZVxuICAgKi9cbiAgY29uc3RydWN0b3IoaGFzaFRhYmxlU2l6ZSA9IGRlZmF1bHRIYXNoVGFibGVTaXplKSB7XG4gICAgLy8gQ3JlYXRlIGhhc2ggdGFibGUgb2YgY2VydGFpbiBzaXplIGFuZCBmaWxsIGVhY2ggYnVja2V0IHdpdGggZW1wdHkgbGlua2VkIGxpc3QuXG4gICAgdGhpcy5idWNrZXRzID0gQXJyYXkoaGFzaFRhYmxlU2l6ZSkuZmlsbChudWxsKS5tYXAoKCkgPT4gbmV3IExpbmtlZExpc3QoKSk7XG5cbiAgICAvLyBKdXN0IHRvIGtlZXAgdHJhY2sgb2YgYWxsIGFjdHVhbCBrZXlzIGluIGEgZmFzdCB3YXkuXG4gICAgdGhpcy5rZXlzID0ge307XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMga2V5IHN0cmluZyB0byBoYXNoIG51bWJlci5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleVxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICBoYXNoKGtleSkge1xuICAgIC8vIEZvciBzaW1wbGljaXR5IHJlYXNvbnMgd2Ugd2lsbCBqdXN0IHVzZSBjaGFyYWN0ZXIgY29kZXMgc3VtIG9mIGFsbCBjaGFyYWN0ZXJzIG9mIHRoZSBrZXlcbiAgICAvLyB0byBjYWxjdWxhdGUgdGhlIGhhc2guXG4gICAgLy9cbiAgICAvLyBCdXQgeW91IG1heSBhbHNvIHVzZSBtb3JlIHNvcGhpc3RpY2F0ZWQgYXBwcm9hY2hlcyBsaWtlIHBvbHlub21pYWwgc3RyaW5nIGhhc2ggdG8gcmVkdWNlIHRoZVxuICAgIC8vIG51bWJlciBvZiBjb2xsaXNpb25zOlxuICAgIC8vXG4gICAgLy8gaGFzaCA9IGNoYXJDb2RlQXQoMCkgKiBQUklNRV4obi0xKSArIGNoYXJDb2RlQXQoMSkgKiBQUklNRV4obi0yKSArIC4uLiArIGNoYXJDb2RlQXQobi0xKVxuICAgIC8vXG4gICAgLy8gd2hlcmUgY2hhckNvZGVBdChpKSBpcyB0aGUgaS10aCBjaGFyYWN0ZXIgY29kZSBvZiB0aGUga2V5LCBuIGlzIHRoZSBsZW5ndGggb2YgdGhlIGtleSBhbmRcbiAgICAvLyBQUklNRSBpcyBqdXN0IGFueSBwcmltZSBudW1iZXIgbGlrZSAzMS5cbiAgICBjb25zdCBoYXNoID0gQXJyYXkuZnJvbShrZXkpLnJlZHVjZShcbiAgICAgIChoYXNoQWNjdW11bGF0b3IsIGtleVN5bWJvbCkgPT4gKGhhc2hBY2N1bXVsYXRvciArIGtleVN5bWJvbC5jaGFyQ29kZUF0KDApKSxcbiAgICAgIDAsXG4gICAgKTtcblxuICAgIC8vIFJlZHVjZSBoYXNoIG51bWJlciBzbyBpdCB3b3VsZCBmaXQgaGFzaCB0YWJsZSBzaXplLlxuICAgIHJldHVybiBoYXNoICUgdGhpcy5idWNrZXRzLmxlbmd0aDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5XG4gICAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAgICovXG4gIHNldChrZXksIHZhbHVlKSB7XG4gICAgY29uc3Qga2V5SGFzaCA9IHRoaXMuaGFzaChrZXkpO1xuICAgIHRoaXMua2V5c1trZXldID0ga2V5SGFzaDtcbiAgICBjb25zdCBidWNrZXRMaW5rZWRMaXN0ID0gdGhpcy5idWNrZXRzW2tleUhhc2hdO1xuICAgIGNvbnN0IG5vZGUgPSBidWNrZXRMaW5rZWRMaXN0LmZpbmQoeyBjYWxsYmFjazogbm9kZVZhbHVlID0+IG5vZGVWYWx1ZS5rZXkgPT09IGtleSB9KTtcblxuICAgIGlmICghbm9kZSkge1xuICAgICAgLy8gSW5zZXJ0IG5ldyBub2RlLlxuICAgICAgYnVja2V0TGlua2VkTGlzdC5hcHBlbmQoeyBrZXksIHZhbHVlIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBVcGRhdGUgdmFsdWUgb2YgZXhpc3Rpbmcgbm9kZS5cbiAgICAgIG5vZGUudmFsdWUudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleVxuICAgKiBAcmV0dXJuIHsqfVxuICAgKi9cbiAgZGVsZXRlKGtleSkge1xuICAgIGNvbnN0IGtleUhhc2ggPSB0aGlzLmhhc2goa2V5KTtcbiAgICBkZWxldGUgdGhpcy5rZXlzW2tleV07XG4gICAgY29uc3QgYnVja2V0TGlua2VkTGlzdCA9IHRoaXMuYnVja2V0c1trZXlIYXNoXTtcbiAgICBjb25zdCBub2RlID0gYnVja2V0TGlua2VkTGlzdC5maW5kKHsgY2FsbGJhY2s6IG5vZGVWYWx1ZSA9PiBub2RlVmFsdWUua2V5ID09PSBrZXkgfSk7XG5cbiAgICBpZiAobm9kZSkge1xuICAgICAgcmV0dXJuIGJ1Y2tldExpbmtlZExpc3QuZGVsZXRlKG5vZGUudmFsdWUpO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXlcbiAgICogQHJldHVybiB7Kn1cbiAgICovXG4gIGdldChrZXkpIHtcbiAgICBjb25zdCBidWNrZXRMaW5rZWRMaXN0ID0gdGhpcy5idWNrZXRzW3RoaXMuaGFzaChrZXkpXTtcbiAgICBjb25zdCBub2RlID0gYnVja2V0TGlua2VkTGlzdC5maW5kKHsgY2FsbGJhY2s6IG5vZGVWYWx1ZSA9PiBub2RlVmFsdWUua2V5ID09PSBrZXkgfSk7XG5cbiAgICByZXR1cm4gbm9kZSA/IG5vZGUudmFsdWUudmFsdWUgOiB1bmRlZmluZWQ7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleVxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgaGFzKGtleSkge1xuICAgIHJldHVybiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLmtleXMsIGtleSk7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7c3RyaW5nW119XG4gICAqL1xuICBnZXRLZXlzKCkge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLmtleXMpO1xuICB9XG59XG4iXX0=