var cov_22f7estkm1=function(){var path="/Users/hb/latlib/jsserver/javascript-algorithms/src/algorithms/graph/hamiltonian-cycle/hamiltonianCycle.js";var hash="e9d8e536c154b930ed1d11ce89f7fe737ad4657d";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/hb/latlib/jsserver/javascript-algorithms/src/algorithms/graph/hamiltonian-cycle/hamiltonianCycle.js",statementMap:{"0":{start:{line:11,column:20},end:{line:11,column:43}},"1":{start:{line:14,column:40},end:{line:14,column:81}},"2":{start:{line:15,column:34},end:{line:15,column:69}},"3":{start:{line:18,column:2},end:{line:20,column:3}},"4":{start:{line:19,column:4},end:{line:19,column:17}},"5":{start:{line:23,column:29},end:{line:23,column:95}},"6":{start:{line:23,column:50},end:{line:23,column:94}},"7":{start:{line:25,column:2},end:{line:25,column:29}},"8":{start:{line:38,column:22},end:{line:38,column:30}},"9":{start:{line:39,column:20},end:{line:39,column:43}},"10":{start:{line:42,column:36},end:{line:42,column:73}},"11":{start:{line:43,column:34},end:{line:43,column:69}},"12":{start:{line:46,column:2},end:{line:46,column:90}},"13":{start:{line:64,column:23},end:{line:64,column:78}},"14":{start:{line:64,column:48},end:{line:64,column:77}},"15":{start:{line:66,column:2},end:{line:74,column:3}},"16":{start:{line:69,column:4},end:{line:72,column:5}},"17":{start:{line:71,column:6},end:{line:71,column:32}},"18":{start:{line:73,column:4},end:{line:73,column:11}},"19":{start:{line:76,column:2},end:{line:98,column:3}},"20":{start:{line:76,column:25},end:{line:76,column:26}},"21":{start:{line:78,column:28},end:{line:78,column:49}},"22":{start:{line:81,column:4},end:{line:97,column:5}},"23":{start:{line:83,column:6},end:{line:83,column:41}},"24":{start:{line:86,column:6},end:{line:92,column:9}},"25":{start:{line:96,column:6},end:{line:96,column:25}},"26":{start:{line:108,column:26},end:{line:108,column:52}},"27":{start:{line:109,column:26},end:{line:109,column:52}},"28":{start:{line:110,column:19},end:{line:110,column:41}},"29":{start:{line:115,column:22},end:{line:115,column:33}},"30":{start:{line:118,column:17},end:{line:118,column:19}},"31":{start:{line:121,column:16},end:{line:121,column:29}},"32":{start:{line:124,column:2},end:{line:130,column:5}},"33":{start:{line:133,column:2},end:{line:133,column:16}}},fnMap:{"0":{name:"isSafe",decl:{start:{line:10,column:9},end:{line:10,column:15}},loc:{start:{line:10,column:74},end:{line:26,column:1}},line:10},"1":{name:"(anonymous_1)",decl:{start:{line:23,column:40},end:{line:23,column:41}},loc:{start:{line:23,column:50},end:{line:23,column:94}},line:23},"2":{name:"isCycle",decl:{start:{line:34,column:9},end:{line:34,column:16}},loc:{start:{line:34,column:58},end:{line:47,column:1}},line:34},"3":{name:"hamiltonianCycleRecursive",decl:{start:{line:56,column:9},end:{line:56,column:34}},loc:{start:{line:62,column:3},end:{line:99,column:1}},line:62},"4":{name:"(anonymous_4)",decl:{start:{line:64,column:38},end:{line:64,column:39}},loc:{start:{line:64,column:48},end:{line:64,column:77}},line:64},"5":{name:"hamiltonianCycle",decl:{start:{line:105,column:24},end:{line:105,column:40}},loc:{start:{line:105,column:48},end:{line:134,column:1}},line:105}},branchMap:{"0":{loc:{start:{line:18,column:2},end:{line:20,column:3}},type:"if",locations:[{start:{line:18,column:2},end:{line:20,column:3}},{start:{line:18,column:2},end:{line:20,column:3}}],line:18},"1":{loc:{start:{line:66,column:2},end:{line:74,column:3}},type:"if",locations:[{start:{line:66,column:2},end:{line:74,column:3}},{start:{line:66,column:2},end:{line:74,column:3}}],line:66},"2":{loc:{start:{line:69,column:4},end:{line:72,column:5}},type:"if",locations:[{start:{line:69,column:4},end:{line:72,column:5}},{start:{line:69,column:4},end:{line:72,column:5}}],line:69},"3":{loc:{start:{line:81,column:4},end:{line:97,column:5}},type:"if",locations:[{start:{line:81,column:4},end:{line:97,column:5}},{start:{line:81,column:4},end:{line:97,column:5}}],line:81}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"e9d8e536c154b930ed1d11ce89f7fe737ad4657d"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();import GraphVertex from'../../../data-structures/graph/GraphVertex';/**
 * @param {number[][]} adjacencyMatrix
 * @param {object} verticesIndices
 * @param {GraphVertex[]} cycle
 * @param {GraphVertex} vertexCandidate
 * @return {boolean}
 */function isSafe(adjacencyMatrix,verticesIndices,cycle,vertexCandidate){cov_22f7estkm1.f[0]++;const endVertex=(cov_22f7estkm1.s[0]++,cycle[cycle.length-1]);// Get end and candidate vertices indices in adjacency matrix.
const candidateVertexAdjacencyIndex=(cov_22f7estkm1.s[1]++,verticesIndices[vertexCandidate.getKey()]);const endVertexAdjacencyIndex=(cov_22f7estkm1.s[2]++,verticesIndices[endVertex.getKey()]);// Check if last vertex in the path and candidate vertex are adjacent.
cov_22f7estkm1.s[3]++;if(adjacencyMatrix[endVertexAdjacencyIndex][candidateVertexAdjacencyIndex]===Infinity){cov_22f7estkm1.b[0][0]++;cov_22f7estkm1.s[4]++;return false;}else{cov_22f7estkm1.b[0][1]++;}// Check if vertexCandidate is being added to the path for the first time.
const candidateDuplicate=(cov_22f7estkm1.s[5]++,cycle.find(vertex=>{cov_22f7estkm1.f[1]++;cov_22f7estkm1.s[6]++;return vertex.getKey()===vertexCandidate.getKey();}));cov_22f7estkm1.s[7]++;return!candidateDuplicate;}/**
 * @param {number[][]} adjacencyMatrix
 * @param {object} verticesIndices
 * @param {GraphVertex[]} cycle
 * @return {boolean}
 */function isCycle(adjacencyMatrix,verticesIndices,cycle){cov_22f7estkm1.f[2]++;// Check if first and last vertices in hamiltonian path are adjacent.
// Get start and end vertices from the path.
const startVertex=(cov_22f7estkm1.s[8]++,cycle[0]);const endVertex=(cov_22f7estkm1.s[9]++,cycle[cycle.length-1]);// Get start/end vertices indices in adjacency matrix.
const startVertexAdjacencyIndex=(cov_22f7estkm1.s[10]++,verticesIndices[startVertex.getKey()]);const endVertexAdjacencyIndex=(cov_22f7estkm1.s[11]++,verticesIndices[endVertex.getKey()]);// Check if we can go from end vertex to the start one.
cov_22f7estkm1.s[12]++;return adjacencyMatrix[endVertexAdjacencyIndex][startVertexAdjacencyIndex]!==Infinity;}/**
 * @param {number[][]} adjacencyMatrix
 * @param {GraphVertex[]} vertices
 * @param {object} verticesIndices
 * @param {GraphVertex[][]} cycles
 * @param {GraphVertex[]} cycle
 */function hamiltonianCycleRecursive({adjacencyMatrix,vertices,verticesIndices,cycles,cycle}){cov_22f7estkm1.f[3]++;// Clone cycle in order to prevent it from modification by other DFS branches.
const currentCycle=(cov_22f7estkm1.s[13]++,[...cycle].map(vertex=>{cov_22f7estkm1.f[4]++;cov_22f7estkm1.s[14]++;return new GraphVertex(vertex.value);}));cov_22f7estkm1.s[15]++;if(vertices.length===currentCycle.length){cov_22f7estkm1.b[1][0]++;cov_22f7estkm1.s[16]++;// Hamiltonian path is found.
// Now we need to check if it is cycle or not.
if(isCycle(adjacencyMatrix,verticesIndices,currentCycle)){cov_22f7estkm1.b[2][0]++;cov_22f7estkm1.s[17]++;// Another solution has been found. Save it.
cycles.push(currentCycle);}else{cov_22f7estkm1.b[2][1]++;}cov_22f7estkm1.s[18]++;return;}else{cov_22f7estkm1.b[1][1]++;}cov_22f7estkm1.s[19]++;for(let vertexIndex=(cov_22f7estkm1.s[20]++,0);vertexIndex<vertices.length;vertexIndex+=1){// Get vertex candidate that we will try to put into next path step and see if it fits.
const vertexCandidate=(cov_22f7estkm1.s[21]++,vertices[vertexIndex]);// Check if it is safe to put vertex candidate to cycle.
cov_22f7estkm1.s[22]++;if(isSafe(adjacencyMatrix,verticesIndices,currentCycle,vertexCandidate)){cov_22f7estkm1.b[3][0]++;cov_22f7estkm1.s[23]++;// Add candidate vertex to cycle path.
currentCycle.push(vertexCandidate);// Try to find other vertices in cycle.
cov_22f7estkm1.s[24]++;hamiltonianCycleRecursive({adjacencyMatrix,vertices,verticesIndices,cycles,cycle:currentCycle});// BACKTRACKING.
// Remove candidate vertex from cycle path in order to try another one.
cov_22f7estkm1.s[25]++;currentCycle.pop();}else{cov_22f7estkm1.b[3][1]++;}}}/**
 * @param {Graph} graph
 * @return {GraphVertex[][]}
 */export default function hamiltonianCycle(graph){cov_22f7estkm1.f[5]++;// Gather some information about the graph that we will need to during
// the problem solving.
const verticesIndices=(cov_22f7estkm1.s[26]++,graph.getVerticesIndices());const adjacencyMatrix=(cov_22f7estkm1.s[27]++,graph.getAdjacencyMatrix());const vertices=(cov_22f7estkm1.s[28]++,graph.getAllVertices());// Define start vertex. We will always pick the first one
// this it doesn't matter which vertex to pick in a cycle.
// Every vertex is in a cycle so we can start from any of them.
const startVertex=(cov_22f7estkm1.s[29]++,vertices[0]);// Init cycles array that will hold all solutions.
const cycles=(cov_22f7estkm1.s[30]++,[]);// Init cycle array that will hold current cycle path.
const cycle=(cov_22f7estkm1.s[31]++,[startVertex]);// Try to find cycles recursively in Depth First Search order.
cov_22f7estkm1.s[32]++;hamiltonianCycleRecursive({adjacencyMatrix,vertices,verticesIndices,cycles,cycle});// Return found cycles.
cov_22f7estkm1.s[33]++;return cycles;}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,