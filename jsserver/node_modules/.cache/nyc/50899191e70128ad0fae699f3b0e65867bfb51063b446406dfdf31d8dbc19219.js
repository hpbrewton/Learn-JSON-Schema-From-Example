var cov_2b8abol5pw=function(){var path="/Users/hb/latlib/jsserver/javascript-algorithms/src/algorithms/graph/travelling-salesman/bfTravellingSalesman.js";var hash="00e97773f82832623eb6913dc6b69ab647e0254c";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/hb/latlib/jsserver/javascript-algorithms/src/algorithms/graph/travelling-salesman/bfTravellingSalesman.js",statementMap:{"0":{start:{line:9,column:22},end:{line:9,column:31}},"1":{start:{line:12,column:2},end:{line:12,column:32}},"2":{start:{line:15,column:21},end:{line:20,column:8}},"3":{start:{line:16,column:31},end:{line:16,column:49}},"4":{start:{line:17,column:4},end:{line:17,column:49}},"5":{start:{line:19,column:4},end:{line:19,column:30}},"6":{start:{line:23,column:29},end:{line:25,column:4}},"7":{start:{line:24,column:4},end:{line:24,column:42}},"8":{start:{line:28,column:2},end:{line:32,column:3}},"9":{start:{line:29,column:4},end:{line:29,column:28}},"10":{start:{line:31,column:4},end:{line:31,column:17}},"11":{start:{line:35,column:2},end:{line:38,column:3}},"12":{start:{line:35,column:27},end:{line:35,column:28}},"13":{start:{line:36,column:37},end:{line:36,column:70}},"14":{start:{line:37,column:4},end:{line:37,column:63}},"15":{start:{line:40,column:2},end:{line:40,column:15}},"16":{start:{line:50,column:15},end:{line:50,column:16}},"17":{start:{line:52,column:2},end:{line:58,column:3}},"18":{start:{line:52,column:24},end:{line:52,column:25}},"19":{start:{line:53,column:23},end:{line:53,column:44}},"20":{start:{line:54,column:21},end:{line:54,column:38}},"21":{start:{line:55,column:28},end:{line:55,column:64}},"22":{start:{line:56,column:26},end:{line:56,column:60}},"23":{start:{line:57,column:4},end:{line:57,column:62}},"24":{start:{line:60,column:2},end:{line:60,column:16}},"25":{start:{line:71,column:22},end:{line:71,column:47}},"26":{start:{line:75,column:27},end:{line:75,column:52}},"27":{start:{line:78,column:28},end:{line:84,column:4}},"28":{start:{line:80,column:23},end:{line:80,column:44}},"29":{start:{line:81,column:32},end:{line:81,column:57}},"30":{start:{line:83,column:4},end:{line:83,column:53}},"31":{start:{line:87,column:26},end:{line:87,column:52}},"32":{start:{line:88,column:26},end:{line:88,column:52}},"33":{start:{line:89,column:21},end:{line:89,column:23}},"34":{start:{line:90,column:27},end:{line:90,column:31}},"35":{start:{line:91,column:2},end:{line:100,column:3}},"36":{start:{line:91,column:24},end:{line:91,column:25}},"37":{start:{line:92,column:25},end:{line:92,column:54}},"38":{start:{line:93,column:31},end:{line:93,column:93}},"39":{start:{line:96,column:4},end:{line:99,column:5}},"40":{start:{line:97,column:6},end:{line:97,column:34}},"41":{start:{line:98,column:6},end:{line:98,column:46}},"42":{start:{line:103,column:2},end:{line:103,column:22}}},fnMap:{"0":{name:"findAllPaths",decl:{start:{line:7,column:9},end:{line:7,column:21}},loc:{start:{line:7,column:58},end:{line:41,column:1}},line:7},"1":{name:"(anonymous_1)",decl:{start:{line:15,column:40},end:{line:15,column:41}},loc:{start:{line:15,column:65},end:{line:20,column:3}},line:15},"2":{name:"(anonymous_2)",decl:{start:{line:23,column:63},end:{line:23,column:64}},loc:{start:{line:23,column:77},end:{line:25,column:3}},line:23},"3":{name:"getCycleWeight",decl:{start:{line:49,column:9},end:{line:49,column:23}},loc:{start:{line:49,column:65},end:{line:61,column:1}},line:49},"4":{name:"bfTravellingSalesman",decl:{start:{line:69,column:24},end:{line:69,column:44}},loc:{start:{line:69,column:52},end:{line:104,column:1}},line:69},"5":{name:"(anonymous_5)",decl:{start:{line:78,column:52},end:{line:78,column:53}},loc:{start:{line:78,column:62},end:{line:84,column:3}},line:78}},branchMap:{"0":{loc:{start:{line:7,column:35},end:{line:7,column:45}},type:"default-arg",locations:[{start:{line:7,column:43},end:{line:7,column:45}}],line:7},"1":{loc:{start:{line:7,column:47},end:{line:7,column:56}},type:"default-arg",locations:[{start:{line:7,column:54},end:{line:7,column:56}}],line:7},"2":{loc:{start:{line:28,column:2},end:{line:32,column:3}},type:"if",locations:[{start:{line:28,column:2},end:{line:32,column:3}},{start:{line:28,column:2},end:{line:32,column:3}}],line:28},"3":{loc:{start:{line:96,column:4},end:{line:99,column:5}},type:"if",locations:[{start:{line:96,column:4},end:{line:99,column:5}},{start:{line:96,column:4},end:{line:99,column:5}}],line:96},"4":{loc:{start:{line:96,column:8},end:{line:96,column:78}},type:"binary-expr",locations:[{start:{line:96,column:8},end:{line:96,column:35}},{start:{line:96,column:39},end:{line:96,column:78}}],line:96}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0},b:{"0":[0],"1":[0],"2":[0,0],"3":[0,0],"4":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"00e97773f82832623eb6913dc6b69ab647e0254c"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();/**
 * Get all possible paths
 * @param {GraphVertex} startVertex
 * @param {GraphVertex[][]} [paths]
 * @param {GraphVertex[]} [path]
 */function findAllPaths(startVertex,paths=(cov_2b8abol5pw.b[0][0]++,[]),path=(cov_2b8abol5pw.b[1][0]++,[])){cov_2b8abol5pw.f[0]++;// Clone path.
const currentPath=(cov_2b8abol5pw.s[0]++,[...path]);// Add startVertex to the path.
cov_2b8abol5pw.s[1]++;currentPath.push(startVertex);// Generate visited set from path.
const visitedSet=(cov_2b8abol5pw.s[2]++,currentPath.reduce((accumulator,vertex)=>{cov_2b8abol5pw.f[1]++;const updatedAccumulator=(cov_2b8abol5pw.s[3]++,{...accumulator});cov_2b8abol5pw.s[4]++;updatedAccumulator[vertex.getKey()]=vertex;cov_2b8abol5pw.s[5]++;return updatedAccumulator;},{}));// Get all unvisited neighbors of startVertex.
const unvisitedNeighbors=(cov_2b8abol5pw.s[6]++,startVertex.getNeighbors().filter(neighbor=>{cov_2b8abol5pw.f[2]++;cov_2b8abol5pw.s[7]++;return!visitedSet[neighbor.getKey()];}));// If there no unvisited neighbors then treat current path as complete and save it.
cov_2b8abol5pw.s[8]++;if(!unvisitedNeighbors.length){cov_2b8abol5pw.b[2][0]++;cov_2b8abol5pw.s[9]++;paths.push(currentPath);cov_2b8abol5pw.s[10]++;return paths;}else{cov_2b8abol5pw.b[2][1]++;}// Go through all the neighbors.
cov_2b8abol5pw.s[11]++;for(let neighborIndex=(cov_2b8abol5pw.s[12]++,0);neighborIndex<unvisitedNeighbors.length;neighborIndex+=1){const currentUnvisitedNeighbor=(cov_2b8abol5pw.s[13]++,unvisitedNeighbors[neighborIndex]);cov_2b8abol5pw.s[14]++;findAllPaths(currentUnvisitedNeighbor,paths,currentPath);}cov_2b8abol5pw.s[15]++;return paths;}/**
 * @param {number[][]} adjacencyMatrix
 * @param {object} verticesIndices
 * @param {GraphVertex[]} cycle
 * @return {number}
 */function getCycleWeight(adjacencyMatrix,verticesIndices,cycle){cov_2b8abol5pw.f[3]++;let weight=(cov_2b8abol5pw.s[16]++,0);cov_2b8abol5pw.s[17]++;for(let cycleIndex=(cov_2b8abol5pw.s[18]++,1);cycleIndex<cycle.length;cycleIndex+=1){const fromVertex=(cov_2b8abol5pw.s[19]++,cycle[cycleIndex-1]);const toVertex=(cov_2b8abol5pw.s[20]++,cycle[cycleIndex]);const fromVertexIndex=(cov_2b8abol5pw.s[21]++,verticesIndices[fromVertex.getKey()]);const toVertexIndex=(cov_2b8abol5pw.s[22]++,verticesIndices[toVertex.getKey()]);cov_2b8abol5pw.s[23]++;weight+=adjacencyMatrix[fromVertexIndex][toVertexIndex];}cov_2b8abol5pw.s[24]++;return weight;}/**
 * BRUTE FORCE approach to solve Traveling Salesman Problem.
 *
 * @param {Graph} graph
 * @return {GraphVertex[]}
 */export default function bfTravellingSalesman(graph){cov_2b8abol5pw.f[4]++;// Pick starting point from where we will traverse the graph.
const startVertex=(cov_2b8abol5pw.s[25]++,graph.getAllVertices()[0]);// BRUTE FORCE.
// Generate all possible paths from startVertex.
const allPossiblePaths=(cov_2b8abol5pw.s[26]++,findAllPaths(startVertex));// Filter out paths that are not cycles.
const allPossibleCycles=(cov_2b8abol5pw.s[27]++,allPossiblePaths.filter(path=>{cov_2b8abol5pw.f[5]++;/** @var {GraphVertex} */const lastVertex=(cov_2b8abol5pw.s[28]++,path[path.length-1]);const lastVertexNeighbors=(cov_2b8abol5pw.s[29]++,lastVertex.getNeighbors());cov_2b8abol5pw.s[30]++;return lastVertexNeighbors.includes(startVertex);}));// Go through all possible cycles and pick the one with minimum overall tour weight.
const adjacencyMatrix=(cov_2b8abol5pw.s[31]++,graph.getAdjacencyMatrix());const verticesIndices=(cov_2b8abol5pw.s[32]++,graph.getVerticesIndices());let salesmanPath=(cov_2b8abol5pw.s[33]++,[]);let salesmanPathWeight=(cov_2b8abol5pw.s[34]++,null);cov_2b8abol5pw.s[35]++;for(let cycleIndex=(cov_2b8abol5pw.s[36]++,0);cycleIndex<allPossibleCycles.length;cycleIndex+=1){const currentCycle=(cov_2b8abol5pw.s[37]++,allPossibleCycles[cycleIndex]);const currentCycleWeight=(cov_2b8abol5pw.s[38]++,getCycleWeight(adjacencyMatrix,verticesIndices,currentCycle));// If current cycle weight is smaller then previous ones treat current cycle as most optimal.
cov_2b8abol5pw.s[39]++;if((cov_2b8abol5pw.b[4][0]++,salesmanPathWeight===null)||(cov_2b8abol5pw.b[4][1]++,currentCycleWeight<salesmanPathWeight)){cov_2b8abol5pw.b[3][0]++;cov_2b8abol5pw.s[40]++;salesmanPath=currentCycle;cov_2b8abol5pw.s[41]++;salesmanPathWeight=currentCycleWeight;}else{cov_2b8abol5pw.b[3][1]++;}}// Return the solution.
cov_2b8abol5pw.s[42]++;return salesmanPath;}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,