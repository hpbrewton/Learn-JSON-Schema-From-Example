var cov_3fbapg1yz=function(){var path="/Users/hb/latlib/jsserver/javascript-algorithms/src/algorithms/graph/eulerian-path/eulerianPath.js";var hash="5735ac61a1eff9881986fff123a389cf18ca2e1d";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/hb/latlib/jsserver/javascript-algorithms/src/algorithms/graph/eulerian-path/eulerianPath.js",statementMap:{"0":{start:{line:10,column:31},end:{line:10,column:33}},"1":{start:{line:13,column:27},end:{line:13,column:29}},"2":{start:{line:16,column:26},end:{line:16,column:28}},"3":{start:{line:19,column:26},end:{line:19,column:28}},"4":{start:{line:20,column:2},end:{line:22,column:5}},"5":{start:{line:21,column:4},end:{line:21,column:46}},"6":{start:{line:26,column:2},end:{line:32,column:5}},"7":{start:{line:27,column:4},end:{line:31,column:5}},"8":{start:{line:28,column:6},end:{line:28,column:48}},"9":{start:{line:30,column:6},end:{line:30,column:49}},"10":{start:{line:38,column:20},end:{line:38,column:58}},"11":{start:{line:40,column:2},end:{line:42,column:3}},"12":{start:{line:41,column:4},end:{line:41,column:74}},"13":{start:{line:45,column:20},end:{line:45,column:24}},"14":{start:{line:47,column:2},end:{line:56,column:3}},"15":{start:{line:50,column:26},end:{line:50,column:58}},"16":{start:{line:51,column:4},end:{line:51,column:50}},"17":{start:{line:54,column:25},end:{line:54,column:56}},"18":{start:{line:55,column:4},end:{line:55,column:48}},"19":{start:{line:59,column:22},end:{line:59,column:33}},"20":{start:{line:60,column:2},end:{line:98,column:3}},"21":{start:{line:62,column:4},end:{line:62,column:45}},"22":{start:{line:67,column:20},end:{line:67,column:39}},"23":{start:{line:70,column:25},end:{line:70,column:49}},"24":{start:{line:72,column:23},end:{line:72,column:27}},"25":{start:{line:73,column:4},end:{line:79,column:5}},"26":{start:{line:75,column:6},end:{line:75,column:36}},"27":{start:{line:78,column:6},end:{line:78,column:76}},"28":{start:{line:78,column:51},end:{line:78,column:74}},"29":{start:{line:82,column:4},end:{line:86,column:5}},"30":{start:{line:83,column:6},end:{line:83,column:45}},"31":{start:{line:85,column:6},end:{line:85,column:47}},"32":{start:{line:89,column:4},end:{line:89,column:50}},"33":{start:{line:92,column:4},end:{line:94,column:5}},"34":{start:{line:93,column:6},end:{line:93,column:47}},"35":{start:{line:97,column:4},end:{line:97,column:35}},"36":{start:{line:100,column:2},end:{line:100,column:30}}},fnMap:{"0":{name:"eulerianPath",decl:{start:{line:9,column:24},end:{line:9,column:36}},loc:{start:{line:9,column:44},end:{line:101,column:1}},line:9},"1":{name:"(anonymous_1)",decl:{start:{line:20,column:30},end:{line:20,column:31}},loc:{start:{line:20,column:42},end:{line:22,column:3}},line:20},"2":{name:"(anonymous_2)",decl:{start:{line:26,column:33},end:{line:26,column:34}},loc:{start:{line:26,column:45},end:{line:32,column:3}},line:26},"3":{name:"(anonymous_3)",decl:{start:{line:78,column:43},end:{line:78,column:44}},loc:{start:{line:78,column:51},end:{line:78,column:74}},line:78}},branchMap:{"0":{loc:{start:{line:27,column:4},end:{line:31,column:5}},type:"if",locations:[{start:{line:27,column:4},end:{line:31,column:5}},{start:{line:27,column:4},end:{line:31,column:5}}],line:27},"1":{loc:{start:{line:40,column:2},end:{line:42,column:3}},type:"if",locations:[{start:{line:40,column:2},end:{line:42,column:3}},{start:{line:40,column:2},end:{line:42,column:3}}],line:40},"2":{loc:{start:{line:40,column:6},end:{line:40,column:63}},type:"binary-expr",locations:[{start:{line:40,column:6},end:{line:40,column:16}},{start:{line:40,column:20},end:{line:40,column:63}}],line:40},"3":{loc:{start:{line:47,column:2},end:{line:56,column:3}},type:"if",locations:[{start:{line:47,column:2},end:{line:56,column:3}},{start:{line:47,column:2},end:{line:56,column:3}}],line:47},"4":{loc:{start:{line:73,column:4},end:{line:79,column:5}},type:"if",locations:[{start:{line:73,column:4},end:{line:79,column:5}},{start:{line:73,column:4},end:{line:79,column:5}}],line:73},"5":{loc:{start:{line:82,column:4},end:{line:86,column:5}},type:"if",locations:[{start:{line:82,column:4},end:{line:86,column:5}},{start:{line:82,column:4},end:{line:86,column:5}}],line:82},"6":{loc:{start:{line:92,column:4},end:{line:94,column:5}},type:"if",locations:[{start:{line:92,column:4},end:{line:94,column:5}},{start:{line:92,column:4},end:{line:94,column:5}}],line:92}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0},f:{"0":0,"1":0,"2":0,"3":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"5735ac61a1eff9881986fff123a389cf18ca2e1d"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();import graphBridges from'../bridges/graphBridges';/**
 * Fleury's algorithm of finding Eulerian Path (visit all graph edges exactly once).
 *
 * @param {Graph} graph
 * @return {GraphVertex[]}
 */export default function eulerianPath(graph){cov_3fbapg1yz.f[0]++;const eulerianPathVertices=(cov_3fbapg1yz.s[0]++,[]);// Set that contains all vertices with even rank (number of neighbors).
const evenRankVertices=(cov_3fbapg1yz.s[1]++,{});// Set that contains all vertices with odd rank (number of neighbors).
const oddRankVertices=(cov_3fbapg1yz.s[2]++,{});// Set of all not visited edges.
const notVisitedEdges=(cov_3fbapg1yz.s[3]++,{});cov_3fbapg1yz.s[4]++;graph.getAllEdges().forEach(vertex=>{cov_3fbapg1yz.f[1]++;cov_3fbapg1yz.s[5]++;notVisitedEdges[vertex.getKey()]=vertex;});// Detect whether graph contains Eulerian Circuit or Eulerian Path or none of them.
/** @params {GraphVertex} vertex */cov_3fbapg1yz.s[6]++;graph.getAllVertices().forEach(vertex=>{cov_3fbapg1yz.f[2]++;cov_3fbapg1yz.s[7]++;if(vertex.getDegree()%2){cov_3fbapg1yz.b[0][0]++;cov_3fbapg1yz.s[8]++;oddRankVertices[vertex.getKey()]=vertex;}else{cov_3fbapg1yz.b[0][1]++;cov_3fbapg1yz.s[9]++;evenRankVertices[vertex.getKey()]=vertex;}});// Check whether we're dealing with Eulerian Circuit or Eulerian Path only.
// Graph would be an Eulerian Circuit in case if all its vertices has even degree.
// If not all vertices have even degree then graph must contain only two odd-degree
// vertices in order to have Euler Path.
const isCircuit=(cov_3fbapg1yz.s[10]++,!Object.values(oddRankVertices).length);cov_3fbapg1yz.s[11]++;if((cov_3fbapg1yz.b[2][0]++,!isCircuit)&&(cov_3fbapg1yz.b[2][1]++,Object.values(oddRankVertices).length!==2)){cov_3fbapg1yz.b[1][0]++;cov_3fbapg1yz.s[12]++;throw new Error('Eulerian path must contain two odd-ranked vertices');}else{cov_3fbapg1yz.b[1][1]++;}// Pick start vertex for traversal.
let startVertex=(cov_3fbapg1yz.s[13]++,null);cov_3fbapg1yz.s[14]++;if(isCircuit){cov_3fbapg1yz.b[3][0]++;// For Eulerian Circuit it doesn't matter from what vertex to start thus we'll just
// peek a first node.
const evenVertexKey=(cov_3fbapg1yz.s[15]++,Object.keys(evenRankVertices)[0]);cov_3fbapg1yz.s[16]++;startVertex=evenRankVertices[evenVertexKey];}else{cov_3fbapg1yz.b[3][1]++;// For Eulerian Path we need to start from one of two odd-degree vertices.
const oddVertexKey=(cov_3fbapg1yz.s[17]++,Object.keys(oddRankVertices)[0]);cov_3fbapg1yz.s[18]++;startVertex=oddRankVertices[oddVertexKey];}// Start traversing the graph.
let currentVertex=(cov_3fbapg1yz.s[19]++,startVertex);cov_3fbapg1yz.s[20]++;while(Object.values(notVisitedEdges).length){cov_3fbapg1yz.s[21]++;// Add current vertex to Eulerian path.
eulerianPathVertices.push(currentVertex);// Detect all bridges in graph.
// We need to do it in order to not delete bridges if there are other edges
// exists for deletion.
const bridges=(cov_3fbapg1yz.s[22]++,graphBridges(graph));// Peek the next edge to delete from graph.
const currentEdges=(cov_3fbapg1yz.s[23]++,currentVertex.getEdges());/** @var {GraphEdge} edgeToDelete */let edgeToDelete=(cov_3fbapg1yz.s[24]++,null);cov_3fbapg1yz.s[25]++;if(currentEdges.length===1){cov_3fbapg1yz.b[4][0]++;cov_3fbapg1yz.s[26]++;// If there is only one edge left we need to peek it.
[edgeToDelete]=currentEdges;}else{cov_3fbapg1yz.b[4][1]++;cov_3fbapg1yz.s[27]++;// If there are many edges left then we need to peek any of those except bridges.
[edgeToDelete]=currentEdges.filter(edge=>{cov_3fbapg1yz.f[3]++;cov_3fbapg1yz.s[28]++;return!bridges[edge.getKey()];});}// Detect next current vertex.
cov_3fbapg1yz.s[29]++;if(currentVertex.getKey()===edgeToDelete.startVertex.getKey()){cov_3fbapg1yz.b[5][0]++;cov_3fbapg1yz.s[30]++;currentVertex=edgeToDelete.endVertex;}else{cov_3fbapg1yz.b[5][1]++;cov_3fbapg1yz.s[31]++;currentVertex=edgeToDelete.startVertex;}// Delete edge from not visited edges set.
cov_3fbapg1yz.s[32]++;delete notVisitedEdges[edgeToDelete.getKey()];// If last edge were deleted then add finish vertex to Eulerian Path.
cov_3fbapg1yz.s[33]++;if(Object.values(notVisitedEdges).length===0){cov_3fbapg1yz.b[6][0]++;cov_3fbapg1yz.s[34]++;eulerianPathVertices.push(currentVertex);}else{cov_3fbapg1yz.b[6][1]++;}// Delete the edge from graph.
cov_3fbapg1yz.s[35]++;graph.deleteEdge(edgeToDelete);}cov_3fbapg1yz.s[36]++;return eulerianPathVertices;}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,